{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"advanced/","title":"Index","text":""},{"location":"advanced/#advanced-information","title":"Advanced Information","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This section contains detailed information on how to use Formmask, how to tune a sample, building audiobanks, creating custom envelopes, injecting non-vanilla samples into Ocarina of Time and Majora's Mask, and more technical MIDI information to help create a better sequence.</p>"},{"location":"advanced/#placeholder","title":"placeholder","text":"<ul> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> </ul>"},{"location":"advanced/#adsr","title":"ADSR","text":"<p>Learn how to make custom envelopes for instruments, drums, or sound effects to manipulate samples in Ocarina of Time and Majora's Mask.</p> <ul> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> </ul>"},{"location":"advanced/#custom-sample-injection","title":"Custom Sample Injection","text":"<p>Learn to create and inject custom instrument, drum, or sound effect samples into Ocarina of Time and Majora's Mask.</p> <ul> <li> Sample Injection Overview \u2013 Obtain basic knowledge of the files and tools used for sample injection</li> <li> WAV File Conversion \u2013 Learn to convert WAV files into sample files compatible with Ocarina of Time and Majora's Mask</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> </ul>"},{"location":"advanced/#midi","title":"MIDI","text":"<p>Learn more technical information about MIDI to create better sequences.</p> <ul> <li> Advanced MIDI Overview \u2013 placeholder</li> <li> SysEx Messages \u2013 A brief summary of universal realtime SysEx messages and how to use them</li> <li> Registered Parameter Numbers \u2013 A brief summary of Registered Parameter Numbers and how to use them</li> <li> placeholder \u2013 placeholder</li> </ul>"},{"location":"advanced/formmask/","title":"Formmask","text":"<p>This page pertains to a feature only available in the Majora's Mask Randomizer</p>","tags":["Advanced"]},{"location":"advanced/formmask/#using-formmask","title":"Using Formmask","text":"<p>This page details how to use the Formmask feature added in version 1.15.0.21 of the Majora's Mask Randomizer. Formmask is the ability to enable and disable specific sequence channels depending on Link's current form or state; this allows the creation of more dynamic sequences than is normally possible in the vanilla game.</p> <p>A form refers to Link's different physical forms with the following being available with Formmask: Hylian, Deku, Goron, and Zora. A state refers to the different game states with the following being available with Formmask: swimming, combat, Goron spike rolling, and riding Epona.</p> <p>Non-Useable Categories</p> <p>At the time of writing this, Formmask does not currently work with fanfares or combat music. If using formmask with them, then the randomizer will just play all available channels instead. Because of this, it is discouraged to use formmask with any of the following categories:</p> Group CategoriesIndividual Categories Category Group Name <code>5</code> Action Cutscenes <code>7</code> Combat &amp; Boss Fights <code>8</code> Item Get, Minigame Win, Soaring <code>9</code> Game Over <code>10</code> Area Cleared Category Sequence Name Category Sequence Name <code>108</code> Fanfare: Event Failure [1] <code>13F</code> Fanfare: Goron Race Victory! <code>109</code> Fanfare: Event Failure [2] <code>141</code> Fanfare: Horse Race Victory! <code>119</code> Fanfare: Event Success! <code>152</code> Fanfare: Learned a Song! <code>11A</code> Battle: Regular Enemy <code>155</code> Fanfare: Song of Soaring <code>11B</code> Battle: Dungeon Boss <code>169</code> Battle: Majora's Wrath <code>120</code> Fanfare: Game Over! <code>16A</code> Battle: Majora's Incarnation <code>121</code> Fanfare: Boss Defeated! <code>16B</code> Battle: Majora's Mask <code>122</code> Fanfare: Get an Item! <code>177</code> Fanfare: Temple Appears! <code>124</code> Fanfare: Get a Heart Container! <code>178</code> Fanfare: Temple Clear (Short) [1] <code>137</code> Fanfare: Get a Mask! <code>179</code> Fanfare: Temple Clear (Long) [2] <code>138</code> Battle: Miniboss <code>17C</code> Fanfare: The Giants' Farewell! <code>139</code> Fanfare: Get a Heart Piece! <code>17E</code> Fanfare: The Moon Destroyed <code>13D</code> Fanfare: The Truth Revealed! \u2014 \u2014","tags":["Advanced"]},{"location":"advanced/formmask/#creating-a-formmask-file","title":"Creating a Formmask File","text":"<p>A <code>.formmask</code> file is just a <code>.json</code> (or <code>.txt</code>) file with its filename extension changed to <code>.formmask</code>. Inside the file is a single JSON array that contains all the necessary data for which channels to enable and disable when the conditions to do so are met. This file is packed into the root of an <code>.mmrs</code> file:</p> <pre><code>\ud83d\udcc2 ./\n\u251c\u2500 \ud83d\udcc2 song.mmrs/\n\u2502  \u251c\u2500 \ud83c\udfb5 filename.seq\n\u2502  \u251c\u2500 \ud83d\udcc4 filename.formmask (1)\n\u2502  \u2514\u2500 \ud83d\udcc4 categories.txt\n</code></pre> <ol> <li>The filename itself uses the same naming as a sequence or audiobank file (e.g. A sequence using audiobank 0x03 will be named <code>0x03.seq</code> with the corresponding formmask file being named <code>0x03.formmask</code>).</li> </ol>","tags":["Advanced"]},{"location":"advanced/formmask/#json-array-formatting","title":"JSON Array Formatting","text":"<p>The formatting for a JSON array is as follows:</p>  \u00a0Template \u00a0Example 1 \u00a0Example 2 <p> <pre><code>[\n    \"Channel 0\",\n    \"Channel 1\",\n    \"Channel 2\",\n    \"Channel 3\",\n    \"Channel 4\",\n    \"Channel 5\",\n    \"Channel 6\",\n    \"Channel 7\",\n    \"Channel 8\",\n    \"Channel 9\",\n    \"Channel 10\",\n    \"Channel 11\",\n    \"Channel 12\",\n    \"Channel 13\",\n    \"Channel 14\",\n    \"Channel 15\",\n    \"Cumulative States\"\n]\n</code></pre> </p> <p> <pre><code>[\n    \"All\",#(1)!\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"Swim\",#(2)!\n    \"Swim\",\n    \"All\",\n    \"Combat\",#(3)!\n    \"Combat\",\n    \"Combat\",\n    \"Swim\",\n    \"All\",\n    \"All\",\n    \"Epona, SpikeRolling\"#(4)!\n]\n</code></pre> </p> <ol> <li>Channels 0, 1, 2, 3, 4, 5, 6, 9, 14, and 15 are enabled when Link is in any form (Hylian, Deku, Goron, or Zora), and all other channels will be disabled.</li> <li>Channels 7, 8, and 13 are enabled when Link is swimming and all other channels will be disabled.</li> <li>Channels 10, 11, and 12 are enabled when Link is in combat and all other channels will be disabled.</li> <li>When Link is in the Epona or SpikeRolling state, all currently enabled channels will stay enabled; no new channels will be enabled or disabled as no channel depends on these states to be enabled.</li> </ol> <p> <pre><code>[\n    \"All\",#(1)!\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"All\",\n    \"Swim\",#(2)!\n    \"All\",\n    \"Combat\",\n    \"All\",\n    \"All\",\n    \"Epona, SpikeRolling, Combat\"#(3)!\n]\n</code></pre> </p> <ol> <li>Channels 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14 and 15 are enabled when Link is in any form (Hylian, Deku, Goron, or Zora), and all other channels will be disabled.</li> <li>Channel 11 is enabled when Link is swimming and all other channels will be disabled.</li> <li>When Link is in the Epona, SpikeRolling, or Combat states, all currently enabled channels will stay enabled; if Link is in combat, then channel 13 will be enabled alongside any other enabled channels.</li> </ol> <p>The first 16 array values are for the channels of the sequence, and the 17th array value is for cumulative states. Cumulative states applied to a sequence will cause the channels with cumulative states to continue playing with already playing channels. If a form or state is non-cumulative, it will only play when Link is in that form or state.</p> <p>Assigning Multiple Values</p> <p>Channels and cumulative states can have multiple values. To use multiple values, add the desired values to the current value separated by a comma while still contained within quotation marks (e.g. <code>\"state1, state2, state3\"</code>). These comma-separated values do not need to have spaces between them.</p>","tags":["Advanced"]},{"location":"advanced/formmask/#allowed-form-state-values","title":"Allowed Form &amp; State Values","text":"<p>Below is a list of the forms and states available to be assigned via Formmask:</p> FormsStates Form Description <code>Human</code> The assigned channel will be enabled while Link is a Hylian <code>Deku</code> The assigned channel will be enabled whil Link is a Deku <code>Goron</code> The assigned channel will be enabled while Link is a Goron <code>Zora</code> The assigned channel will be enabled while Link is a Zora <code>All</code> The assigned channel will be enabled for all of Link's different forms State Description <code>Swim</code> The assigned channel will be enabled while Link is swimming in the water <code>Combat</code> The assigned channel will be enabled while Link is near or fighting an enemy <code>Epona</code> The assigned channel will be enabled while Link is riding Epona <code>SpikeRolling</code> The assigned channel will be enabled while Goron Link is rolling with spikes","tags":["Advanced"]},{"location":"advanced/formmask/#testing-a-formmask-sequence","title":"Testing a Formmask Sequence","text":"<p>To test Formmask when testing a song, it must be playing on the file select screen of the game with a ROM randomized by the Majora's Mask Randomizer. To cycle through non-cumulative states, use D-Pad Up and D-Pad Down, and to cycle through cumulative states use D-Pad Left and D-Pad Right.</p> <p>Info needs confirmation</p> <p>For non-cumulative forms and states, the cycle is: Human, then Goron, then Zora, then Deku, then Swim, then Combat, then Epona, then SpikeRolling.</p> <p>For cumulative states, the cycle is: None, then Swim, then Combat, then Epona, then SpikeRolling.</p>","tags":["Advanced"]},{"location":"advanced/mus/","title":"Music Assembly Language","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>Music Assembly Language is not Music Macro Language!</p> <p>Despite <code>.mus</code> files being called \"Music Macro Language\", they are not Music Macro Language (MML)<sup>1</sup>. MML is well-defined and is a sub-language of BASIC. However, modern MML notation is quite different from the original MML's BASIC notation. Music Assembly Language (<code>.mus</code>) files are a sub-language of Assembly (ASM). As such, they should avoid being called \"Music Macro Language\". Instead, <code>.mus</code> files should be called \"Music Assembly Language (MAL)\".</p>"},{"location":"advanced/mus/#placeholder","title":"placeholder","text":"<p>placeholder</p> HeaderChannelHeader MAL Command SEQ Command <code>notedvg</code> Note (D, V, G) <code>notedv</code> Note (D, V) <code>notevg</code> Note (V, G) <code>snoted</code> \u2014 <code>snotedef</code> \u2014 <code>snotelast</code> \u2014 <code>ldelay</code> Layer Delay <code>shortvel</code> Set Short Note Velocity <code>ltp</code> Layer Transpose <code>shortdelay</code> Set Default Short Note Delay <code>legatoon</code> Continuous On <code>legatooff</code> Continuous Off <code>linst</code> Set Instrument (Layer) <code>portamento</code> Enable Portamento <code>portamentooff</code> Disable Portamento <code>shortgate</code> Set Short Note Gatetime <code>lpan</code> Set Pan (Layer) <code>lenvelope</code> Set Envelope (Layer) <code>drumpanoff</code> Ignore Drum Pan <code>reverbphase</code> Set Stereo Effects <code>lbend2</code> Set Pitch Bend (\u00b12 Semitones, Layer) <code>lrelease</code> Set Release (Layer) <code>shorttablevel</code> Set Short Note Velocity from Table <code>shorttablegate</code> Set Short Note Gatetime from Table MAL Command SEQ Command <code>cdelay</code> Channel Delay <code>loadspl</code> Load Sample <code>startchan</code> Start Channel <code>stcio</code> IO Write Value 2 <code>ldcio</code> IO Read Value 2 <code>subio</code> [v] -= IO[c] <code>ldio</code> [v] = IO[c] <code>stio</code> IO[c] = [v] <code>rstartlayer</code> Start Layer (Relative) <code>testlayer</code> Test Layer is Finished <code>startlayer</code> Start Layer (Absolute) <code>stoplayer</code> Stop Layer <code>dynstartlayer</code> Dyn Start Layer <code>setfilter</code> Set Filter <code>cleafilter</code> Clear Filter <code>copyfilter</code> Load Filter <code>p2dyntable</code> Set Dyntable Large <code>dyntable2p</code> Read Dyntable Large <code>lddyn</code> Read Dyntable <code>randp</code> Random Large <code>rand</code> [v] = Random Value <code>velrand</code> Set Velocity (Random Variance) <code>gaterand</code> Set Gatetime (Random Variance) <code>chorus</code> Set Chorus <code>addp</code> [p] += cmdArg[0] <code>randaddp</code> \u2014 <code>instr</code> Set Instrument (Channel) <code>dyntable</code> Set Dyntable <code>shorton</code> Large Notes Off <code>shortoff</code> Large Notes On <code>dynsetdyntable</code> Dyn Set Dyntable <code>bank</code> Set Soundfont <code>sts</code> seqData[addr] = [v] + Immediate <code>sub</code> [v] -= Set Value <code>and</code> [v] &amp;= Set Value <code>mutebhv</code> Set Mute Behavior <code>lds</code> [v] = seqData([addr] + [v]) <code>ldi</code> [v] = Set Value <code>stopchan</code> Disable Channel <code>ldpi</code> unk_22 <code>stps</code> Store Pointer <code>stereoheadseteffects</code> Set Stereo Headset Effect <code>noteallocpolicy</code> Set Note Allocation Policy <code>relsustain</code> Set Sustain <code>pitchbend</code> Set Pitch Bend (\u00b112 Semitones) <code>reverb</code> Set Reverb <code>vibfreq</code> Set Vibrato Rate <code>vibdepth</code> Set Vibrato Depth <code>release</code> Set Release <code>cenvelope</code> Set Envelope <code>ctp</code> Set Transposition (Channel) <code>panmix</code> Set Pan Mix <code>cpan</code> Set Pan (Channel) <code>freqscale</code> Set Freqscale <code>cvol</code> Set Volume (Channel) <code>cexp</code> Set Expression (Channel) <code>vibfreqenv</code> Set Vibrato Rate (Linear) <code>vibdepthenv</code> Set Vibrato Depth (Linear) <code>vibdelay</code> Set Vibrato Delay <code>dyncall</code> Dyncall <code>reverbidx</code> Set Reverb Index <code>splvari</code> Set Codebook Offset <code>ldcparams</code> Load Channel Parameters <code>cparams</code> Set Channel Parameters <code>notepriority</code> Set Note Priortity <code>halt</code> Stop Script <code>bankinstr</code> Set Soundfont &amp; Instrument <code>chanreset</code> Reset Channel <code>filgain</code> Set HiLo Gain <code>cbend2</code> Set Pitch Bend (\u00b12 Semitones, Channel) MAL Command SEQ Command <code>testchan</code> \u2014 <code>stopchan</code> Stop Channel <code>subio</code> [v] -= IO[c] <code>loadbank</code> Async Load <code>stio</code> IO[c] = [v] <code>ldio</code> [v] = IO[c] <code>startchan</code> Start Channel <code>rstartchan</code> Start Channel (Relative) <code>loadseq</code> Load Sequence <code>unk_C4</code> Call Sequence (?) <code>unk_C5</code> Unk_16 = Address (?) <code>unk_C6</code> Stop Script (?) <code>sub</code> [v] -= Set Value <code>and</code> [v] &amp;= Set Value <code>ldi</code> [v] = Set Value <code>tblcall</code> Dyncall <code>rand</code> [v] = Random Value <code>noteallocpolicy</code> Set Note Allocation Policy <code>ldshorttablegate</code> Set Short Note Gatetime Table <code>ldshorttablevel</code> Set Short Note Velocity Table <code>mutebhv</code> Set Mute Behavior <code>mute</code> Mute Sequence <code>mutescale</code> Set Mute Scale <code>disablechan</code> Disable Channels <code>initchan</code> Initialize Channels <code>sexp</code> Set Expression (Sequence) <code>sfade</code> Change Volume (Fade) <code>svol</code> Set Volume (SysEx Master Volume) <code>tempovar</code> Add Tempo <code>tempo</code> Set Tempo <code>stprel</code> Set Transposition (Relative, Sequence) <code>stp</code> Set Transposition (Sequence) <code>print</code> Print [3] Bytes <code>unreservenotes</code> Unreserve Notes <code>rbltz</code> Jump Relative if [v] &lt; 0 <code>rbeqz</code> Jump Relative if [v] = 0 <code>rjump</code> Jump Relative <code>bgez</code> Jump Absolute if [v] &gt;= 0 <code>break</code> Loop Break <code>loopend</code> Loop End <code>loop</code> Loop Start <code>bltz</code> Jump Absolute if [v] &lt; 0 <code>beqz</code> Jump Absolute if [v] = 0 <code>jump</code> Jump Absolute <code>call</code> Call Absolute <code>delay</code> Delay [n] Frames <code>yield</code> Delay 1 Frame <code>end</code> End of Script HeaderChannelLayerCalls <pre><code>;**********\n;* HEADER *\n;**********\n\n_start\n  mutebhv      32\n  mutescale    50\n  initchan     $0001\nstart:\n  startchan    0, start_chn0\n  tempo        120\n  svol         127\n  delay        672\n  jump         start\n  disablechan  $0001\n  end\n</code></pre> <pre><code>;***********\n;* CHANNEL *\n;***********\n\nstart_chn0:\n  shortoff\n  startlayer    0, start_chn0_ly0\n  bank          0\n  instr         79\n  cvol          127\n  cpan          64\n  cexp          127\n  reverb        40\n  notepriority  3\n  delay         672\n</code></pre> <pre><code>;*********\n;* LAYER *\n:*********\n\nstart_chn0_ly0\n  ltp      0\n  loop     1\n  call     _chn0_ly0_call0\n  loopend\n; COMMUNITY DIALECT: Zelda Note = MIDI Note -21\n;   notedvg note, delay, valocity, gate\n;   notevg note, velocity, gate\n;   notedv note, delay, velocity\n  notedvg  39, 240, 100, 51\n  notevg   39, 100, 511\n  notedv   39, 192, 100\n; NINTENDO (CANON) DIALECT: NOTE = MIDI Note -1 Octave\n;   NOTE:ACCIDENTAL:OCTAVE:B:?:W  , delay, velocity, gate\n;   NOTE:ACCIDENTAL:OCTAVE:B:?    , velocity, gate\n;   NOTE:ACCIDENTAL:OCTAVE:B:?:W  , delay , velocity\n; CN4B0W   , 240, 127, 51\n; CN4B1    , 100, 51\n; CN4B1W   , 192, 100\n  end\n</code></pre> <pre><code>;*********\n;* CALLS *\n;*********\n\n_chn0_ly0_call0:\n  break\n  end\n</code></pre> <ol> <li> <p>For more information on Music Macro Language, please visit the Wikipedia article on it, or this guide to Music Macro Language by pedipanol.\u00a0\u21a9</p> </li> </ol>"},{"location":"advanced/tuning/","title":"Sample Tuning","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page details how sample tuning works in great detail for instruments, drums, and sound effects in Ocarina of Time and Majora's Mask so that sample files will be properly tuned.</p>"},{"location":"advanced/tuning/#types-of-tuning","title":"Types of Tuning","text":"<p>In Ocarina of Time and Majora's Mask there are two different types of tuning: channel-based tuning and key-based tuning. All instruments use channel-based tuning, with all drums and sound effects using key-based tuning. The differences between these two types of tuning are explained in greater detail below.</p>"},{"location":"advanced/tuning/#channel-based-tuning","title":"Channel-Based Tuning","text":"<p>Attention</p> <p>Only instruments use channel-based tuning</p> <p>Channel-based tuning or range-based tuning, also known to some as \"relative\" tuning, tunes a sample relative to the tuning float value of MIDI note 60 (C5), or \"Middle C\", at 32000 Hz. Because of this, the lower the tuning float value, then the higher the note speed is, and by extension, the higher the sample's perceived pitch will be. The higher the tuning float value, then the lower the note speed will be, and by extension, the lower the sample's perceived pitch will be.</p> <p>To find a sample's root key with the correct note speed use the following calculation:</p> <p> \\(1 \\div Float = Note\\hspace{1 mm}Speed\\)</p> <p>As an example, if a sample has a root key of 72 (C6) at a sample rate of 32000 Hz, and it needs to play MIDI note 60 (C5), then the note needs to achieve a note speed of 2 for the sample to be tuned to the correct pitch. To do this, divide 1 by 0.5, with 0.5 being the tuning float value for 72 (C6).</p> <p>Info</p> <p>For channel-based tuning, note speed is automatically calculated. Every instrument that uses channel-based tuning has one sample assigned to a specific note range on the virtual MIDI keyboard. The tuning float determines the sample root key's note speed relative to MIDI note 60 (C5), or \"Middle C\", for the entire virtual MIDI keyboard.</p>"},{"location":"advanced/tuning/#key-based-tuning","title":"Key-Based Tuning","text":"<p>Attention</p> <p>Only drums and sound effects use key-based tuning</p> <p>Key-based tuning, also known to some as \"absolute\" tuning, tunes a sample as if the sample's root key is MIDI note 60 (C5), or \"Middle C\", at 32000 Hz. Because of this, the lower the tuning float value, then the lower the note speed is, and by extension, the lower the sample's perceived pitch will be. The higher the tuning float value, then the higher the note speed is, and by extension, the higher the sample's perceived pitch will be.</p> <p>To find a sample's root key with the correct note speed use the following calculation:</p> <p> \\(1 \\times Float = Note\\hspace{1 mm}Speed\\)</p> <p>As an example, if a sample has a root key of 72 (C6) at a sample rate of 32000 Hz, and it needs to play MIDI note 60 (C5), then the note needs to achieve a note speed of 0.5 for the sample to be tuned to the correct pitch. To do this, multiply 1 by 0.5, with 0.5 being the tuning float value used because with key-based tuning the note speed is equal to the tuning float value.</p> <p>Info</p> <p>For key-based tuning, note speed is manually calculated per key. Every instrument that uses key-based tuning has one sample assigned to a specific key on the virtual MIDI keyboard. The tuning float value determines the sample root key's exact note speed for that specific key on the virtual MIDI keyboard.</p>"},{"location":"advanced/tuning/#tuning-calculation","title":"Tuning Calculation","text":"<p>\\((Root\\hspace{1 mm}Key-Coarse\\hspace{1 mm}Tune)-(\\frac{Fine\\hspace{1 mm}Tune}{100})=-24\\log_4(Float)+60\\)</p> <p>\\(x=(Root\\hspace{1 mm}Key-Coarse\\hspace{1 mm}Tune)-(\\frac{Fine\\hspace{1 mm}Tune}{100})\\)</p> <p>\\(y=x-60\\)</p> <p>\\(z=y\\div-24\\)</p> <p>\\(Float=4^z\\)</p> <p>\\(Float=2^\\frac{60-(Root\\hspace{1 mm}Key-Coarse\\hspace{1 mm}Tune)-(\\frac{Fine\\hspace{1 mm}Tune}{100})}{12}\\)</p> <p>\\(1\\div Float = Note\\hspace{1 mm}Speed\\)</p> <p>\\(1\\times Float = Note\\hspace{1 mm}Speed\\)</p> <p>\\(\\frac{1}{12}\\)</p> <p>\\(\\frac{1}{100}\\)</p> <p>\\(\\frac{44100}{48000}=\\frac{441}{480}=\\frac{147}{160}\\)</p> <p>\\(\\frac{L}{M}\\)</p> <p>\\(f(x)=Float\\times\\frac{32000}{x}\\)</p> <p>\\(f(x)=Float\\div\\frac{32000}{x}\\)</p>"},{"location":"advanced/tuning/#sample-rate-correction","title":"Sample Rate Correction","text":"<p>All games on the Nintendo 64 have what is known as a hardware playback rate or master sample rate. The hardware playback rate determines the samples per second produced by the synthesizer. Ocarina of Time and Majora's Mask have a hardware playback rate of 32000 Hz. This means that all samples in-game will be played back by the audio engine as if they have a sample rate of 32000 Hz. This will affect the tuning of samples that have a sample rate that differs from the hardware playback rate.</p> <p>Shown in the images below is a visual representation of how a sample's speed will change based on its sample rate compared to the hardware playback rate. All the samples are assumed to be the exact same sound at the exact same pitch, but all have sample rates.</p> Sample at 16000 HzSample at 32000 HzSample at 64000 Hz <p> </p> <p>Outline</p> <p>A sample with a sample rate of 16000 Hz, half the hardware playback rate, tuned to its root key without any sample rate correction will end up playing twice the speed it should in-game. This will cause the perceived pitch of the sample to be too high when played back in-game.</p> <p> </p> <p>Outline</p> <p>A sample with a sample rate of 32000 Hz, matching the hardware playback rate, tuned to its root key without any sample rate correction will end up playing exactly how fast it should. This will cause the perceived pitch of the sample to be unaltered when played back in-game.</p> <p> </p> <p>Outline</p> <p>A sample with a sample rate of 64000 Hz, twice the hardware playback rate, tuned to its root key without any sample rate correction will end up playing half the speed it should in-game. This will cause the perceived pitch of the sample to be too low when played back in-game.</p> <p>The reason for a sample with a sample rate of 64000 Hz playing half the speed it should in-game is because it has twice the number of samples as the hardware playback rate. For a sample with a sample rate of 16000 Hz, it has the opposite effect, because the sample has half the number of samples as the hardware playback rate. With sample rate correction, the sample's note speed will increase or decrease based on its sample rate. This will allow the sample to match the hardware playback rate without the need to resample it.</p>"},{"location":"advanced/adsr/abenvelope/","title":"Audiobank Envelopes","text":"<ul> <li> <p> \u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"advanced/adsr/envelopes/","title":"Custom Envelopes","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"advanced/adsr/envelopes/#custom-envelopes_1","title":"Custom Envelopes","text":"C \u00a0XML <pre><code>EnvelopePoint gDefaultEnvelope[] = {\n    { 1, 32000 },\n    { 1000, 32000 },\n    { ADSR_HANG, 0 },\n    { ADSR_DISABLE, 0 },\n};\n</code></pre> <pre><code>&lt;item name=\"gDefaultEnvelope\"&gt;\n  &lt;struct name=\"ABEnvelope\"&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"1\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"32000\"/&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"1000\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"32000\"/&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"-1\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"0\"/&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"0\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"0\"/&gt;\n  &lt;/struct&gt;\n&lt;/item&gt;\n</code></pre> <p>Below is a graphical representation of the envelope of the \"Piano\" instrument. The ADSR values for Ocarina of Time and Majora's Mask are linear values with the time being in microseconds. A value of <code>1</code> for envelope data is equal to ~4000 \u00b5s (0.004 s).</p> <p>In the example below, we will assume the sample's waveform is 2 s in total length, so over 8000 \u00b5s (0.008 s) the sample goes from zero amplitude to ~99% amplitude, then once it reaches ~99% amplitude it returns to zero amplitude over the course of 960000 \u00b5s (0.96 s) and remains at zero amplitude for 4000 \u00b5s (0.004 s) and then it will remain at zero amplitude indefinitely due to the value of <code>-1</code> being the special command <code>ADSR_HANG</code>.</p> <pre><code>#define ADSR_DISABLE 0\n#define ADSR_HANG -1\n#define ADSR_GOTO -2\n#define ADSR_RESTART -3\n</code></pre>  \u00a0ADSR_DISABLE \u00a0ADSR_HANG \u00a0ADSR_GOTO \u00a0ADSR_RESTART <pre><code>case ADSR_STATUS_DISBLED:\n    return 0.0f;\n</code></pre> <pre><code>case ADSR_HANG:\n    break;\n</code></pre> <pre><code>case ADSR_GOTO:\n    adsr-&gt;envelopeIndex = adsr-&gt;envelope[adsr-&gt;envelopeIndex].arg;\n    goto retry;\n</code></pre> <pre><code>case ADSR_RESTART:\n    adsr-&gt;action.s.status = ADSR_STATUS_INITIAL;\n    break;\n</code></pre>  \u00a0C \u00a0XML <pre><code>EnvelopePoint pianoEnv[4] = {\n  { 2, 32700 },\n  { 229, 0 },\n  { 1, 0 },\n  { -1, 0 },\n};\n</code></pre> <pre><code>&lt;item name=\"Piano Envelope\"&gt;\n  &lt;struct name=\"ABEnvelope\"&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"2\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"32000\"/&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"229\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"0\"/&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"1\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"0\"/&gt;\n    &lt;field name=\"Delay\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"-1\"/&gt;\n    &lt;field name=\"Argument\" datatype=\"int16\" ispointer=\"0\"\n           isarray=\"0\" meaning=\"none\" value=\"0\"/&gt;\n  &lt;/struct&gt;\n&lt;/item&gt;\n</code></pre> <p> </p> AttackDecaySustainReleaseHold <p> </p> <p>Outline</p> <p>Attack refers to the time it takes from when a key is first pressed for the sound of a sample to go from zero amplitude to the max attack amplitude. The longer the attack is, the longer it will take for the sound to fade in to the max attack amplitude from zero amplitude.</p> <p> </p> <p>Outline</p> <p>Decay refers to the time it takes the sound of a sample to go from the max attack amplitude to the sustain amplitude. The longer the decay is, the longer it will take for the sound to decrease in amplitude from the max attack amplitude to the sustain amplitude.</p> <p> </p> <p>Outline</p> <p>Sustain refers to the amplitude level the sound of a sample will remain at so long as the note is being held. The higher the sustain is, the less decrease in amplitude a sample will have from the max attack amplitude.</p> <p> </p> <p>Outline</p> <p>Release refers to the time it takes from when a key is released to the sound of a sample going from sustain amplitude to return to zero amplitude. The longer the release is the longer it will take for the sound to fade out from the sustained amplitude to zero amplitude.</p> <p> </p> <p>Outline</p> <p>Hold refers to the time a note will be held at max attack amplitude before beginning to decay to the sustain amplitude. The longer the hold is, the longer the sound will remain at max attack amplitude before beginning to decay to the sustained amplitude.</p> <p>Ocarina of Time and Majora's Mask use a multipoint envelope structure. However, instruments and drums are limited to four pairs of two data points inside an audiobank (sound effects cannot use envelopes inside an audiobank). Each pair of data points has a time value (or \"delay\") and an amplitude value (or \"arg\"). The first pair of data points is always attack. The second pair of data points can represent hold time or decay time and sustain amplitude. The third pair of data points can represent decay time and sustain amplitude. The fourth pair of data points determines if the envelope will restart, loop, or end.</p> <p>The number of data points possible when using a sequence embedded envelope can theoretically be higher. Looking through the ADSR code from the decompilation projects of Ocarina of Time and Majora's Mask suggests that sequence embedded envelopes can have as many data points as wanted \u2014 as long as the sequence can fit in either game's audio buffer.</p> <p>sequence embedded envelopes are 2 byte aligned (each envelope index is only 2 bytes long s16, and the envelope effect does not check for a max length, it goes until it reaches the end state), which means the envelope can be at any address divisible by 2 (0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, and so on can all be start addresses for the envelope). if the envelope is not aligned then the game will do one of two things: 1) crash, or 2) the envelope will be ignored(need to reconfirm?)</p>"},{"location":"advanced/adsr/seqenvelope/","title":"Sequence Embedded Envelopes","text":"<ul> <li> <p> \u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"advanced/audiobanks/building-audiobanks/","title":"Building a Custom Audiobank","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page details building an audiobank completely from scratch in C, XML, and as a Binary file.</p>"},{"location":"advanced/audiobanks/building-audiobanks/#data-ordering","title":"Data Ordering","text":"<p>For C and Binary, items do not need to be in any particular order except for the header data; so long as all the addresses match the order of data should not matter(?). For XML, the order is very strict due to SEQ6 hardcoding the data format; addresses can be left as zeroed values, SEQ64 will automatically assign addresses when overwriting an audiobank, however, indexes must be correct.</p> Important XML Info <p>For XML audiobanks, all structures must be contained within a bank that contains some metadata information tag: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Above is the XML declaration, do not remove it --&gt;\n\n&lt;bank NUM_INST=\"0\" NUM_DRUM=\"0\" NUM_SFX=\"0\" ATnum=\"0\"&gt;\n  &lt;!-- All the audiobank information is contained within the tags--&gt;\n&lt;/bank&gt;\n</code></pre></p> <p>Audiobanks must also be structured in a very specific way, otherwise SEQ64 will not be able to read the audiobank and will throw errors: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;bank NUM_INST=\"0\" NUM_DRUM=\"0\" NUM_SFX=\"0\" ATnum=\"0\"&gt;\n  &lt;!-- Audiobank Index Entry --&gt;\n  &lt;abindexentry&gt;\n    &lt;!-- Insert structure here --&gt;\n  &lt;/abindexentry&gt;\n  &lt;!-- Audiobank Header --&gt;\n  &lt;abheader&gt;\n    &lt;!-- Insert structure here --&gt;\n  &lt;/abheader&gt;\n  &lt;!-- ABBank --&gt;\n  &lt;abbank&gt;\n    &lt;!-- Insert structure here --&gt;\n  &lt;/abbank&gt;\n  &lt;!-- Audiobank Drum List --&gt;\n  &lt;abdrumlist&gt;\n    &lt;!-- Insert drum list here --&gt;\n  &lt;/abdrumlist&gt;\n  &lt;!-- Audiobank SFX List --&gt;\n  &lt;absfxlist&gt;\n    &lt;!-- Insert sfx list here --&gt;\n  &lt;/absfxlist&gt;\n  &lt;!-- Audiobank Instruments --&gt;\n  &lt;instruments&gt;\n    &lt;!-- Insert item(s) here --&gt;\n  &lt;/instruments&gt;\n  &lt;!-- Audiobank Drums --&gt;\n  &lt;drums&gt;\n    &lt;!-- Insert item(s) here --&gt;\n  &lt;/drums&gt;\n  &lt;!-- For OOT and MM leave this as-is --&gt;\n  &lt;sfx/&gt;\n  &lt;!-- Audiobank Envelope --&gt;\n  &lt;envelopes&gt;\n    &lt;!-- Insert item(s) here --&gt;\n  &lt;/envelopes&gt;\n  &lt;!-- Audiobank Samples --&gt;\n  &lt;samples&gt;\n    &lt;!-- Insert item(s) here --&gt;\n  &lt;/samples&gt;\n  &lt;!-- Audiobank Codebooks --&gt;\n  &lt;aladpcmbooks&gt;\n    &lt;!-- Insert item(s) here --&gt;\n  &lt;/aladpcmbooks&gt;\n  &lt;!-- Audiobank Loopbooks --&gt;\n  &lt;aladpcmloops&gt;\n    &lt;!-- Insert item(s) here --&gt;\n  &lt;/aladpcmloops&gt;\n&lt;/bank&gt;\n</code></pre></p> <p>Warning</p> <p>Audiobanks as they are used in-game are slightly different than the structure of <code>soundfont.h</code> used by decomp. Tools may also use different naming and formatting and allow for more or less flexibility, this page must be edited again to accomodate for any new <code>C</code> based tools that may and will eventually arise from decomp.</p> <p> C Code Warning</p> <p><code>C</code> code for audiobanks may need to be confirmed and edited depending on the tools being worked with.</p>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-metadata","title":"Audiobank Metadata","text":"C \u00a0XML \u00a0Binary <pre><code>AudiobankIndexEntry Metadata = {\n  addr = 0,\n  len = 0,\n  sample_medium = 0,\n  seq_player = 2,\n  table_num = 0,\n  soundfont_id = 255,\n  num_inst = 0,\n  num_drum = 0,\n  num_sfx = 0,\n};\n</code></pre> <pre><code>&lt;!-- Audiobank Index Entry --&gt;\n&lt;abindexentry&gt;\n  &lt;!-- ABIndexEntry Struct --&gt;\n  &lt;struct name=\"ABIndexEntry\"&gt;\n    &lt;!-- Audiobank Address in the Audiobank Index --&gt;\n    &lt;field name=\"addr\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr Bank (in Audiobank)\"\n           ptrto=\"ABHeader\" value=\"0\"/&gt;\n    &lt;!-- Size of the Audiobank in Bytes --&gt;\n    &lt;field name=\"len\" datatype=\"uint32\" ispointer=\"0\" isarray=\"0\" meaning=\"Bank Length\"\n           value=\"0\"/&gt;\n    &lt;!-- Sample Mediums: 0 = RAM, 1 = UNK, 2 = ROM, 3 = Disk Drive, 5 = RAM (Unloaded) --&gt;\n    &lt;field name=\"sample_medium\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"none\"\n           defaultval=\"2\" value=\"2\"/&gt;\n    &lt;!-- Sequence Players: 0 = SFX, 1 = Fanfares, 2 = BGM, 3 = Cutscene SFX --&gt;\n    &lt;field name=\"seq_player\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"none\"\n           defaultval=\"2\" value=\"2\"/&gt;\n    &lt;!-- Audio Tables: 0 = @000000, 1 = @000000, 2 = @538CC0 --&gt;\n    &lt;field name=\"table_num\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"Sample Table number\"\n           value=\"1\"/&gt;\n    &lt;!-- All vanilla audiobanks have 0xFF as their fontId --&gt;\n    &lt;field name=\"soundfont_id\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"None\"\n           defaultval=\"255\" value=\"255\"/&gt;\n    &lt;!-- Defines amount of instruments inside the Audiobank --&gt;\n    &lt;field name=\"NUM_INST\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"NUM_INST\"\n           value=\"1\"/&gt;\n    &lt;!-- Defines amount of drums inside the Audiobank --&gt;\n    &lt;field name=\"NUM_DRUM\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"NUM_DRUM\"\n           value=\"0\"/&gt;\n    &lt;!-- Defines amount of sound effects inside the Audiobank --&gt;\n    &lt;field name=\"NUM_SFX\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\" meaning=\"NUM_SFX\"\n           value=\"0\"/&gt;\n  &lt;/struct&gt;\n&lt;/abindexentry&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n00 00 00 00 | tt uu vv ww xx yy zz zz\n</code></pre> <ul> <li><code>tt</code> = Sample medium (<code>sample_medium</code>) for the samples the audiobank uses</li> <li><code>uu</code> = Sequence player (<code>seq_player</code>) the audiobank uses</li> <li><code>vv</code> = Audiotable (<code>table_num</code>) the audiobank is in</li> <li><code>ww</code> = \"Soundfont ID\" (<code>soundfont_id</code>) of the audiobank</li> <li><code>xx</code> = Number of instrument (<code>NUM_INST</code>) in the audiobank</li> <li><code>yy</code> = Number of drums (<code>NUM_DRUM</code>) in the audiobank</li> <li><code>zz zz</code> = Number of sound effects (<code>NUM_SFX</code>) in the audiobank</li> </ul>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-header","title":"Audiobank Header","text":"C \u00a0XML \u00a0Binary <pre><code>#include \"custom_audiobank.h\" // include extern\n\n/* Address: 0x00 */\nAudiobank CustomBank = {\n  drums = DrumList,    // Pointer to Drum List\n  sfx = NULL,          // Pointer to SFX List\n  instruments = {      // Instrument List is built into the header\n    &amp;InstName,         // Pointer to inst\n    NULL,              // Insert \"NULL\" when there is no inst\n  }\n};\n</code></pre> <pre><code>&lt;!-- ABHeader --&gt;\n&lt;abheader&gt;\n  &lt;!-- ABHeader Struct --&gt;\n  &lt;struct name=\"ABheader\"&gt;\n&lt;/abheader&gt;\n&lt;!--ABBank --&gt;\n&lt;abbank&gt;\n  &lt;!--ABBank Struct --&gt;\n  &lt;struct name=\"ABBank\"&gt;\n    &lt;!-- Pointer to ABDrumlist--&gt;\n    &lt;field name=\"drum_ptr\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr Drum List\"\n           ptrto=\"ABDrumList\" value=\"0\"/&gt;\n    &lt;!-- Pointer to ABSFXList --&gt;\n    &lt;field name=\"sfx_ptr\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr SFX List\"\n           ptrto=\"ABSFXList\" value=\"0\"/&gt;\n    &lt;!-- Audiobank Instrument List --&gt;\n    &lt;field name=\"inst_list\" datatype=\"uint32\" ispointer=\"1\" isarray=\"1\" meaning=\"List of Ptrs to Insts\"\n           ptrto=\"ABInstrument\" arraylenvar=\"NUM_INST\"&gt;\n      &lt;!-- Instrument Pointer --&gt;\n      &lt;element datatype=\"uint32\" ispointer=\"1\" ptrto=\"ABInstrument\" value=\"0\"\n              index=\"0\"/&gt;\n      &lt;!-- Add more instrument pointers here --&gt;\n    &lt;/field&gt;\n  &lt;/struct&gt;\n&lt;/abbank&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n00 00 00 00 | xx xx xx xx yy yy yy yy zz zz zz zz -- -- -- --\n</code></pre> <ul> <li><code>xx xx xx xx</code> = Drum List pointer address</li> <li><code>yy yy yy yy</code> = SFX List pointer address</li> <li><code>zz zz zz zz</code> = Instrument address pointer (<code>uint32</code>), there are as many address pointers as there are instruments defined by <code>NUM_INST</code></li> <li><code>--</code> = Padding to byte 16 for alignment</li> </ul> <p>Instrument List</p> <p>The \"Instrument List\" is built directly into the audiobank header, so instrument address pointers begin immediately after the SFX List.</p> <p>NULL Address Pointer</p> <p>Addresses that have no information pointed to will be zeroed out, in this case it is important to pay attention to <code>NUM_INST</code>, <code>NUM_DRUM</code>, and <code>NUM_SFX</code> as they define how many addresses there will be in each pointer list; this is important to know because padding is also represented by zero values.</p>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-drum-list","title":"Audiobank Drum List","text":"C \u00a0XML \u00a0Binary <pre><code>/* Address: 0x00 */\nDrum* DrumList[64] __attribute__((aligned(16))) = {\n  &amp;DrumName, // Pointer to Drum\n  NULL,      // Insert \"NULL\" when there is no drum\n};\n</code></pre> <pre><code>&lt;!--Audiobank Drum List --&gt;\n&lt;abdrumlist address=\"80\"&gt;\n  &lt;!--ABDrumList Struct --&gt;\n  &lt;struct name=\"ABDrumList\"&gt;\n    &lt;field name=\"drum_list\" datatype=\"uint32\" ispointer=\"1\" isarray=\"1\" meaning=\"List of Ptrs to Drums\"\n           ptrto=\"ABDrum\" arraylenvar=\"NUM_DRUM\"&gt;\n      &lt;!-- INDEX 00 (MIDI Drum Note 21:A1) --&gt;\n      &lt;element datatype=\"uint32\" ispointer=\"1\" ptrto=\"ABDrum\" value=\"00\" index=\"0\"/&gt;\n      &lt;!-- INDEX 01 (MIDI Drum Note 22:A#1) --&gt;\n      &lt;element datatype=\"uint32\" ispointer=\"1\" ptrto=\"ABDrum\" value=\"0\" index=\"-1\"/&gt;\n      &lt;!-- Add more drum pointer elements here --&gt;\n    &lt;/field&gt;\n  &lt;/struct&gt;\n&lt;/abdrumlist&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | xx xx xx xx -- -- -- -- -- -- -- -- -- -- -- --\n</code></pre> <ul> <li><code>xx xx xx xx</code> = Drum address pointer, there are as many address pointers as there are drums defined by <code>NUM_DRUM</code></li> <li><code>--</code> = Padding to byte 16 for alignment</li> </ul> <p>NULL Address Pointer</p> <p>Addresses that have no information pointed to will be zeroed out, in this case it is important to pay attention to <code>NUM_INST</code>, <code>NUM_DRUM</code>, and <code>NUM_SFX</code> as they define how many addresses there will be in each pointer list; this is important to know because padding is also represented by zero values.</p>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-instruments","title":"Audiobank Instruments","text":"C \u00a0XML \u00a0Binary <pre><code>/* Address: 0x10 */\nInstrument InstName = {\n  reloc_offset = 0,        // Offset to pointers\n  key_min = 0,             // Max key for low sample and min key for mid sample\n  key_max = 127,           // Max key for mid sample and min key for high sample\n  rel_rate = 0,            // Determines amount of decay when note is released\n  lowNotesSound = {\n    sample = &amp;SoundSample, // Pointer to sample\n    tuning = 2.0f,         // Tuning float value\n  },\n  midNotesSound = {\n    sample = &amp;SoundSample, // Pointer to sample\n    tuning = 1.0f,         // Tuning float value\n  },\n  highNotesSound = {\n    sample = &amp;SoundSample, // Pointer to sample\n    tuning = 0.5f,         // Tuning float value\n  },\n};\n</code></pre> <pre><code>&lt;!-- Audiobank Instruments --&gt;\n&lt;instruments&gt;\n  &lt;!-- Instrument Item --&gt;\n  &lt;item address=\"0\" name=\"Instrument Name\" map=\"program\" program=\"0\"&gt;\n    &lt;!-- ABInstrument Struct --&gt;\n    &lt;struct name=\"ABInstrument\"&gt;\n      &lt;!-- Relocation Offset --&gt;\n      &lt;field name=\"reloc_offset\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"None\"\n            value=\"0\"/&gt;\n      &lt;!-- Low Sample max key, Mid Sample min key --&gt;\n      &lt;field name=\"Low-Mid Split\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\"\n            meaning=\"Split Point 1\" value=\"0\"/&gt;\n      &lt;!-- Mid Sample max key, High Sample min key --&gt;\n      &lt;field name=\"Mid-High Split\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\"\n            meaning=\"Split Point 2\" value=\"127\"/&gt;\n      &lt;!-- Release Rate --&gt;\n      &lt;field name=\"Release Rate\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\"\n            meaning=\"Release Rate\" value=\"255\"/&gt;\n      &lt;!-- Envelope Pointer --&gt;\n      &lt;field name=\"Envelope Pointer\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr Envelope\"\n             ptrto=\"ABEnvelope\" value=\"0\" index=\"0\"/&gt;\n      &lt;!-- Sample Pointer Array --&gt;\n      &lt;field name=\"Sample Pointer Array\" datatype=\"ABSound\" ispointer=\"0\" isarray=\"1\" meaning=\"List of 3 Sounds for Splits\"\n            arraylenfixed=\"3\"&gt;\n        &lt;element datatype=\"ABSound\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ABSound\"&gt;\n            &lt;!-- Low Sample Pointer --&gt;\n            &lt;field name=\"Sample Pointer (Low)\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr Sample\"\n                  ptrto=\"ABSample\" value=\"0\" index=\"-1\"/&gt;\n            &lt;!-- Low Sample Tuning Float Value --&gt;\n            &lt;field name=\"Tuning\" datatype=\"float32\" ispointer=\"0\" isarray=\"0\" meaning=\"Tuning Float\"\n                  value=\"0\"/&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n        &lt;element datatype=\"ABSound\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ABSound\"&gt;\n            &lt;!-- Mid Sample Pointer --&gt;\n            &lt;field name=\"Sample Pointer (Mid)\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr Sample\"\n                  ptrto=\"ABSample\" value=\"0\" index=\"0\"/&gt;\n            &lt;!-- Mid Sample Tuning Float Value--&gt;\n            &lt;field name=\"Tuning\" datatype=\"float32\" ispointer=\"0\" isarray=\"0\" meaning=\"Tuning Float\"\n                  value=\"1\"/&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n        &lt;element datatype=\"ABSound\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ABSound\"&gt;\n            &lt;!-- High Sample Pointer --&gt;\n            &lt;field name=\"Sample Pointer (High)\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr Sample\"\n                  ptrto=\"ABSample\" value=\"0\" index=\"-1\"/&gt;\n            &lt;!-- High Sample Tuning Float Value --&gt;\n            &lt;field name=\"Tuning\" datatype=\"float32\" ispointer=\"0\" isarray=\"0\" meaning=\"Tuning Float\"\n                  value=\"0\"/&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n      &lt;/field&gt;\n    &lt;/struct&gt;\n  &lt;/item&gt;\n  &lt;!-- Insert more instrument items here --&gt;\n&lt;/instruments&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | pp qq rr ss tt tt tt tt uu uu uu uu vv vv vv vv\n## ## ## ## | ww ww ww ww xx xx xx xx yy yy yy yy zz zz zz zz\n</code></pre> <ul> <li><code>pp</code> = Relocation offset</li> <li><code>qq</code> = Low sample max key and mid sample min key</li> <li><code>rr</code> = Mid sample max key and high sample min key</li> <li><code>ss</code> = Release rate</li> <li><code>tt tt tt tt</code> = Envelope pointer address</li> <li><code>uu uu uu uu</code> = Low sample pointer address</li> <li><code>vv vv vv vv</code> = Low sample tuning float value</li> <li><code>ww ww ww ww</code> = Mid sample pointer address</li> <li><code>xx xx xx xx</code> = Mid sample tuning float value</li> <li><code>yy yy yy yy</code> = High sample pointer address</li> <li><code>zz zz zz zz</code> = High sample tuning float value</li> </ul>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-drums","title":"Audiobank Drums","text":"C \u00a0XML \u00a0Binary <pre><code>/* Address: 0x00 */\nDrum DrumName = {\n  rel_rate = 0,             // Determines amount of decay when note is released\n  pan = 0,                  // Used when 0xDC is 0\n  reloc_offset = 0,         // Offset to pointers\n  envelope = EnvelopeName,  // Pointer to Envelope\n  sound = {\n    sample = &amp;SoundSample,  // Pointer to sample\n    tuning = 1.0f,          // Tuning float value\n  },\n};\n</code></pre> <pre><code>&lt;!-- Audiobank Drums --&gt;\n&lt;drums&gt;\n&lt;!-- Drum Item --&gt;\n  &lt;item address=\"0\" name=\"Drum Name\"&gt;\n    &lt;!-- ABDrum Struct --&gt;\n    &lt;struct name=\"ABDrum\"&gt;\n      &lt;!-- Release Rate --&gt;\n      &lt;field name=\"Release Rate\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"Release Rate\" value=\"255\"/&gt;\n      &lt;!-- Drum Pan (used when 0xDC is 0)--&gt;\n      &lt;field name=\"Pan\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"Pan\"\n             value=\"0\"/&gt;\n      &lt;field name=\"reloc_offset\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\" meaning=\"None\"\n             defaultval=\"0\" value=\"0\"/&gt;\n      &lt;field name=\"Drum Sound\" datatype=\"ABSound\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"Drum Sound\" value=\"0\"&gt;\n        &lt;struct name=\"ABSound\"&gt;\n          &lt;!-- Drum Sample Pointer --&gt;\n          &lt;field name=\"Sample Pointer\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\"\n                 meaning=\"Ptr Sample\" ptrto=\"ABSample\" value=\"128\" index=\"0\"/&gt;\n          &lt;!-- Sample Tuning Float Value --&gt;\n          &lt;field name=\"Tuning\" datatype=\"float32\" ispointer=\"0\" isarray=\"0\" meaning=\"Tuning Float\"\n                 value=\"1\"/&gt;\n        &lt;/struct&gt;\n      &lt;/field&gt;\n      &lt;!-- Envelope Pointer --&gt;\n      &lt;field name=\"Envelope Pointer\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\"\n             meaning=\"Ptr Envelope\" ptrto=\"ABEnvelope\" value=\"112\" index=\"0\"/&gt;\n    &lt;/struct&gt;\n  &lt;/item&gt;\n  &lt;!-- Add more drum items here --&gt;\n&lt;/drums&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | uu vv ww ww xx xx xx xx yy yy yy yy zz zz zz zz\n</code></pre> <ul> <li><code>uu</code> = Release Rate</li> <li><code>vv</code> = Drum pan</li> <li><code>ww ww</code> = Relocation Offset</li> <li><code>xx xx xx xx</code> = Sample pointer address</li> <li><code>yy yy yy yy</code> = Sample tuning float value</li> <li><code>zz zz zz zz</code> = Envelope pointer address</li> </ul>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-envelopes","title":"Audiobank Envelopes","text":"C \u00a0XML \u00a0Binary <pre><code>/* Address: 0x00 */\n// can delay and arg be left out and just have values like gDefaultEnvelope?\nEnvelopePoint EnvelopeName[4] = {\n  { 2, 32700 },     // Attack Phase\n  { 1, 32700 },     // Decay or Hold Phase\n  { 32700, 29430 }, // Decay or Sustain Phase \n  { -1, 0     },    // Sustain Phase\n};\n</code></pre> <p>Warning</p> <p>Envelopes inside of an audiobank can only be four values long!</p> <pre><code>&lt;!-- Audiobank Envelopes --&gt;\n&lt;envelopes&gt;\n  &lt;!-- Envelope Item --&gt;\n  &lt;item address=\"0\" name=\"Envelope Name\"&gt;\n    &lt;!-- ABEnvelope Struct --&gt;\n    &lt;struct name=\"ABEnvelope\"&gt;\n      &lt;!-- Delay Value 1 (Time) --&gt;\n      &lt;field name=\"delay1\" datatype=\"int16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"none\" value=\"2\"/&gt;\n      &lt;!-- Argument Value 1 (Amplitude) --&gt;\n      &lt;field name=\"arg1\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"none\" value=\"32700\"/&gt;\n      &lt;!-- Delay Value 2 (Time) --&gt;\n      &lt;field name=\"delay2\" datatype=\"int16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"none\" value=\"298\"/&gt;\n      &lt;!-- Argument Value 2 (Amplitude) --&gt;\n      &lt;field name=\"arg2\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"none\" value=\"0\"/&gt;\n      &lt;!-- Delay Value 2 (Time) --&gt;\n      &lt;field name=\"delay3\" datatype=\"int16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"none\" value=\"1\"/&gt;\n      &lt;!-- Argument Value 3 (Amplitude) --&gt;\n      &lt;field name=\"arg3\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"none\" value=\"0\"/&gt;\n      &lt;!-- Delay Value 4 (Time) --&gt;\n      &lt;field name=\"delay4\" datatype=\"int16\" ispointer=\"0\" isarray=\"0\" meaning=\"none\"\n             value=\"-1\"/&gt;\n      &lt;!-- Argument Value 4 (Amplitude) --&gt;\n      &lt;field name=\"arg4\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\" meaning=\"none\"\n             value=\"0\"/&gt;\n    &lt;/struct&gt;\n  &lt;/item&gt;\n  &lt;!-- Add more envelope items here --&gt;\n&lt;/envelopes&gt;\n</code></pre> <p>Warning</p> <p>Envelopes inside of an audiobank can only be four values long!</p> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | ss ss tt tt uu uu vv vv ww ww xx xx yy yy zz zz\n</code></pre> <ul> <li><code>ss ss</code> = Envelope delay value 1</li> <li><code>tt tt</code> = Envelope argument value 1</li> <li><code>uu uu</code> = Envelope delay value 2</li> <li><code>vv vv</code> = Envelope argument value 2</li> <li><code>ww ww</code> = Envelope delay value 3</li> <li><code>xx xx</code> = Envelope argument value 3</li> <li><code>yy yy</code> = Envelope delay value 4</li> <li><code>zz zz</code> = Envelope argument value 4</li> </ul> <p>Warning</p> <p>Envelopes inside of an audiobank can only be four values long!</p>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-samples","title":"Audiobank Samples","text":"C \u00a0XML \u00a0Binary <pre><code>/* Address: */\nSample SoundSample = {\n  codec = 0,                  // Does not exist in the binary\n  medium = 0,                 // Does not exist in the binary\n  unk_bit26 = 0,              // if (sample-&gt;unk_bit26 &amp;&amp; (sample-&gt;medium != MEDIUM_RAM))\n  relocOffset = 0,            // Offset to pointers\n  size = 0,                   // Size of the sample in bytes\n  sampleAddr = (u8*)0,        // Address of the sample\n  loopbook = &amp;SampleLoopbook, // Pointer to loopbook\n  codebook = &amp;SampleCodebook, // Pointer to codebook\n};\n</code></pre> <pre><code>&lt;!-- Audiobank Samples --&gt;\n&lt;samples&gt;\n  &lt;!-- Sample Item --&gt;\n  &lt;item address=\"128\" name=\"SAMPLE NAME\"&gt;\n    &lt;!--ABSample Struct --&gt;\n    &lt;struct name=\"ABSample\"&gt;\n      &lt;field name=\"unk_bit26\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"None\"\n             value=\"0\"/&gt;\n      &lt;field name=\"reloc_offset\" datatype=\"uint8\" ispointer=\"0\" isarray=\"0\" meaning=\"None\"\n             value=\"0\"/&gt;\n      &lt;!-- Sample Size in Bytes --&gt;\n      &lt;field name=\"Sample Size (ROM Insert Size)\" datatype=\"uint16\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"Sample Length\" value=\"0\"/&gt;\n      &lt;!-- Sample Address Pointer --&gt;\n      &lt;field name=\"Sample Address\" datatype=\"uint32\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"Sample Address (in Sample Table)\" ptrto=\"ATSample\" value=\"0\"/&gt;\n      &lt;!-- Sample Loopbook Pointer --&gt;\n      &lt;field name=\"Loopbook\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr ALADPCMLoop\"\n             ptrto=\"ALADPCMLoop\" value=\"0\" index=\"0\"/&gt;\n      &lt;!-- Sample Codebook Pointer --&gt;\n      &lt;field name=\"Codebook\" datatype=\"uint32\" ispointer=\"1\" isarray=\"0\" meaning=\"Ptr ALADPCMBook\"\n             ptrto=\"ALADPCMBook\" value=\"0\" index=\"0\"/&gt;\n    &lt;/struct&gt;\n  &lt;/item&gt;\n  &lt;!-- Add more sample items here --&gt;\n&lt;/samples&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | uu vv ww ww xx xx xx xx yy yy yy yy zz zz zz zz\n</code></pre> <ul> <li><code>uu</code> = unk_bit26</li> <li><code>vv</code> = reloc_offset</li> <li><code>ww ww</code> = Sample size in bytes</li> <li><code>xx xx xx xx</code> = Sample address pointer</li> <li><code>yy yy yy yy</code> = Loopbook address pointer</li> <li><code>zz zz zz zz</code> = Cdebook address pointer</li> </ul>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-codebooks","title":"Audiobank Codebooks","text":"C \u00a0XML \u00a0Binary <pre><code>/* Address :*/\nAdpcmBook SampleCodebook = {\n  order = 0,                // I forget what this does...\n  num_predictors = 0,       // Number of predictor arrays\n  codebook = {\n    0, 0, 0, 0, 0, 0, 0, 0, // First predictor array (16 values)\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, // Second predictor array (16 values)\n    0, 0, 0, 0, 0, 0, 0, 0,\n  },\n};\n</code></pre> <pre><code>&lt;!-- Audiobank Codebooks --&gt;\n&lt;aladpcmbooks&gt;\n  &lt;!-- Codebook Item --&gt;\n  &lt;item address=\"0\" name=\"Codebook Name\"&gt;\n    &lt;!-- ALADPCMBook Struct --&gt;\n    &lt;struct name=\"ALADPCMBook\" NUM_PRED=\"4\"&gt;\n      &lt;!-- Codebook Order --&gt;\n      &lt;field name=\"order\" datatype=\"int32\" ispointer=\"0\" isarray=\"0\" meaning=\"None\"\n            value=\"4\"/&gt;\n      &lt;!-- Number of Predictors --&gt;\n      &lt;field name=\"num_predictors\" datatype=\"int32\" ispointer=\"0\" isarray=\"0\"\n            meaning=\"NUM_PRED\" value=\"4\"/&gt;\n      &lt;!-- Codebook Predictor Arrays --&gt;\n      &lt;field name=\"book\" datatype=\"ALADPCMPredictor\" ispointer=\"0\" isarray=\"1\"\n            meaning=\"Array of Predictors\" arraylenvar=\"NUM_PRED\"&gt;\n        &lt;!-- Codebook Predictor Array 1 --&gt;\n        &lt;element datatype=\"ALADPCMPredictor\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ALADPCMPredictor\"&gt;\n            &lt;field name=\"data\" datatype=\"int16\" ispointer=\"0\" isarray=\"1\" meaning=\"None\"\n                  arraylenfixed=\"16\"&gt;\n              &lt;!-- COPY &amp; PASTE FIRST PREDICTOR ARRAY HERE!! --&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n            &lt;/field&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n        &lt;!-- Codebook Predictor Array 2 --&gt;\n        &lt;element datatype=\"ALADPCMPredictor\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ALADPCMPredictor\"&gt;\n            &lt;field name=\"data\" datatype=\"int16\" ispointer=\"0\" isarray=\"1\" meaning=\"None\"\n                  arraylenfixed=\"16\"&gt;\n              &lt;!-- COPY &amp; PASTE SECOND PREDICTOR ARRAY HERE!! --&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n            &lt;/field&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n        &lt;!-- Codebook Predictor Array 3 --&gt;\n        &lt;element datatype=\"ALADPCMPredictor\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ALADPCMPredictor\"&gt;\n            &lt;field name=\"data\" datatype=\"int16\" ispointer=\"0\" isarray=\"1\" meaning=\"None\"\n                  arraylenfixed=\"16\"&gt;\n              &lt;!-- COPY &amp; PASTE THIRD PREDICTOR ARRAY HERE!! --&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n            &lt;/field&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n        &lt;!-- Codebook Predictor Array 4 --&gt;\n        &lt;element datatype=\"ALADPCMPredictor\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ALADPCMPredictor\"&gt;\n            &lt;field name=\"data\" datatype=\"int16\" ispointer=\"0\" isarray=\"1\" meaning=\"None\"\n                  arraylenfixed=\"16\"&gt;\n              &lt;!-- COPY &amp; PASTE FOURTH PREDICTOR ARRAY HERE!! --&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n            &lt;/field&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt;\n      &lt;/field&gt;\n    &lt;/struct&gt;\n  &lt;/item&gt;\n  &lt;!-- Add more codebook items here --&gt;\n&lt;/aladpcmbooks&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | ww ww ww ww xx xx xx xx y0 y0 y1 y1 y2 y2 y3 y3\n## ## ## ## | y4 y4 y5 y5 y6 y6 y7 y7 y8 y8 y9 y9 yA yA yB yB\n## ## ## ## | yC yC yD yD yE yE yF yF z0 z0 z1 z1 z2 z2 z3 z3\n## ## ## ## | z4 z4 z5 z5 z6 z6 z7 z7 z8 z8 z9 z9 zA zA zB zB\n## ## ## ## | zC zC zD zD zE zE zF zF -- -- -- -- -- -- -- --\n</code></pre> <ul> <li><code>ww ww ww ww</code> = Order value</li> <li><code>xx xx xx xx</code> = Number of predictors value</li> <li><code>y# y#</code> = Codebook array value</li> <li><code>z# z#</code> = Codebook array value</li> <li><code>--</code> = Padding to byte 16 for alignment</li> </ul> <p>Codebook Array</p> <p>Codebook arrays are an array of 16 <code>int16</code> values with the number of arrays being used by vanilla samples at two arrays and the number of arrays being used by custom samples at four arrays.</p>"},{"location":"advanced/audiobanks/building-audiobanks/#audiobank-loopbooks","title":"Audiobank Loopbooks","text":"C \u00a0XML \u00a0Binary <pre><code>AdpcmLoop SampleLoopbook = {\n  loop_start = 0,            // Loop start marker of the sample; if loop count = 0 then leave as 0\n  loop_end = 0,              // Loop end marker of the sample; if loop count = 0 then this becomes num_samples\n  loop_count = 0,            // Total number of times to loop the sample; -1 is indefinite\n  num_samples = 0,           // Total number of samples; if loop count = 0 then leave as 0\n  /* loopbook only exists if loopCount != 0 */\n  loopbook = {\n    0, 0, 0, 0, 0, 0, 0, 0, // Predictor array\n    0, 0, 0, 0, 0, 0, 0, 0,\n  },\n};\n</code></pre> <pre><code>&lt;!-- Audiobank Loopbooks --&gt;\n&lt;aladpcmloops&gt;\n&lt;!-- Loopbook Item --&gt;\n  &lt;item address=\"0\" name=\"Loopbook Name\"&gt;\n    &lt;!-- ALADPCMLoop Struct --&gt;\n    &lt;struct name=\"ALADPCMLoop\" HAS_TAIL=\"0\"&gt;\n      &lt;!-- Loop Start --&gt;\n      &lt;field name=\"Loop Start\" datatype=\"uint32\" ispointer=\"0\" isarray=\"0\" meaning=\"Loop Start\"\n             value=\"0\"/&gt;\n      &lt;!-- Loop End (If Loop Count = 0 then it becomes Number of Samples)--&gt;\n      &lt;field name=\"Loop End (Sample Length)\" datatype=\"uint32\" ispointer=\"0\" isarray=\"0\" meaning=\"Loop End\"\n             value=\"0\"/&gt;\n      &lt;!-- Loop Count --&gt;\n      &lt;field name=\"Loop Count\" datatype=\"uint32\" ispointer=\"0\" isarray=\"0\" meaning=\"Loop Count\"\n             defaultval=\"-1\" value=\"-1\"/&gt;\n      &lt;!-- Number of Samples --&gt;\n      &lt;field name=\"Number of Samples\" datatype=\"uint32\" ispointer=\"0\" isarray=\"0\"\n             meaning=\"None\" defaultval=\"0\" value=\"0\"/&gt;\n      &lt;!-- Predictor State --&gt;\n      &lt;field name=\"Loopbook\" datatype=\"ALADPCMTail\" ispointer=\"0\" isarray=\"1\"\n             meaning=\"Tail Data (if Loop Start != 0)\" arraylenvar=\"HAS_TAIL\"&gt;\n        &lt;!-- If Loop Count != 0 insert the array, otherwise remove the array --&gt;\n        &lt;!-- Loopbook Predictor Array --&gt;\n        &lt;element datatype=\"ALADPCMTail\" ispointer=\"0\" value=\"0\"&gt;\n          &lt;struct name=\"ALADPCMTail\"&gt;\n            &lt;field name=\"data\" datatype=\"int16\" ispointer=\"0\" isarray=\"1\"\n                   meaning=\"None\" arraylenfixed=\"16\"&gt;\n              &lt;!-- COPY &amp; PASTE LOOP PREDICTOR ARRAY HERE!! --&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n              &lt;element datatype=\"int16\" ispointer=\"0\" value=\"0\"/&gt;\n            &lt;/field&gt;\n          &lt;/struct&gt;\n        &lt;/element&gt; &lt;!-- End of Loopbook Predictor Array --&gt;\n      &lt;/field&gt; &lt;!-- Closing tag for Predictor State --&gt;\n    &lt;/struct&gt;\n  &lt;/item&gt;\n  &lt;!-- Add more loopbook items here --&gt;\n&lt;/aladpcmloops&gt;\n</code></pre> <pre><code>Offset (h)  | 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n## ## ## ## | vv vv vv vv ww ww ww ww xx xx xx xx yy yy yy yy\n## ## ## ## | z0 z0 z1 z1 z2 z2 z3 z3 z4 z4 z5 z5 z6 z6 z7 z7\n## ## ## ## | z8 z8 z9 z9 zA zA zB zB zC zC zD zD zE zE zF zF\n</code></pre> <ul> <li><code>vv vv vv vv</code> = Loop start value</li> <li><code>ww ww ww ww</code> = Loop end value</li> <li><code>xx xx xx xx</code> = Loop count value</li> <li><code>yy yy yy yy</code> = Number of samples value</li> <li><code>z# z#</code> = Loopbook array value</li> </ul> <p>Loopbook Array</p> <p>Loopbook arrays are an array of 16 <code>int16</code> values with the array only being present if \"Loop Count\" is not equal to zero.</p>"},{"location":"advanced/midi/overview/","title":"Advanced MIDI Overview","text":"<ul> <li> <p> \u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"advanced/midi/rpns/","title":"Registered Parameter Numbers","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page details a specific type of MIDI control change messages.</p>"},{"location":"advanced/midi/rpns/#about-rpns","title":"About RPNs","text":"<p>MIDI control changes include an RPN, which stands for Registered Parameter Numbers, which are extended. RPNs can be used in tandem with Data Entry messages to change various parameters within a MIDI file. When using RPNs, the first RPN (MIDI control change numbers 100 and 101; these can be sent in any order) should be sent to select the parameter to edit, then Data Entry (MIDI control change numbers 6 and 38) messages should be sent to set the value of the parameter. When an RPN message is received, any Data Entry messages that are sent and received afterward in the same MIDI channel will change the parameters of an RPN message, for RPNs not to be changed by unwanted Data Entry messages. RPN Null messages should be sent so that the parameters will not be changed.</p>"},{"location":"advanced/midi/rpns/#pitch-bend-sensitivity","title":"Pitch Bend Sensitivity","text":"<p>This parameter allows the pitch bend semitone range used in the channel the RPN and Data Entry messages have been sent in to be changed; it requires both Data Entry messages. The MIDI specification does not give information on the full range, meaning that it depends on the MIDI hardware or software being used.</p> <p>Info</p> <p>The default MIDI pitch bend sensitivity is \u00b12 semitones, Ocarina of Time and Majora's Mask have three different pitch bend ranges available and assigned using three different sequence commands: Command \"0xDE\" uses a custom range, command \"0xD3\" has a range of \u00b112 semitones, and command \"0xEE\" has a range of \u00b12 semitones; by default, SEQ64 assigns pitch bends to 0xD3, however, in SEQ64 versions 2.0 and above the sequence commands may be assigned to whatever MIDI control change is set in the ABI file.</p> <p>By using RPNs, the range within a MIDI file can be set to match the default pitch bend range used by SEQ64.</p>"},{"location":"advanced/midi/rpns/#message-values","title":"Message Values","text":"RPN MSB RPN LSB Data Entry MSB Data Entry LSB <code>00H</code> <code>00H</code> <code>mmH</code> <code>llH</code>"},{"location":"advanced/midi/rpns/#value-information","title":"Value Information","text":"MIDI CC Value Decription RPN MSB <code>00H</code> When set to a value of 0 alongside RPN LSB sets parameter to edit to Pitch Bend Sensitivity RPN LSB <code>00H</code> When set to a value of 0 alongside RPN MSB sets parameter to edit to Pitch Bend Sensitivity Data Entry MSB <code>mmH</code> Semitone range Data Entry LSB <code>llH</code> Cent range"},{"location":"advanced/midi/rpns/#example","title":"Example","text":"<p>In the example below, the channel's pitch bend range is set to a range of \u00b112 semitones instead of the default MIDI range of \u00b12 semitones. After the range is set, RPN Null commands are sent to ensure the data will not receive unwanted changes.</p> Measures:Beats:Ticks Event Kind Value 1 Value 2 Value 3 00000:00:000 Control Change 101-RPN MSB 0 \u2014 00000:00:000 Control Change 100-RPN LSB 0 \u2014 00000:00:000 Control Change 6-Data Entry MSB 12 \u2014 00000:00:000 Control Change 38-Data Entry LSB 0 \u2014 00000:00:000 Control Change 101-RPN MSB 127 \u2014 00000:00:000 Control Change 100-RPN LSB 127 \u2014"},{"location":"advanced/midi/rpns/#channel-fine-tuning","title":"Channel Fine-Tuning","text":"<p>This parameter allows the fine-tuning of programs in the channel the RPN and Data Entry messages have been sent in to be changed; it requires both Data Entry messages. If the 14 bit value of the Data Entry messages is 0x2000 (MSB of 64 and LSB of 0), then the tuning is central with A440 Hz. The full range gives a range of \u00b11 semitones of tuning, as 1 semitone is equal to 100 cents, and since the distance between the center of 0x2000 and each of the limits is 8192, a single increment is: \\(100 / 8192 \\approx 0.0122 \\space cents\\).</p>"},{"location":"advanced/midi/rpns/#message-values_1","title":"Message Values","text":"RPN MSB RPN LSB Data Entry MSB Data Entry LSB <code>00H</code> <code>01H</code> <code>mmH</code> <code>llH</code>"},{"location":"advanced/midi/rpns/#value-information_1","title":"Value Information","text":"MIDI CC Value Decription RPN MSB <code>00H</code> When set to a value of 0 alongside RPN LSB sets parameter to edit to Channel Fine-Tuning RPN LSB <code>01H</code> When set to a value of 1 alongside RPN MSB sets parameter to edit to Channel Fine-Tuning Data Entry MSB <code>mmH</code> MSB of the 14 bit value Data Entry LSB <code>llH</code> LSB of the 14 bit value"},{"location":"advanced/midi/rpns/#example_1","title":"Example","text":"<p>In the example below, the channel's fine-tuning is being set to have an increase of 50 cents. After the fine-tuning is set, RPN Null commands are sent to ensure the data will not receive unwanted changes.</p> Measures:Beats:Ticks Event Kind Value 1 Value 2 Value 3 00000:00:000 Control Change 101-RPN MSB 0 \u2014 00000:00:000 Control Change 100-RPN LSB 1 \u2014 00000:00:000 Control Change 6-Data Entry MSB 96 \u2014 00000:00:000 Control Change 38-Data Entry LSB 0 \u2014 00000:00:000 Control Change 101-RPN MSB 127 \u2014 00000:00:000 Control Change 100-RPN LSB 127 \u2014"},{"location":"advanced/midi/rpns/#channel-coarse-tuning","title":"Channel Coarse-Tuning","text":"<p>This parameter allows the coarse-tuning of programs in the channel the RPN and Data Entry messages have been sent in to be changed; it only requires the Data Entry MSB message. If the 14 bit value of the Data Entry MSB message is 0x40 (64), then the tuning is central with A440 Hz. The full range gives a range of \u00b148 semitones of tuning.</p>"},{"location":"advanced/midi/rpns/#message-values_2","title":"Message Values","text":"RPN MSB RPN LSB Data Entry MSB Data Entry LSB <code>00H</code> <code>02H</code> <code>mmH</code> <code>llH</code>"},{"location":"advanced/midi/rpns/#value-information_2","title":"Value Information","text":"MIDI CC Value Decription RPN MSB <code>00H</code> When set to a value of 0 alongside RPN LSB sets parameter to edit to Channel Coarse-Tuning RPN LSB <code>02H</code> When set to a value of 2 alongside RPN MSB sets parameter to edit to Channel Coarse-Tuning Data Entry MSB <code>mmH</code> Number of semitones to increase or decrease the tuning by Data Entry LSB <code>llH</code> Ignored and treated as a value of 0"},{"location":"advanced/midi/rpns/#example_2","title":"Example","text":"<p>In the example below the channel's coarse-tuning is being set to have a decrease of one octave (12 semitones). After the coarse-tuning is set, RPN Null commands are sent to ensure the data will not receive unwanted changes.</p> Measures:Beats:Ticks Event Kind Value 1 Value 2 Value 3 00000:00:000 Control Change 101-RPN MSB 0 \u2014 00000:00:000 Control Change 100-RPN LSB 1 \u2014 00000:00:000 Control Change 6-Data Entry MSB 52 \u2014 00000:00:000 Control Change 38-Data Entry LSB 0 \u2014 00000:00:000 Control Change 101-RPN MSB 127 \u2014 00000:00:000 Control Change 100-RPN LSB 127 \u2014"},{"location":"advanced/midi/sysex/","title":"SysEx Messages","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page details MIDI universal SysEx messages.</p>"},{"location":"advanced/midi/sysex/#about-sysex-messages","title":"About SysEx Messages","text":"<p>MIDI comes with two different types of messages; channel messages and system messages. Channel messages handle everything that affects channels, such as note on and off messages, control change messages, etc. System messages include SysEx, clock, and so on. SysEx are system exclusive messages designed to provide information about specific functions inside MIDI hardware from different manufacturers; SysEx messages are up to the product manufacturer to define themselves. Unlike regular MIDI messages, SysEx messages are sent as a string, which makes them quite a bit more complicated to use than regular MIDI messages. However, if MIDI hardware relies on it, then it is very important to learn.</p> <p>This page does not contain every single SysEx message, but it does provide information on universal SysEx messages that are the same for all different MIDI controllers. The only SysEx message that can be identified and used by SEQ64 is the SysEx message for master volume, and it will ignore all other SysEx messages. However, it is beneficial to learn about the other SysEx messages as well.</p>"},{"location":"advanced/midi/sysex/#universal-realtime-system-exclusive-messages","title":"Universal Realtime System Exclusive Messages","text":"<p>Below are the universal realtime SysEx messages and information about them. Despite being \"exclusive\", they are in fact not exclusive messages; every piece of MIDI hardware will recognize and use them in the same way, thus being named \"universal\" SysEx messages.</p>"},{"location":"advanced/midi/sysex/#master-volume","title":"Master Volume","text":"<p>This is the only SysEx message that SEQ64 can recognize and will add a command for when importing a MIDI file and converting it into a sequence file. This message controls the overall volume of every MIDI channel, allowing for an increase or decrease in volume for the entire sequence.</p>"},{"location":"advanced/midi/sysex/#message-string","title":"Message String","text":"Status 2nd Byte 3rd Byte <code>F0H</code> <code>7FH 7FH 04H 01H llH mmH</code> <code>F7H</code> <p>Info</p> <p>The only values that need to edited are the <code>llH</code> and <code>mmH</code> values, which correspond to the LSB and MSB of the command itself.</p>"},{"location":"advanced/midi/sysex/#string-value-information","title":"String Value Information","text":"Byte Decription <code>F0H</code> SysEx start <code>7FH</code> ID number (Universal realtime message) <code>7FH</code> Device ID (Broadcast) <code>04H</code> Sub ID#1 (Device Control) <code>01H</code> Sub ID#2 (Master Volume) <code>llH</code> Master Volume LSB <code>mmH</code> Master Volume MSB <code>F7H</code> SysEx end"},{"location":"advanced/midi/sysex/#master-fine-tuning","title":"Master Fine Tuning","text":"<p>This SysEx message is not recognized by SEQ64 and will not add a command when importing a MIDI file and converting it into a sequence file. This message controls the overall fine-tuning of every MIDI channel, allowing for a master fine-tuned transposition.</p>"},{"location":"advanced/midi/sysex/#message-string_1","title":"Message String","text":"Status 2nd Byte 3rd Byte <code>F0H</code> <code>7FH 7FH 04H 01H llH mmH</code> <code>F7H</code> <p>Info</p> <p>The only values that need to be edited are the <code>llH</code> and <code>mmH</code> values, which correspond to the LSB and MSB of the command itself.</p>"},{"location":"advanced/midi/sysex/#string-value-information_1","title":"String Value Information","text":"Byte Decription <code>F0H</code> SysEx start <code>7FH</code> ID number (Universal realtime message) <code>7FH</code> Device ID (Broadcast) <code>04H</code> Sub ID#1 (Device Control) <code>03H</code> Sub ID#2 (Master Volume) <code>llH</code> Master Fine Tuning LSB <code>mmH</code> Master Fine Tuning MSB <code>F7H</code> SysEx end"},{"location":"advanced/midi/sysex/#master-coarse-tuning","title":"Master Coarse Tuning","text":"<p>This SysEx is not recognized by SEQ64 and will not add a command when importing a MIDI file and converting it into a sequence file. This message controls the overall coarse tuning of every MIDI channel, allowing for a master coarse-tuned transposition.</p>"},{"location":"advanced/midi/sysex/#message-string_2","title":"Message String","text":"Status 2nd Byte 3rd Byte <code>F0H</code> <code>7FH 7FH 04H 01H llH mmH</code> <code>F7H</code> <p>Info</p> <p>The only values that need to be edited are the <code>llH</code> and <code>mmH</code> values, which correspond to the LSB and MSB of the command itself.</p>"},{"location":"advanced/midi/sysex/#string-value-information_2","title":"String Value Information","text":"Byte Decription <code>F0H</code> SysEx start <code>7FH</code> ID number (Universal realtime message) <code>7FH</code> Device ID (Broadcast) <code>04H</code> Sub ID#1 (Device Control) <code>03H</code> Sub ID#2 (Master Volume) <code>llH</code> Master Fine Tuning LSB <code>mmH</code> Master Fine Tuning MSB <code>F7H</code> SysEx end"},{"location":"advanced/sampling/overview/","title":"Overview of Custom Sample Injection","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> ROM Size Limit <p>The ROMs of Ocarina of Time and Majora's Mask have a limited file space of 64 MiB decompressed, and it becomes 32 MiB when compressed. To retain compatibility with both Nintendo 64 hardware and Wii Virtual Console hardware, a ROM should never go above 64 MiB compressed. The Nintendo 64 can theoretically handle 64 MiB ROMs; however, Wii Virtual Console can only be expanded to allow 48 MiB due to the nature of the fact the Wii itself needs memory to run the operating system and emulator at the same time. Using custom samples can eat up this data very quickly if the sample file is large enough; it is recommended to keep samples themselves to around a max of 10 KiB when possible. Emulators on PC can go well above the 64 MiB and 48 MiB limit; however, hardware compatibility is important.</p> <p>Please be mindful when releasing creations publicly that there will be more than one person using them, so it is best to show some refrain. If a song file ends up anywhere near 500 KiB, then it is likely too large. A good target to aim for would be no larger than 100 to 200 KiB.</p> <p>This page details the basics of custom sample injection for Ocarina of Time and Majora's Mask for use with the Ocarina of Time and Majora's Mask randomizers. This page does not detail injecting a sample directly into the ROM without the use of the randomizer program.</p> <p>Warning</p> <p>Custom sample injection is for creating non-vanilla sampled instruments, drums, or sound effects and assumes a creator already has a decent understanding of music creation and using custom audiobanks. This is not a beginner's guide to music creation.</p>"},{"location":"advanced/sampling/overview/#overview","title":"Overview","text":"<p>In the latest versions of the Ocarina of Time and Majora's Mask randomizers, it is possible to create brand-new instruments using non-vanilla samples by injecting them into a ROM using the randomizer. Pages related to this feature will do their best to help creators learn the process of custom sample injection. However, not everything is easy or straightforward; some information is very complex and requires a somewhat thorough explanation.</p> OOTMM Unsupported Files <p>At the time of writing this note, custom sample files (<code>.zsound</code> files) are unsupported by the OOTMM randomizer and will be skipped during seed generation. There will be a log of what files were skipped. This is normal.</p> <p>For the sake of clarity and brevity, instruments, drums, and sound effects that use custom sample injection will all be referred to as \"sampled\" instruments, drums, and sound effects; vanilla instruments, drums, and sound effects will be referred to as \"non-sampled\" or \"vanilla\" instruments, drums, and sound effects. As an aside, this also applies to <code>.ootrs</code> and <code>.mmrs</code> files using sampled instruments as well; sampled songs that use sampled instruments are referred to as being \"sampled\" (this makes it easier for the end-user to recognize whether a song uses sampled instruments, drums, and sound effects and helps when trying to solve issues that arise with the files as well) and non-sampled songs that only use vanilla instruments, drums, and sound effects are referred to as being \"non-sampled\" (this is generally because a majority of songs will not be using sampled instruments, drums, and sound effects). Any mention of \"samples\" refers to the <code>.wav</code> and <code>.bin</code> (or <code>.zsound</code>) files being used to create a sampled instrument, drum, or sound effect.</p> <p>The majority of the work for the sampled instruments, drums, and sound effects samples is making them compatible with Ocarina of Time and Majora's Mask. Once the samples are compatible with the games, the rest of the process is creating the audiobank data the sampled instrument, drum, or sound effect will use for import into a sequence's full audiobank. Making sampled instruments, drums, and sound effects can be very time-consuming, and many problems may arise when working with sampled instruments, drums, and sound effects, so do not get discouraged when failing.</p> Recomendation <p>It is recommended to read through the custom sample injection wiki pages fully once while following along with the process, then going over it again as many times as needed until fully understanding the process. Should any further help be required, it is best to inquire within the  Majora's Mask Randomizer  or  Darunia's Joy  discord servers.</p>"},{"location":"advanced/sampling/overview/#sample-injection-tools","title":"Sample Injection Tools","text":"<p>Below is a list of tools that are used for creating music for Ocarina of Time and Majora's Mask. It is recommended to download all the tools needed right now to save on needing to go back and forth between downloading and visiting the relevant wiki pages.</p>"},{"location":"advanced/sampling/overview/#summary-of-creating-new-instruments-drums-and-sound-effects","title":"Summary of Creating New Instruments, Drums, and Sound Effects","text":"<p>Before beginning, it may be beneficial to understand the general workflow for custom sample injection, as well as garner basic information on what sample files actually are. Please understand that the workflow presented here is not set in stone, it is a guideline to help creators create their own workflow that works for them; the wiki follows the presented workflow in how information and pages are structured and presented.</p>"},{"location":"advanced/sampling/overview/#custom-sample-injection-workflow","title":"Custom Sample Injection Workflow","text":"<ol> <li>Obtain a <code>.wav</code> file to use for a sampled instrument, drum, or sound effect<ul> <li>Resample the <code>.wav</code> file to 32000 Hz (1)</li> <li>Add or remove loop points in the <code>.wav</code> file using Polyphone or z64Audio as needed</li> </ul> </li> <li>Find the <code>.wav</code> file's tuning float value<ul> <li>Find the <code>.wav</code> file's root key (2)</li> </ul> </li> <li>Convert the <code>.wav</code> file to a <code>.bin</code> (or <code>.zsound</code>) file using the Sample Creation Tools or obtain a sample from a different Nintendo 64 game using N64 Soundlist Tool<ul> <li>Convert the sample's codebook ADPCM predictor data from <code>.bin</code> to <code>.xml</code></li> <li>Convert the sample's loopbook ADPCM predictor data from <code>.bin</code> to <code>.xml</code> (3)</li> </ul> </li> <li>Create the sampled instruments, drums, or sound effects audiobank (4)<ul> <li>Edit the splits, release rate, tuning float, and ADSR values inside the audiobank</li> <li>Copy and paste the codebook ADPCM predictor data into <code>&lt;books&gt;</code></li> <li>Copy and paste the loopbook ADPCM predictor data into <code>&lt;loops&gt;</code> (5)</li> </ul> </li> <li>Set up the sampled instruments, drums, or sound effects unique sample address marker<ul> <li>For Ocarina of Time randomizer rename <code>*.wav.vadpcm.bin</code> to <code>*.zsound</code> and add <code>ZSOUND:*.zsound:########</code> to the song's <code>.meta</code> file</li> <li>For Majora's Mask randomizer rename <code>*.wav.vadpcm.bin</code> to <code>*_########.zsound</code></li> <li>Rename <code>*.wav.vadpcm.bin</code> to <code>*.zsound</code> and add <code>- \"*.zsound\": \"########\"</code> to the <code>samples:</code> section of the song's <code>metadata.yml</code> file (6)</li> </ul> </li> <li>Test the sampled instrument, drum, or sound effect in-game to make sure it works<ul> <li>Create an <code>.ootrs</code> or <code>.mmrs</code> and test the sample using the audiobank and a test sequence in the randomizer (7)</li> </ul> </li> </ol> <ol> <li>Resampling is an optional step in this process, but it removes the need for any extra work in tuning a sampled instrument, drum, or sound effect.</li> <li>Finding the root key of a sample is only required if unsure of or to reconfirm the root key for the sample.</li> <li>If the <code>.wav</code> file does not have any loop data specified, then the Sample Creation Tools will not output a <code>.bin</code> file containing loopbook ADPCM predictor data.</li> <li>If not using an audiobank template, then either create an audiobank from scratch or edit an existing audiobank from Ocarina of Time or Majora's Mask using SEQ64.</li> <li>This is only required if the Sample Creation Tools output a <code>.bin</code> file containing the sample's loopbook ADPCM predictor data.</li> <li><code>metadata.yml</code> has not been presented to or adopted by the developers of any randomizer; however, it is a simple but effective system that will hopefully be adopted and added in the future.</li> <li>Optionally, the sample could be injected into a decompressed ROM; however, it is much more tedious and does not ensure that the sample will not collide with other data added by the randomizer.</li> </ol> <p>There are a few ways to obtain samples to inject. The first way is ripping and injecting other Nintendo 64 games' sample files, and codebook &amp; loopbook ADPCM predictor data using N64 Soundlist Tool. The second way is obtaining a soundfont (<code>.sf2</code>) that has already ripped sample files as <code>.wav</code> files and using those <code>.wav</code> files to create a sampled instrument, drum, or sound effect. The third way is to create samples using a DAW or sampling software to create a <code>.wav</code> file, then use those <code>.wav</code> files to create a sampled instrument, drum, or sound effect.</p> <p>The easiest way of creating sampled instruments, drums, and sound effects is using other Nintendo 64 games' sample files, codebook &amp; loopbook ADPCM predictor data, and other relevant data using N64 Soundlist Tool; in compairson converting a <code>.wav</code> file is much more involved and tedious.</p>"},{"location":"advanced/sampling/overview/#summary-of-zsound-files","title":"Summary of <code>.zsound</code> Files","text":"<p>The sample files the Ocarina of Time Randomizer and Majora's Mask Randomizer recognizes as <code>.zsound</code> files are AIFF or AIFC files that have been encoded with ADPCM compression. This compression into a binary file allows the sample files to play on Nintendo 64 hardware.</p> <p>MOVE CODEBLOCK TO SECTION ABOUT PACKING??? The <code>.zsound</code> files are packed inside the root of an <code>.ootrs</code> or <code>.mmrs</code> file:</p> Ocarina of Time RandomizerMajora's Mask Randomizer <p> <pre><code>\ud83d\udcc2 ./\n\u251c\u2500 \ud83d\udcc2 song.ootrs/\n\u2502  \u251c\u2500 \ud83c\udfb5 filename.seq\n\u2502  \u251c\u2500 \ud83d\udcc4 filename.zbank\n\u2502  \u251c\u2500 \ud83d\udcc4 filename.bankmeta\n\u2502  \u251c\u2500 \ud83d\udcc4 filename.zsound (1)\n\u2502  \u2514\u2500 \ud83d\udcc4 filename.meta\n</code></pre> </p> <ol> <li>For the Ocarina of Time Randomizer, filenames can be anything, as sample markers are stored in a metadata file.</li> </ol> <p> <pre><code>\ud83d\udcc2 ./\n\u251c\u2500 \ud83d\udcc2 song.mmrs/\n\u2502  \u251c\u2500 \ud83c\udfb5 filename.seq\n\u2502  \u251c\u2500 \ud83d\udcc4 filename.zbank\n\u2502  \u251c\u2500 \ud83d\udcc4 filename.bankmeta\n\u2502  \u251c\u2500 \ud83d\udcc4 filename_20000427.zsound (1)\n\u2502  \u2514\u2500 \ud83d\udcc4 categories.txt\n</code></pre> </p> <ol> <li>For the Majora's Mask Randomizer, filenames must contain the sample's unique marker preceded by an underscore (e.g. <code>filename_########.zsound</code>), as sample markers are stored in the filename.</li> </ol> <p>Beacause binary is a raw file type, it is difficult to differentiate between different binary files during the injection process. Other binary file types must be injected as well such as sequences (<code>.seq</code>, <code>.aseq</code> and <code>.zseq</code>), and audiobank files (<code>.zbank</code> and <code>.bankmeta</code>). If they were packed into an <code>.ootrs</code> or <code>.mmrs</code> file, the lack of differentiation could cause issues. Because of that, they were coined <code>.zsound</code> files by Isghj5 when adding sample injection to the Majora's Mask Randomizer. The Ocarina of Time Randomizer adopted this file type extension as well when sample injection was added.</p>"},{"location":"advanced/sampling/overview/#summary-of-adpcm-predictors","title":"Summary of ADPCM Predictors","text":"<p>Codebooks and loopbooks \u2014 commonly referred to as \"books\", \"loops\", or \"predictors\" \u2014 are a table of ADPCM prediction coefficients. Codebooks and loopbooks inform the audio engine how to play the sample. Codebooks and loopbook data is stored inside audiobank files so that the RAW audio data does not need to be loaded into RAM. Instead, only information pointing to the samples and the playback parameter values need to be loaded into RAM.</p> <p>The Nintendo 64 audio tool <code>tabledesign.exe</code> reads AIFC or AIFF files to produce a codebook and loopbook. The Nintendo 64 audio encoding tool <code>vadpcm_enc.exe</code> uses the codebook and loopbook file to encode AIFC or AIFF files to produce a compressed binary file. During encoding, prediction coefficients are adaptively selected from the table to provide the best sound quality possible. The codebook and loopbook definitions are embedded in the final output file.</p> <p>ADPCM is a type of lossy compression algorithm for audio files. Due to being a lossy compression format, some data loss or alteration will occur during the compression process. This type of compression works by separating sample data into different blocks and predicting the variation of that sample's data within each block. This takes previous sample points in the sample's data to predict future sample points. The size of blocks is measured in \"samples\", with the size of a single block, or \"frame\", being 16 samples. The default block size for <code>tabledesign.exe</code> is 256 samples, or 16 blocks. Larger blocks allow for better compression, resulting in smaller file sizes, but at the cost of resolution and loop point alignment.</p> <p>Partial Blocks</p> <p>Because ADPCM blocks are aligned one after another, a file compressed with ADPCM may have an unfinished, partial block at its end. In this case, the decoder generates silence for the remainder of this partial block. This keeps the file from looping seamlessly. Silence will appear in a codebook as zeroed out values. This is normal, it does not indicate that there is any issue with the file.</p> synthesis.c<pre><code>if (sampleState-&gt;bitField1.isSyntheticWave) {\n    cmd = AudioSynth_LoadWaveSamples(cmd, sampleState, synthState, numSamplesToLoad);\n    sampleDmemBeforeResampling = DMEM_UNCOMPRESSED_NOTE + (synthState-&gt;samplePosInt * 2);\n    synthState-&gt;samplePosInt += numSamplesToLoad;\n} else {\n    sample = sampleState-&gt;tunedSample-&gt;sample;\n    loopInfo = sample-&gt;loop;\n\n    if (note-&gt;playbackState.status != PLAYBACK_STATUS_0) {\n        synthState-&gt;stopLoop = true;\n    }\n\n    if ((loopInfo-&gt;count == 2) &amp;&amp; synthState-&gt;stopLoop) {\n        sampleEndPos = loopInfo-&gt;sampleEnd;\n    } else {\n        sampleEndPos = loopInfo-&gt;loopEnd;\n    }\n</code></pre>"},{"location":"advanced/sampling/troubleshooting/","title":"Sample Troubleshooting","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>placceholder</p>"},{"location":"advanced/sampling/wav-conversion/","title":"Creating Sample Data by Converting WAV Files","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> ROM Size Limit <p>The ROMs of Ocarina of Time and Majora's Mask have a limited file space of 64 MiB decompressed, and it becomes 32 MiB when compressed. To retain compatibility with both Nintendo 64 hardware and Wii Virtual Console hardware, a ROM should never go above 64 MiB compressed. The Nintendo 64 can theoretically handle 64 MiB ROMs; however, Wii Virtual Console can only be expanded to allow 48 MiB due to the nature of the fact the Wii itself needs memory to run the operating system and emulator at the same time. Using custom samples can eat up this data very quickly if the sample file is large enough; it is recommended to keep samples themselves to around a max of 10 KiB when possible. Emulators on PC can go well above the 64 MiB and 48 MiB limit; however, hardware compatibility is important.</p> <p>Please be mindful when releasing creations publicly that there will be more than one person using them, so it is best to show some refrain. If a song file ends up anywhere near 500 KiB, then it is likely too large. A good target to aim for would be no larger than 100 to 200 KiB.</p> <p>This page details the process of converting <code>.wav</code> files into sample files compatible with Ocarina of Time and Majora's Mask.</p>"},{"location":"advanced/sampling/wav-conversion/#placeholder","title":"placeholder","text":"<p>One way of creating custom samples is by converting <code>.wav</code> files into <code>.bin</code> (or <code>.zsound</code>) files using the vadpcm_enc and tabledesign programs from the Nintendo 64 SDK. However, those tools must be recompiled to work on x86 architecture as they were originally built for IRIX computers using the MIPS processor. Currently, there is no active development of those tools. However, there is a tool that can be used with modern computers and processors called z64audio.</p> <p>Unlike with N64 Soundlist Tool, to obtain all the data for the audiobank the sample(s) will be put in require(s) different tools. The process of converting a <code>.wav</code> file is much more involved and can be quite tedious compared to N64 Soundlist Tool; however, it is possible to use samples from anywhere, not just other Nintendo 64 games.</p>"},{"location":"advanced/sampling/wav-conversion/#workflow","title":"Workflow","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#resampling-a-wav-file","title":"Resampling a WAV File move to own page?","text":"<p>placeholder</p> <p>Resampling is an optional step in the process of converting a <code>.wav</code> file into a sample file. Resampling can reduce the file size of a sample file by lowering the sample rate, reducing the amount of data contained within the file. Resampling can also ensure that a sample's sample rate will match the master sample rate of Ocarina of Time and Majora's Mask and eliminate the need for sample rate correction when tuning the sample.</p>"},{"location":"advanced/sampling/wav-conversion/#resampling-using-audacity","title":"Resampling using Audacity","text":"<p>placeholder</p> <ul> <li>Open the <code>.wav</code> file in Audacity and make sure it is currently selected.</li> <li>Click \"Tracks\" at the top of the Audacity window, then \"Resample...\" and select the desired sample rate.</li> <li>Click \"Audio Setup\", then \"Audio Settings...\" and change the \"Project Sample Rate\" field to 32000 Hz in the \"Quality\" section of the \"Audio Settings\" menu.</li> <li>Export the sample as a <code>.wav</code> file by clicking \"File\", then \"Export\", then \"Export as WAV\".</li> </ul>"},{"location":"advanced/sampling/wav-conversion/#resampling-using-polyphone","title":"Resampling using Polyphone","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#creating-a-looping-sample","title":"Creating a Looping Sample","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#looping-using-z64audio","title":"Looping using z64Audio","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#looping-using-polyphone","title":"Looping using Polyphone","text":"<p>placeholder</p> <ul> <li>Open Polyphone, then click \"New Soundfont\"</li> <li>Drag the <code>.wav</code> file into the Polyphone window.</li> <li>Left-Click anywhere on the waveform visualization to set the \"Loop Start\" marker, Right-Click anywhere after a \"Loop Start\" marker to create a \"Loop End\" marker.</li> <li>Once the loop markers have been set up, click the toolbox icon at the top of the Polyphone window, then click \"Auto Loop\" (this will adjust the loop automatically).</li> <li>Listen to the loop and adjust it as needed, undoing any changes with Ctrl+Z or Cmd+Z</li> <li>Once content with how the loop sounds, export the sample as a <code>.wav</code> file by clicking the toolbox icon at the top of the Polyphone window, then click \"Wav Export...\".</li> </ul>"},{"location":"advanced/sampling/wav-conversion/#pitch-shifting-a-sample","title":"Pitch Shifting a Sample move to own page?","text":"<p>Due to the hardware limitations of the Nintendo 64's Reality Signal Processor (RSP) being unable to pitch shift audio samples above 24 semitones and below 48 semitones from a sample's root key, a sequence or MIDI file may require a pitch higher than what can be achieved in-game. To get around this limitation, a sample can be pitch-shifted out-of-game instead to change the sample's root key.</p> <p>Audio Quality Degradation</p> <p>When pitch-shifting a sample, there will be degradation in the quality of the audio the farther from the sample's original root key the shift is. Because of this, it is recommended to only ever increase or decrease the pitch by 12 semitones at most in either direction.</p> <p>Pitch Caps and Floors</p> <p>The Nintendo 64 Programming Manual makes mention of the pitch cap and floor; however, it is described as having a max of 12 semitones above the sample's root key, and 24 semitones below the sample's root key. In Ocarina of Time and Majora's Mask it is the former instead of the latter described by the Nintendo 64 Programming Manual; the reason for this discrepancy is uncertain.</p>"},{"location":"advanced/sampling/wav-conversion/#pitch-shifting-using-audacity","title":"Pitch Shifting using Audacity","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#pitch-shifting-using-polyphone","title":"Pitch Shifting using Polyphone","text":"<p>placeholder</p> <ul> <li>Open Polyphone, then click \"New Soundfont\".</li> <li>Drag the <code>.wav</code> file into the Polyphone window.</li> <li>Click the toolbox icon at the top of the Polyphone window, then click \"Transpose...\"</li> <li>Enter the amount of semitones to shift the sample up or down. Positive numbers increase the pitch, with negative numbers decreasing the pitch.</li> <li>Click \"Okay\" and Polyphone will shift the pitch of the sample; this will also adjust the sample's loop automatically as well.</li> </ul>"},{"location":"advanced/sampling/wav-conversion/#tuning-a-sample","title":"Tuning a Sample move to own page?","text":"<p>placholder</p>"},{"location":"advanced/sampling/wav-conversion/#finding-the-samples-root-key","title":"Finding the Sample's Root Key","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#finding-the-samples-tuning-value","title":"Finding the Sample's Tuning Value","text":"<p>placeholder</p>"},{"location":"advanced/sampling/wav-conversion/#using-z64audio-to-convert-a-wav-file","title":"Using z64audio to Convert a WAV File","text":"<p>placeholder</p>"},{"location":"basic/","title":"Index","text":""},{"location":"basic/#basic-information","title":"Basic Information","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"basic/#placeholder","title":"Placeholder","text":"<p>placeholder blurb</p> <ul> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> </ul>"},{"location":"basic/assign-instruments/","title":"Assigning Instruments","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page details how to assign instruments in MIDI and sequences, so that instruments assigned in MIDI will match those inside of the audiobank used for a sequence in Ocarina of Time and Majora's Mask.</p>"},{"location":"basic/assign-instruments/#summary-of-assigning-instruments","title":"Summary of Assigning Instruments","text":"<p>In MIDI, instruments are assigned by a control change command using the values 192 (0xC0) to 207 (0xCF). Generally only a single instrument can be assigned per channel. However, instruments can be swapped at any point using a MIDI program change message.</p> <p>MIDI instrument banks using the GM specification normally contain 127 possible instruments with MIDI channel 10 always being reserved for percussion kits, where instead of using a program change to individual drums, it instead changes the entire percussion kit itself with individual drum sounds being assigned to different keys on the virtual MIDI piano (the range of possible samples is from keys 35 to 81). Instrument banks in MIDI contain those 127 instruments and percussion kits within a single instrument bank. However, in Ocarina of Time and Majora's Mask there are multiple instrument banks commonly referred to as \"audiobanks\" or \"soundfonts\". Setting instruments depends entirely on the audiobank used; in vanilla audiobanks there will almost always only be 1 (0x00) to 16 (0x0F) instruments with instrument 126 (0x7E) assigning the sound effects to a channel and instrument 127 (0x7F) assigning the percussion kit to a channel. Audiobanks can contain up to 255 (0xFF) instruments that may be assigned to a channel. However, instruments 126 (0x7E) and 127 (0x7F) are always reserved for sound effects and percussion kits respectively.</p> <p>Some audiobanks may have fewer instruments, different sound effects, or contain entirely different percussion kits. The reason for using multiple smaller audiobanks is to reduce the amount of RAM required by the audio system in Ocarina of Time and Majora's Mask.</p> Drums and Sound Effects <p>Drums and sound effects in Ocarina of Time and Majora's Mask work almost identically to how they do in MIDI with different values corresponding to different individual drum sounds. The only difference is that there is a single percussion kit per audiobank, and it is assigned to program 127 (0x7F) instead of being assigned to a specific MIDI channel.</p> <p>To properly assign the instruments a sequence will use, it is necessary to determine which instrument inside the audiobank used corresponds to the equivalent MIDI program value. The vanilla audiobank references  wiki page contains a list of all vanilla audiobanks in Ocarina of Time and Majora's Mask and their corresponding instruments and instrument assignment values.</p>"},{"location":"basic/assign-instruments/#assigning-instruments-in-midi","title":"Assigning Instruments in MIDI","text":"<p>In MIDI, instruments and percussion kits are assigned to a channel by sending a MIDI program change message to that channel. There may only be a single instrument or percussion kit assigned to a channel at any time. However, the channel's assigned instrument or percussion kit can be changed at any point by sending another MIDI program change message to the channel. MIDI program change messages have two bytes. The first byte of a MIDI program change message is the status byte with values ranging from 0xC0 to 0xCF. The first half-byte determines the message type; the second half-byte points to the MIDI channel the message is sent to. The status byte determines the channel the message is sent to. The second byte of a MIDI program change message is the data byte with values ranging from 0x00 (0) to 0x7F (127). The data byte determines what instrument or percussion kit the channel will use. Instruments may be set in any MIDI channel except for MIDI channel 10.</p>"},{"location":"basic/assign-instruments/#using-percussion-kits-in-midi","title":"Using Percussion Kits in MIDI","text":"<p>While regular instruments can be assigned to any MIDI channel other than MIDI channel 10, percussion kits can only be assigned in MIDI channel 10. Percussion kits in MIDI have their own separate banks that are assigned solely to MIDI channel 10. Because of this, percussion kits are only available in MIDI channel 10 and cannot be used in any of the other MIDI channels.</p>"},{"location":"basic/assign-instruments/#assigning-instruments-in-sequences","title":"Assigning Instruments in Sequences","text":"<p>In Ocarina of Time and Majora's Mask, instruments, sound effects, and percussion kits are assigned to a channel with the sequence command 0xC1 (Set Instrument). There may only be a single instrument, sound effects, or percussion kit assigned to a channel at any given time. However, the channel's assigned instrument, sound effects, or percussion kit can be changed at any point by sending another sequence command of 0xC1 (Set Instrument). The sequence command 0xC1 (Set Instrument) only has a data byte with values ranging from 0x00 (0) to 0xFF (255). This data byte determines what instrument, sound effects, or percussion kit the channel will use. Instruments may be set in any sequence channel.</p>"},{"location":"basic/assign-instruments/#using-percussion-kits-and-sound-effects-in-sequences","title":"Using Percussion Kits and Sound Effects in Sequences","text":"<p>Unlike in MIDI, percussion kits and sound effects can be assigned to any channel in a sequence. Percussion kits and sound effects are reserved solely for the sequence command 0xC1 (Set Instrument) data byte values of 0x7E (126) for sound effects and 0x7F (127) for percussion kits. Because of this, it is possible to use percussion kits and sound effects in any channel in a sequence. However, there is only one percussion kit and sound effect set available per audiobank in Ocarina of Time and Majora's Mask.</p>"},{"location":"basic/assign-instruments/#assigning-appropriate-midi-instruments","title":"Assigning Appropriate MIDI Instruments","text":"<p>Instruments in MIDI are not one-to-one with instruments in Ocarina of Time and Majora's Mask. For example, in MIDI, the \"Strings\" instrument has a MIDI program change value of 48 (0x30). In Ocarina of Time and Majora's Mask, the \"Strings\" instrument has an instrument assignment value dependent on the bank used by a sequence. Unlike in MIDI, in Ocarina of Time and Majora's Mask, it is also possible that the \"Strings\" instrument may not be present in a bank at all. As an example, in Ocarina of Time and Majora's Mask, bank 0x03 assigns the \"Strings\" instrument to a value of 10 (0x0A) or 11 (0x0B), while bank 0x02 does not contain the \"Strings\" instrument at all in either game and only contains ambient nature sounds. So, to make sure instruments, sound effects, and percussion kits are assigned to the proper channel in a sequence, it is required to adjust MIDI program change message values to match the assignment value of the counterpart chosen in the Ocarina of Time and Majora's Mask bank being used.</p>"},{"location":"basic/assign-instruments/#placeholder","title":"placeholder","text":"<p>placeholder</p>"},{"location":"basic/assign-instruments/#midi-banks","title":"midi banks","text":"<p>In MIDI, instruments and percussion kits are stored inside of banks. In the General MIDI 1.0 specification (which does not support MIDI bank select messages), bank 0 (0x00) contains only instruments with bank 128 (0x80) containing only percussion kits. Bank 0 is the default bank for all MIDI channels with bank 128 as the default bank in MIDI channel 10.</p>"},{"location":"basic/assign-instruments/#oot-and-mm-banks","title":"oot and mm banks","text":"<p>In Ocarina of Time and Majora's Mask, instruments, sound effects, and percussion kits are stored inside of banks (commonly referred to as \"audiobanks\" or \"soundfonts\"). Unlike MIDI, Ocarina of Time and Majora's Mask store instruments, sound effects, and percussion kits inside of a single bank. And while a sequence command for changing banks does exist, it can only load banks that are currently loaded into RAM.</p>"},{"location":"basic/audio-balance/","title":"In-Game Audio Balancing","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>placeholder</p> <p>Youlean Loudness Meter </p> <p>Sequences in the tables below were recorded using BizHawk's built-in A/V recording functionality at 100% volume with the output method set to \"DirectSound\"; no outside audio balancing was used for any of the audio files used to measure LUFS, all the audio was captured by the in-game engine.</p> Ocarina of Time Sequence Integrated LUFSMajora's Mask Sequence Integrated LUFS <p><p> </p> <p> </p></p> <p><p> </p> <p> </p></p> <p>The audio below is of the Zora Cape waterfall in Majora's Mask which has an integrated LUFS of -16.48</p> <p> </p>"},{"location":"basic/categories/","title":"Categorizing Sequences","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page details how to categorize custom music for the Ocarina of Time and Majora's Mask randomizers, as well as the Ocarina of Time &amp; Majora's Mask combo randomizer, so that sequences will play in appropriate areas in-game.</p>"},{"location":"basic/categories/#making-a-meta-file-for-ocarina-of-time","title":"Making a META File for Ocarina of Time","text":"<p>To make a META file for an <code>.ootrs</code> file, create a text file with the extension <code>.meta</code> that has the same filename as the sequence this data is for (e.g. <code>mkwii-moonview.seq</code> will have a META file with the name <code>mkwii-moonview.meta</code>).</p> <p>The META file's structure is presented below:</p> TemplateExample <p>Vanilla Audiobank:</p> filename.meta<pre><code>songname\n0x00\nbgm/fanfare\nmusicgroups\n</code></pre> <p>Custom Audiobank:</p> filename.meta<pre><code>songname\n- (2)\nbgm/fanfare\nmusicgroups\nZSOUND:filename.zsound:######## (1)\n</code></pre> <ol> <li>If using a sampled instrument, drum, or sound effect, this line, and subsequent lines for however many samples are used, must be included, otherwise omit this line and subsequent lines.</li> <li>If using a custom audiobank, use a hyphen <code>-</code> instead of the number of the audiobank the sequence uses.</li> </ol> <p>Vanilla Audiobank:</p> Moonview Highway.meta<pre><code>Mario Kart Wii - Moonview Highway\n0x03\nbgm\nFields,Town,Dungeon\n</code></pre> <p>Custom Audiobank:</p> Moonview Highway.meta<pre><code>Mario Kart Wii - Moonview Highway\n- (2)\nbgm\nFields,Town,Dungeon\nZSOUND:EORG253.zsound:41B3ABEC (1)\nZSOUND:EORG268.zsound:41B3ABED\nZSOUND:EORG286.zsound:41B3ABEE\nZSOUND:O-HIT80.zsound:43AC22DB\nZSOUND:SAW0-48.zsound:446535FF\nZSOUND:SAW0-60.zsound:44653600\nZSOUND:SAW0-72.zsound:44653601\n</code></pre> <ol> <li>If using a sampled instrument, drum, or sound effect, this line, and subsequent lines for however many samples are used, must be included, otherwise omit this line and subsequent lines.</li> <li>If using a custom audiobank, use a hyphen <code>-</code> instead of the number of the audiobank the sequence uses.</li> </ol> <p>The first line of the META file is the name of the sequence. This name must be unique as no two sequences can share the exact same name. Generally, <code>Game Name - Song Name</code> will work unless a sequence with that name already exists and the user uses both sequences.</p> Recommendation <p>It is recommended not to use quotation marks in a sequence name as it will make it harder for people creating a cosmetic plandomizer file.</p> <p>The second line of the META file is the audiobank the sequence uses. For example, if using audiobank <code>0x03</code>, then the second line will be <code>0x03</code>. However, if using a custom audiobank, then a hyphen (<code>-</code>) must be used instead.</p> <p>The fourth line of the META file is the locations the sequence will appear in, known as \"music groups\". This will be explained in greater detail below.</p> <p>The fifth and subsequent lines of the META file is for extra data, such as <code>.zsound</code> files. These lines are for when a sampled instrument, drum, or sound effect is being used. If a sampled instruments, drums, or sound effects is not being used, the META file ends at the fourth line. The data groups on the fifth line are separated using colons (<code>:</code>) (e.g., <code>ZSOUND:filename.zsound:########</code>).</p> <p>Warning</p> <p>Do not end files with a new line character (<code>\\n</code>). This can cause potential parsing issues for the Ocarina of Time Randomizer. It can also cause end-users to encounter errors during seed generation.</p>"},{"location":"basic/categories/#music-groups","title":"Music Groups","text":"<p>Music groups determine where a sequence will play in-game. This information is specified in the META file. A META file can include a set of named music groups with varying specificity. These named music groups should be in a comma-separated list. They are listed below, with an online music groups tool available here , to help determine the correct areas of the game the sequence to be placed.</p> Low Specificity GroupsMid Specificity GroupsHigh Specificity GroupsExact Specificity Groups <p>Background Music:</p> Music Group Sequence Name Overworld <code>Hyrule Field</code> <code>Lost Woods</code> <code>Gerudo Valley</code> <code>Market</code> <code>Kakariko Child</code> <code>Kakariko Adult</code> <code>Lon Lon Ranch</code> <code>Kokiri Forest</code> <code>Goron City</code> <code>Zora's Domain</code> <code>Castle Courtyard</code> <code>Horse Race</code> <code>Minigame</code> <code>Shooting Gallery</code> <code>Fairy Fountain</code> <code>File Select</code> <code>Temple of Time</code> <code>Chamber of the Sages</code> <code>House</code> <code>Shop</code> <code>Potion Shop</code> <code>Windmill Hut</code> Dungeon <code>Inside the Deku Tree</code> <code>Grotto</code> <code>Dodongo's Cavern</code> <code>Death Mountain Crater</code> <code>Damp\u00e9 Race</code> <code>Gerudo Training Ground</code> <code>Jabu-Jabu</code> <code>Forest Temple</code> <code>Fire Temple</code> <code>Ice Cavern</code> <code>Water Temple</code> <code>Spirit Temple</code> <code>Shadow Temple</code> <code>Bottom of the Well</code> <code>Castle Underground</code> <code>Castle Escape</code> Fight <code>Battle</code> <code>Miniboss Battle</code> <code>Boss Battle</code> <code>Fire Boss</code> <code>Ganondorf Battle</code> <code>Ganon Battle</code> CharacterTheme <code>Title Theme</code> <code>Zelda's Theme</code> <code>Sheik's Theme</code> <code>Deku Tree</code> <code>Kaepora Gaebora</code> <code>Fairy Flying</code> <code>Ganondorf Theme</code> <code>Kotake &amp; Koume</code> <code>Ingo Theme</code> <p>Fanfares:</p> Music Group Sequence Name EventFanfare <code>Item Get</code> <code>Heart Container Get</code> <code>Spirit Stone Get</code> <code>Heart Piece Get</code> <code>Medallion Get</code> <code>Learn Song</code> <code>Boss Defeated</code> <code>Epona Race Goal</code> <code>Escape from Ranch</code> <code>Zelda Turns Around</code> <code>Treasure Chest</code> <code>Master Sword</code> <code>Door of Time</code> <code>Ganondorf Appears</code> <code>Game Over</code> SongFanfare <code>Prelude of Light</code> <code>Bolero of Fire</code> <code>Minuet of Forest</code> <code>Serenade of Water</code> <code>Requiem of Spirit</code> <code>Nocturne of Shadow</code> <code>Saria's Song</code> <code>Epona's Song</code> <code>Zelda's Lullaby</code> <code>Sun's Song</code> <code>Song of Time</code> <code>Song of Storms</code> <p>Background Music:</p> Music Group Sequence name Outdoors <code>Hyrule Field</code> <code>Lost Woods</code> <code>Gerudo Valley</code> <code>Market</code> <code>Kakariko Child</code> <code>Kakariko Adult</code> <code>Lon Lon Ranch</code> <code>Kokiri Forest</code> <code>Goron City</code> <code>Zora's Domain</code> <code>Castle Courtyard</code> <code>Horse Race</code> <code>Minigame</code> Indoors <code>Shooting Gallery</code> <code>Fairy Fountain</code> <code>File Select</code> <code>Temple of Time</code> <code>Chamber of the Sages</code> <code>House</code> <code>Shop</code> <code>Potion Shop</code> <code>Windmill Hut</code> ChildDungeon <code>Inside the Deku Tree</code> <code>Grotto</code> <code>Dodongo's Cavern</code> <code>Death Mountain Crater</code> <code>Damp\u00e9 Race</code> <code>Gerudo Training Grounds</code> <code>Jabu-Jabu</code> AdultDungeon <code>Forest Temple</code> <code>Fire Temple</code> <code>Ice Cavern</code> <code>Water Temple</code> <code>Spirit Temple</code> <code>Shadow Temple</code> <code>Bottom of the Well</code> <code>Castle Underground</code> <code>Castle Escape</code> SmallFight <code>Battle</code> <code>Miniboss Battle</code> BigFight <code>Boss Battle</code> <code>Fire Boss</code> <code>Ganondorf Battle</code> <code>Ganon Battle</code> HeroTheme <code>Title Theme</code> <code>Zelda's Theme</code> <code>Sheik's Theme</code> <code>Deku Tree</code> <code>Kaepora Gaebora</code> <code>Fairy Flying</code> VillainTheme <code>Ganondorf Theme</code> <code>Kotake &amp; Koume</code> <code>Ingo Theme</code> ItemFanfare <code>Item Get</code> <code>Heart container Get</code> <code>Spirit Stone Get</code> <code>Heart Piece Get</code> <code>Medallion Get</code> <code>Learn Song</code> <p>Fanfares:</p> Music Group Sequence Name SuccessFanfare <code>Boss Defeated</code> <code>Epona Race Goal</code> <code>Escape from Ranch</code> <code>Zelda Turns Around</code> BigFanfare <code>Treasure Chest</code> <code>Master Sword</code> <code>Door of Time</code> <code>Ganondorf Appears</code> GameOver <code>Game Over</code> WarpSong <code>Prelude of Light</code> <code>Bolero of Fire</code> <code>Minuet of Forest</code> <code>Serenade of Water</code> <code>Requiem of Spirit</code> <code>Nocturne of Shadow</code> UtilitySong <code>Saria's Song</code> <code>Epona's Song</code> <code>Zelda's Lullaby</code> <code>Sun's Song</code> <code>Song of Time</code> <code>Song of Storms</code> <p>Background Music:</p> Music Group Sequence Name Fields <code>Hyrule Field</code> <code>Lost Woods</code> <code>Gerudo Valley</code> Town <code>Market</code> <code>Kakariko Child</code> <code>Kakariko Adult</code> <code>Lon Lon Ranch</code> <code>Kokiri Forest</code> <code>Goron City</code> <code>Zora's Domain</code> <code>Castle Courtyard</code> Fun <code>Horse Race</code> <code>Minigame</code> <code>Shooting Gallery</code> MagicalPlace <code>Fairy Foutain</code> <code>File Select</code> <code>Temple of Time</code> <code>Chamber of the Sages</code> House <code>House</code> SalesArea <code>Shop</code> <code>Potion Shop</code> WindmillHut <code>Windmill Hut</code> ChildDungeon <code>Inside the Deku Tree</code> <code>Grotto</code> <code>Dodongo's Cavern</code> <code>Death Mountain Crater</code> <code>Damp\u00e9 Race</code> <code>Gerudo Training Grounds</code> <code>Jabu-Jabu</code> AncientDungeon <code>Forest Temple</code> <code>Fire Temple</code> MysticalDungeon <code>Ice Cavern</code> <code>Water Temple</code> <code>Spirit Temple</code> SpookyDungeon <code>Shadow Temple</code> <code>Bottom of the Well</code> <code>Castle Underground</code> <code>Castle Escape</code> SmallFight <code>Battle</code> <code>Miniboss Battle</code> BossFight <code>Boss Battle</code> <code>Fire Boss</code> FinalFight <code>Ganondorf Battle</code> <code>Ganon Battle</code> HeroTheme <code>Title Theme</code> <code>Zelda's Theme</code> <code>Sheik's Theme</code> <code>Deku Tree</code> <code>Kaepora Gaebora</code> <code>Fairy Flying</code> VillainTheme <code>Ganondorf Theme</code> <code>Kotake &amp; Koume</code> <code>Ingo Theme</code> <p>Fanfares:</p> Music Group Sequence Name ItemFanfare <code>Item Get</code> <code>Heart container Get</code> <code>Spirit Stone Get</code> <code>Heart Piece Get</code> <code>Medallion Get</code> <code>Learn Song</code> SuccessFanfare <code>Boss Defeated</code> <code>Epona Race Goal</code> <code>Escape from Ranch</code> <code>Zelda Turns Around</code> BigFanfare <code>Treasure Chest</code> <code>Master Sword</code> <code>Door of Time</code> <code>Ganondorf Appears</code> GameOver <code>Game Over</code> WarpSong <code>Prelude of Light</code> <code>Bolero of Fire</code> <code>Minuet of Forest</code> <code>Serenade of Water</code> <code>Requiem of Spirit</code> <code>Nocturne of Shadow</code> UtilitySong <code>Saria's Song</code> <code>Epona's Song</code> <code>Zelda's Lullaby</code> <code>Sun's Song</code> <code>Song of Time</code> <code>Song of Storms</code> <p>Background Music:</p> Music Group Sequence Name Music Group Sequence Name HyruleField <code>Hyrule Field</code> ForestTemple <code>Forest Temple</code> LostWoods <code>Lost Woods</code> FireTemple <code>Fire Temple</code> GerudoValley <code>Gerudo Valley</code> IceCavern <code>Ice Cavern</code> Market <code>Market</code> WaterTemple <code>Water Temple</code> KakarikoChild <code>Kakariko Child</code> SpiritTemple <code>Spirit Temple</code> KakaridkoAdult <code>Kakariko Adult</code> ShadowTemple <code>Shadow Temple</code> <code>Bottom of the Well</code> LonLonRanch <code>Lon Lon Ranch</code> CastleUnderground <code>Castle Underground</code> KokiriForest <code>Kokiri Forest</code> CastleEscape <code>Castle Escape</code> GoronCity <code>Goron City</code> Battle <code>Battle</code> ZorasDomain <code>Zora's Domain</code> MinibossBattle <code>Miniboss Batte</code> CastleCourtyard <code>Castle Courtyard</code> BossBattle <code>Boss Battle</code> HorseRace <code>Horse Race</code> FireBoss <code>Fire Boss</code> Mini-game <code>Minigame</code> GanondorfBattle <code>Ganondorf Battle</code> ShootingGallery <code>Shooting Gallery</code> GanonBattle <code>Ganon Battle</code> FairyFountain <code>Fairy Fountain</code> <code>File Select</code> TitleTheme <code>Title Theme</code> TempleOfTime <code>Temple of Time</code> ZeldaTheme <code>Zelda's Theme</code> ChamberOfTheSages <code>Chamber of the Sages</code> SheikTheme <code>Sheik's Theme</code> House <code>House</code> DekuTree <code>Deku Tree</code> Shop <code>Shop</code> KaeporaGaebora <code>Kaepora Gaebora</code> PotionShop <code>Potio Shop</code> FairyFlying <code>Fairy Flying</code> WindmillHut <code>Windmill Hut</code> GanondorfTheme <code>Ganondorf Theme</code> InsideDekuTree <code>Inside the Deku Tree</code> <code>Grotto</code> KotakeAndKoume <code>Kotake &amp; Koume</code> DodongosCavern <code>Dodongo's Cavern</code> <code>Death Mountain Crater</code> <code>Damp\u00e9 Race</code> <code>Gerudo Training Grounds</code> IngoTheme <code>Ingo Theme</code> JabuJabu <code>Jabu-Jabu</code> \u2014 \u2014 <p>Fanfares:</p> Music Group Sequence Name Music Group Sequence Name ItemGet <code>Item Get</code> GameOver <code>Game Over</code> HeartContainerGet <code>Heart Container Get</code> PreludeOfLight <code>Prelude of Light</code> SpiritStoneGet <code>Spirit Stone Get</code> BoleroOfFire <code>Bolero of Fire</code> HeartPieceGet <code>Heart Piece Get</code> MinuetOfForest <code>Minuet of Forest</code> MedallionGet <code>Medallion Get</code> SerenadeOfWater <code>Serenade of Water</code> LearnSong <code>Learn Song</code> RequiemOfSpirit <code>Requiem of Spirit</code> BossDefeated <code>Boss Defeated</code> NocturneOfShadow <code>Nocturne of Shadow</code> EponaRaceGoal <code>Epona Race Goal</code> SariasSong <code>Saria's Song</code> EscapeFromRanch <code>Escape from Ranch</code> EponasSong <code>Epona's Song</code> ZeldaTurnsAround <code>Zelda Turns Around</code> ZeldasLullaby <code>Zelda's Lullaby</code> TreasureChest <code>Treasure Chest</code> SunsSong <code>Sun's Song</code> MasterSword <code>Master Sword</code> SongOfTime <code>Song of Time</code> DoorOfTime <code>Door of Time</code> SongOfStorms <code>Song of Storms</code> GanondorfAppears <code>Ganondorf Appears</code> \u2014 \u2014"},{"location":"basic/categories/#making-a-categories-file-for-majoras-mask","title":"Making a Categories File for Majora's Mask","text":"<p>To make a categories file for an <code>.mmrs</code> file, create a text file with the name <code>categories.txt</code>, then put whatever group and individual category values that correspond(s) to the area(s) the sequence should play in-game inside the file, separated with a hyphenated list or comma-separated list:</p> Hypenated ListComma-Separated List categories.txt<pre><code>1-2-3\n</code></pre> categories.txt<pre><code>1,2,3\n</code></pre> <p>Warning</p> <p>Using a mix of hyphens and commas to separate category values is invalid. During the music writing of seed generation an error will occur.</p> <p>Individual categories are hexadecimal values. However, they must not have a hexadecimal markerpreceding or succeeding them (e.g. <code>0x##</code>, <code>##H</code>).</p>"},{"location":"basic/categories/#categories","title":"Categories","text":"<p>There are two different types of categories: group categories and individual categories. Group categories contain a number of areas in-game a sequence can be assigned to, and individual categories assign a sequence to a specific area in-game.</p> Issues With Looping Fanfares <p>Group categories <code>8</code>, <code>9</code>, <code>10</code>, as well as individual categories <code>108</code>, <code>109</code>, <code>119</code>, <code>120</code>, <code>121</code>, <code>122</code>, <code>124</code>, <code>137</code>, <code>139</code>, <code>13D</code>, <code>13F</code>, <code>141</code>, <code>152</code>, <code>155</code>, <code>177</code>, <code>178</code>, <code>179</code>, <code>17C</code>, and <code>17E</code>, are fanfare categories, miscategorizing a looping sequence as any of these fanfare categories can cause various issues and possibly softlock a player in various areas (e.g. Doggy Racetrack).</p> Group CategoriesIndividual Categories \"Special\" Group Category <p>Category <code>16</code> contains two cutscene sequences which will cut a sequence short if it loops, so it is recommended to put non-looping sequences in this category or to just use the individual category for these sequences instead.</p> Value Group Name Sequence Name <code>0</code> Fields <code>Termina Field</code> <code>Snowhead</code> <code>Great Bay Coast</code> <code>Ikana Canyon</code> <code>Southern Swamp</code> <code>Romani Ranch</code> <code>Deku Palace</code> <code>Mystery Woods</code> <code>1</code> Towns <code>Great Bay Coast</code> <code>Ikana Canyon</code> <code>Southern Swamp</code> <code>Clock Town (Day 1)</code> <code>Clock Town (Day 2)</code> <code>Clock Town (Day 3)</code> <code>Goron Village</code> <code>Romani Ranch</code> <code>Zora Hall</code> <code>Deku Palace</code> <code>Fairy's Fountain</code> <code>Gorman Brothers' Theme</code> <code>Mystery Woods</code> <code>Zelda's Theme</code> <code>2</code> Dungeons <code>Inside a Cave</code> <code>Snowhead Temple</code> <code>Great Bay Temple</code> <code>Pirates' Fortress</code> <code>Ancient Castle of Ikana</code> <code>Stone Tower Temple</code> <code>Stone Tower Temple (Inverted)</code> <code>Woodfall Temple</code> <code>3</code> Indoors <code>Goron Village</code> <code>Zora Hall</code> <code>Clock Tower Interior</code> <code>Guru-Guru's Theme</code> <code>Milk Bar</code> <code>Inside a House</code> <code>Item Shop</code> <code>Minigame Shop</code> <code>Marine Research Lab &amp; Curiosity Shop</code> <code>Astral Observatory</code> <code>Music Box House: \"Farewell to Gibdo\"</code> <code>Cremia's Carriage</code> <code>Old Koume's Boat Cruise</code> <code>Mayor Dotour's Office</code> <code>Swordsman's School</code> <code>Sharp's Curse: \"Melody of Darkness\"</code> <code>Fairy's Fountain</code> <code>File Select</code> <code>Koume &amp; Kotake's Theme</code> <code>Mystery Woods</code> <code>Zelda's Theme</code> <code>Song of Healing Theme</code> <code>Giants' Theme</code> <code>4</code> Minigames <code>Milk Bar</code> <code>Minigame Shop</code> <code>Music Box House: \"Farewell to Gibdo\"</code> <code>Goron Race</code> <code>Timed Minigame</code> <code>Cremia's Carriage</code> <code>Old Koume's Boat Cruise</code> <code>Horse Race</code> <code>Swordsman's School</code> <code>Mystery Woods</code> <code>Battle: Regular Enemy</code> <code>5</code> Action Cutscenes <code>Timed Minigame</code> <code>Mayor Dotour's Office</code> <code>Aliens' Theme</code> <code>Swordsman's School</code> <code>Sharp's Curse: \"Melody of Darkness\"</code> <code>Pursuit Theme</code> <code>Mask Reveal</code> <code>Battle: Regular Enemy</code> <code>6</code> Calm Cutscenes &amp; Character Themes <code>Clock Tower Interior</code> <code>Guru-Guru's Theme</code> <code>Marine Research Lab &amp; Curiosity Shop</code> <code>Music Box House: \"Farewell to Gibdo\"</code> <code>Cremia's Carriage</code> <code>Old Koume's Boat Cruise</code> <code>Mayor Dotour's Office</code> <code>Aliens' Theme</code> <code>Sharp's Curse: \"Melody of Darkness\"</code> <code>Majora's Theme</code> <code>Fairy's Fountain</code> <code>File Select</code> <code>Keaton's Quiz</code> <code>Koume &amp; Kotake's Theme</code> <code>Gorman Brothers' Theme</code> <code>Mystery Woods</code> <code>Zelda's Theme</code> <code>Tatl &amp; Tael Reunited</code> <code>Song of Healing Theme</code> <code>Giants' Theme</code> <code>7</code> Combat &amp; Boss Fights <code>Pursuit Theme</code> <code>Battle: Miniboss</code> <code>Battle: Dungeon Boss</code> <code>Battle: Majora's Mask</code> <code>Battle: Majora's Incarnation</code> <code>Battle: Majora's Wrath</code> <code>8</code> Item Get, Minigame Win, and Soaring <code>Fanfare: Event Success!</code> <code>Fanfare: Get an Item!</code> <code>Fanfare: Get a Heart Container!</code> <code>Fanfare: Get a Mask!</code> <code>Fanfare: Get a Heart Piece!</code> <code>Fanfare: The Truth Revealed!</code> <code>Fanfare: Goron Race Victory!</code> <code>Fanfare: Horse Race Victory!</code> <code>Fanfare: Learned a Song!</code> <code>Fanfare: Song of Soaring</code> <code>Fanfare: Temple Appears!</code> <code>9</code> Game Over <code>Fanfare: Event Failure [1]</code> <code>Fanfare: Event Failure [2]</code> <code>Fanfare: Game Over!</code> <code>Fanfare: Boss Defeated!</code> <code>Fanfare: Song of Soaring</code> <code>Fanfare: Temple Appears!</code> <code>10</code> Area Cleared <code>Fanfare: Boss Defeated!</code> <code>Fanfare: Temple Clear! (Short) [1]</code> <code>Fanfare: Temple Clear! (Long) [2]</code> <code>Fanfare: The Moon Destroyed!</code> <code>Fanfare: The Giants' Farewell!</code> <code>16</code> Special <code>Cutscene: Giants' Theme</code> <code>Cutscene: Title Screen</code> Missing Sequences <p>Sequences that are missing from this list are normally just pointers to other sequences that have no real sequence assigned to them. These sequences have been omitted from the list. There are also certain sequences that require extra sequence data to play properly in-game that the randomizer doesn't randomize, which are also omitted.</p> Value Sequence Name Value Sequence Name <code>102</code> Termina Field <code>136</code> Zora Hall <code>103</code> Pursuit Theme <code>137</code> Fanfare: Get a Mask! <code>104</code> Majora's Theme <code>138</code> Battle: Miniboss <code>105</code> Clock Tower Interior <code>139</code> Fanfare: Get a Heart Piece! <code>106</code> Stone Tower Temple <code>13A</code> Astral Observatory <code>107</code> Stone Tower Temple (Inverted) <code>13B</code> Inside a Cave <code>108</code> Fanfare: Event Failure [1] <code>13C</code> Milk Bar <code>109</code> Fanfare: Event Failure [2] <code>13D</code> Fanfare: The Truth Revealed! <code>10B</code> Song of Healing Theme <code>13E</code> Woods of Mystery <code>10C</code> Southern Swamp <code>13F</code> Fanfare: Goron Race Victory! <code>10D</code> Aliens' Theme <code>140</code> Horse Race <code>10E</code> Old Koume's Boat Cruise <code>141</code> Fanfare: Horse Race Victory! <code>10F</code> Sharp's Curse: \"Melody of Darkness\" <code>142</code> Gorman Brothers' Theme <code>110</code> Great Bay Coast <code>143</code> Koume &amp; Kotake's Theme <code>111</code> Ikana Canyon <code>144</code> Item Shop <code>112</code> Deku Palace <code>145</code> Kaepora Gaebora's Theme <code>113</code> Snowhead <code>146</code> Minigame Shop <code>114</code> Pirates' Fortress <code>150</code> Swordsman's School <code>115</code> Clock Town (Day 1) <code>152</code> Fanfare: Learned a Song! <code>116</code> Clock Town (Day 2) <code>155</code> Fanfare: Song of Soaring <code>117</code> Clock Town (Day 3) <code>157</code> Final Hours <code>118</code> File Select <code>165</code> Snowhead Temple <code>119</code> Fanfare: Event Success! <code>166</code> Great Bay Temple <code>11A</code> Battle: Regular Enemy <code>169</code> Battle: Majora's Wrath <code>11B</code> Battle: Dungeon Boss <code>16A</code> Battle: Majora's Incarnation <code>11C</code> Woodfall Temple <code>16B</code> Battle: Majora's Mask <code>11F</code> Inside a House <code>16C</code> Band-Practice: Japas' Bass Guitar (Zelda 1 \"Dungeon\") <code>120</code> Fanfare: Game Over! <code>16D</code> Band-Practice: Tijo's Drum (ALttP \"Cave\") <code>121</code> Fanfare: Boss Defeated! <code>16E</code> Band-Practice: Evan's Piano (Zelda 1 \"Continue?\") <code>122</code> Fanfare: Get an Item! <code>16F</code> Ancient Castle of Ikana <code>124</code> Fanfare: Get a Heart Container! <code>170</code> Cutscene: Giants' Theme <code>125</code> Timed Minigame <code>171</code> Kamaro's Theme <code>126</code> Goron Race <code>172</code> Cremia's Carriage <code>127</code> Music Box House: \"Farewell to Gibdo\" <code>173</code> Keaton's Quiz <code>128</code> Fairy's Fountain <code>176</code> Cutscene: Title Screen <code>129</code> Zelda's Theme <code>177</code> Fanfare: Temple Appears! <code>12A</code> Rosa Sisters' Theme <code>178</code> Fanfare: Temple Clear! (Short) [1] <code>12C</code> Marine Research Lab &amp; Curiosity Shop <code>179</code> Fanfare: Temple Clear! (Long) [2] <code>12D</code> Giants' Theme <code>17B</code> The Moon Enraged <code>12E</code> Guru-Guru's Theme <code>17C</code> Fanfare: The Giants' Farewell! <code>12F</code> Romani Ranch <code>17D</code> Tatl &amp; Tael Reunited (Generic Reunion Theme) <code>130</code> Goron Village <code>17E</code> Fanfare: The Moon Destroyed! <code>131</code> Mayor Dotour's Office \u2014 \u2014"},{"location":"basic/categories/#making-a-metadata-file","title":"Making a Metadata File","text":"<p>UNSUPPORTED</p> <p>DO NOT USE IT AS A REPLACEMENT FOR A META OR CATEGORIES FILE!</p>  \u00a0Template metadata.yml<pre><code>%YAML 1.2\n# The following file is a metadata file for custom music in The Legend of Zelda:\n# Ocarina of Time and The Legend of Zelda: Majora's Mask.\n#\n# Allowed Game Values: oot, mm, ootmm\n#   The \"game\" key determines which game to pull adpcm data and audiobank information\n#   from. A value of \"oot\" determines the base game to be OOT, a value of \"mm\"\n#   determines the base game to be MM, and a value of \"ootmm\" determines the game\n#\n# Allowed Song Type Values: bgm, fanfare\n#   The \"song type\" key determines whether or not the song is classfied as a bgm\n#   or fanfare. Do not miscategorize bgms as fanfares it will cause issues in\n#   both OOT and MM.\n#\n# Allowed Audiobank Values: 0x##, custom\n#   The \"audiobank\" key determines which audiobank the game set in the game\n#   key will use. However, if using a custom audiobank then the value should\n#   be changed to \"custom\" as this indicates the bank needs to be inserted.\n#\n---\ngame: oot\n\nmetadata:\n  song name: \"placeholder\"\n  song type: bgm\n  audiobank: 0x03\n  categories:\n    # To change the categories, please use an array with comma separated values\n    # e.g. [\"value\", \"value\"]\n    #\n    # MMR categories: &lt;link&gt;\n    mmr: [\"0\", \"2\"]\n    # OOTR categories: https://thesounddefense.github.io/musicgroups/\n    ootr: [\"Fields\", \"Dungeon\"]\n\n  # If there are no custom samples, remove or comment out the sample section.\n  # Place custom samples here with the following data:\n  #\n  # samples:\n  #   - filename: \"filename.zsound\"\n  #     marker: 0x########\n  #\n  samples:\n    - filename: \"ocarina.zsound\"\n      marker: 0x19981121\n    - filename: \"majora.zsound\"\n      marker: 0x20000427\n\n# Optional plain text metadata to also be contained within the metadata.yml file.\n# This could be used for accreditation or something else.\n# The data contained here is a multiline string. For more information, and a demo,\n# on multiline strings please visit: https://yaml-multiline.info/\naccreditation: |-\n  Origin Game:        &lt;placeholder&gt;\n  Song Name:          &lt;placeholder&gt;\n  Categories:         &lt;placeholder&gt;\n  Original Composers: &lt;placeholder&gt;\n  Sequence Converter: &lt;placeholder&gt;\n  Sampling:           No Sampling/Light Sampling/Heavy Sampling\n  Song Type:          BGM (Background Music)/ME (Musical Effect or Fanfare)\n\n  Notes: &lt;extra notes or comments about the song go here&gt;\n\n  Original Song: &lt;link&gt;\n</code></pre>"},{"location":"basic/custom-audiobanks/","title":"Using Custom Audiobanks","text":"<ul> <li> <p> \u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"basic/overview/","title":"Music Creation Overview","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"basic/overview/#summary-of-music-creation","title":"Summary of Music Creation","text":"<p>To create custom music in Ocarina of Time and Majora's Mask, a sequence file the audio engine can play back in real-time mut be used. Sequences are a form of compressed MIDI created by Nintendo for the Nintendo 64. Sequences are a set of commands, or instructions, that tell the audio engine what sample files to play, at what pitch, at what time, and how fast to play through the sequence. Due to the similarities between MIDI sequences and Nintendo 64 sequences, the most common way to create a sequence for Ocarina of Time and Majora's Mask is to convert a MIDI song into a sequence using SEQ64.</p> <p>There are other ways to create a sequence aside from MIDI. However, using a MIDI sequence is the easiest due to their numerous similarities, and the ability to preview a song as you work on it.</p> <p>Is it possible to use MP3 files?</p> <p>It is not possible to take an MP3 file and play it back in real-time in Ocarina of Time and Majora's Mask. While both Ocarina of Time and Majora's Mask are capable of \"streaming\" audio, the only games on the Nintendo 64 known to be capable of MP3 decoding are Conker's Bad Fur Day and Perfect Dark.</p>"},{"location":"basic/overview/#sequence-limitations","title":"Sequence Limitations","text":"<p>Below is a list of technical limitations for sequences to be aware of when creating music for Ocarina of Time and Majora's Mask:</p> <ol> <li>Like MIDI, a sequence can only have up to 16 (0x0F) channels.<ul> <li>Multiple tracks may be assigned to a single channel in MIDI; however, they are subject to the channel limitations sequences have.</li> </ul> </li> <li>A sequence's tempo cannot go above a value of 255 (0xFF).<ul> <li>Because the data that stores tempo information is an 8 bit unsigned integer (u8) value, the tempo command has a limit of 255 (0xFF) for sequences; it cannot go any higher.</li> </ul> </li> <li>A sequence's master, channel, and expression volume cannot go above a value of 255 (0xFF).<ul> <li>Because the data that stores volume information is an 8 bit unsigned integer (u8) value, the volume commands have a limit of 255 (0xFF) for sequences; it cannot go any higher. In MIDI, the data that stores volume information is a 7 bit unsigned integer value. Volume messages have a limit of 127 (0x7F) for MIDI; it cannot go any higher.</li> </ul> </li> <li>A sequence's instrument assignment values cannot go above a value of 255 (0xFF).<ul> <li>Because the data that stores instrument assignment information is an 8 bit unsigned integer (u8) value, the instrument change command has a limit of 255 (0xFF) for sequences; it cannot go any higher. In MIDI, the data that stores program assignment information is a 7 bit unsigned integer value. Program change messages have a limit of 127 (0x7F) for MIDI; it cannot go any higher.</li> </ul> </li> <li>Like MIDI, channels in a sequence are polyphonic; however, only a maximum of four voices of differing pitches can play within a single channel at any given time.</li> <li>Like MIDI, one pair of Note On and Note Off messages cannot intersect, or overlap, another pair of Note On and Note Off messages for a note of the same pitch in a sequence.<ul> <li>While a DAW may allow stacked notes or overlapped notes without immediate issue, it is invalid to send a second Note On message for a note of the same pitch in the same channel before a Note Off message is sent for the first Note On message. In MIDI, a Note On message with a velocity of zero is interpreted as a Note Off message, and while many DAWs will attempt to properly pair note messages, they will fail.</li> </ul> </li> <li>A sequence's delay values cannot go above a value of 32767 (0x7FFF)<ul> <li>Because the data that stores delay frames is a 16 bit unsigned integer (u16) value, the delay command has a limit of 32767 (0x7FFF) for sequences; it cannot go any higher.</li> </ul> </li> <li>A MIDI marker message cannot intersect a pair of Note On and Note Off messages.<ul> <li>placeholder</li> </ul> </li> </ol>"},{"location":"basic/overview/#instrument-types","title":"Instrument Types","text":"<p>In Ocarina of Time and Majora's Mask there are two different types of instruments:</p> <ol> <li>Channel-Based Instruments</li> <li>Key-Based Instruments</li> </ol>"},{"location":"basic/overview/#channel-based-instruments","title":"Channel-Based Instruments","text":"<p>Channel-based instruments, commonly referred to as just simply \"instruments\", are instruments that assign three different samples to three different note regions on the virtual MIDI piano. The low sample occupies the note region from note 0 (C0) to the note specified by the low-mid region split inside the audiobank, the mid or normal sample occupies the note region from the note specified by the low-mid region split to the note specified by the mid-high region split inside the audiobank, and the high sample occupies the note region from the note specified by the mid-high region split to note 127 (G10). Each sample is automatically pitch shifted with the starting pitch determined by the tuning float value.</p>"},{"location":"basic/overview/#special-instruments","title":"Special Instruments","text":"<p>In Ocarina of Time and Majora's Mask, there exists a special set of channel-based instruments commonly referred to as \"synth wave\", \"waveform\", or \"chiptune\" instruments. These instruments have their sample data stored outside any audiobanks; this makes them available to use at all times, regardless of the audiobank currently being used by a sequence. More detailed information on these instruments, and how to assign them to a channel can be found on the vanilla audiobank reference  wiki page.</p>"},{"location":"basic/overview/#key-based-instruments","title":"Key-Based Instruments","text":"<p>Key-based instruments, commonly referred to as \"drums\" and \"sound effects\", are instruments which have a single sample assigned to a single key on the virtual MIDI piano. Key-based instruments, despite what the name \"key-based\" may imply, are used in channels just like channel-based instruments are. However, the way their data is handled is the basis for their name. Key-based instruments as previously stated assign a single sample, ADSR envelope, and pan value to a single piano key in the virtual MIDI piano from the note range 21 (A1) to 85 (C7); the way key-based instruments are tuned in Ocarina of Time and Majora's Mask is different as well.</p>"},{"location":"basic/overview/#instrument-ranges","title":"Instrument Ranges","text":"<p>Instruments in Ocarina of Time and Majora's Mask are limited in their range. The Nintendo 64 Programming Manual states the following: \"The pitch shifter resamples the resulting data (up one octave, down any number of octaves) to the desired pitch.\"<sup>1</sup> However, the playback code given to the synthesis driver \u2014 which is responsible for pitch shifting sample data \u2014 in Ocarina of Time and Majora's Mask allows for an increase of two octaves instead of just a single octave:</p> \u00a0 C playback.c<pre><code>void AudioPlayback_NoteSetResamplingRate(NoteSampleState* sampleState,\n                                         f32 resamplingRateInput) {\n    // Set the initial resampling rate to 0.0f\n    f32 resamplingRate = 0.0f;\n\n\n    // Determines if the given resampling rate is lower than 2.0f\n    if (resamplingRateInput &lt; 2.0f) {\n          sampleState-&gt;bitField1.hasTwoParts = false;\n          resamplingRate = CLAMP_MAX(resamplingRateInput, 1.99998f);\n\n    // If the given resampling rate is higher than 2.0f the following happens\n    } else {\n        sampleState-&gt;bitField1.hasTwoParts = true;\n        // If the given resampling rate is above 4.0f, cap the resampling rate to 2.0f\n        if (resamplingRateInput &gt; 3.99996f) {\n            resamplingRate = 1.99998f;\n        // If the resampling rate is not above 4.0f then set the resampling rate equal\n        // to half the given resampling rate.\n        } else {\n            resamplingRate = resamplingRateInput * 0.5f;\n        }\n    }\n    sampleState-&gt;frequencyFixedPoint = (s32)(resamplingRate * 32768.0f);\n}\n</code></pre> <p>If a note is above a sample's pitch cap, then it </p> <p> </p>"},{"location":"basic/overview/#common-seq64-errors","title":"Common SEQ64 Errors","text":"Overlapping NotesVoice Limit <p>For a channel containing overlapping or stacked notes, SEQ64 will give the following error in the console window or debug output when importing a MIDI file: </p> <ul> <li><code>Note off (ch=# note=# time=#) received for note that is not on!</code></li> </ul> <p>For a channel containing more than four voices sounding at once, SEQ64 will give the following error in the console window or debug output when importing a MIDI file: </p> <ul> <li><code>Channel # has more than 4 notes on at a time (at t=#)!</code></li> </ul> <p>Common SEQ64 Errors</p> <ul> <li><code>Warning, extremely short note (pitch #, chn #, quarter note~), may be dropped or corrupt nearby note on/offs!</code></li> <li><code>Section boundary (e.g. loop point) in the middle of a note, note # channel #! Cutting off the note!</code></li> <li><code>Trying to fix section boundary in middle of note failed, broken sequence!</code></li> <li><code>Duplicate note on in chan # t=#, ignoring</code></li> <li><code>Channel # has more than # notes on at a time (at t=#)!</code></li> <li><code>Note off (ch=# note=# time=#) received for note that is not on!</code></li> <li><code>Chan # lyr # track has # (odd number of) events!</code></li> <li><code>No Master Volume sysex command in the MIDI, adding default 0x##</code></li> <li><code>Multiple cc command # (channel # timestamp # first cc #) missing required secondary CC #, setting to zero!</code></li> <li><code>Ran off end of track looking for note off!</code></li> <li><code>Note Off out of order! Cancelling track import!</code></li> <li><code>Note On out of order! Cancelling track import!</code></li> <li><code>Zero-length note with no delay afterwards in chn # ly # at t=#, discarding!</code></li> <li><code>Zero-length note in chn # ly # at t=#! Making small length instead...</code></li> <li><code>No [action] command defined in stype [stype] with all the needed parameters!</code></li> <li><code>Want: [idMeaning] value [idValue]</code></li> </ul>"},{"location":"basic/overview/#midi-note-division-tables","title":"MIDI Note Division Tables move to separate page","text":"<p>Listed below are notes with their corresponding tick values at common MIDI resolutions.</p> 48 PPQN96 PPQN120 PPQN Regular Note MIDI Ticks Dotted Note MIDI Ticks Triplet MIDI Ticks Whole Note 192 Dotted Whole 288 Whole Triplet 128 Half Note 96 Dotted Half 144 Half Triplet 64 Quarter Note 48 Dotted Quarter 72 Quarter Triplet 32 Eighth Note 24 Dotted Eighth 36 Eighth Triplet 16 16th Note 12 Dotted 16th 18 16th Triplet 8 32nd Note 6 Dotted 32nd 9 32nd Triplet 4 64th Note 3 Dotted 64th \u2014 64th Triplet 2 <p>Omitted Values</p> <p>Any omitted values are values which are not cleanly divisible by their longer-duration counterparts.</p> Regular Note MIDI Ticks Dotted Note MIDI Ticks Triplet MIDI Ticks Whole Note 384 Dotted Whole 576 Whole Triplet 256 Half Note 192 Dotted Half 288 Half Triplet 128 Quarter Note 96 Dotted Quarter 144 Quarter Triplet 64 Eighth Note 48 Dotted Eighth 72 Eighth Triplet 32 16th Note 24 Dotted 16th 36 16th Triplet 16 32nd Note 12 Dotted 32nd 18 32nd Triplet 8 64th Note 6 Dotted 64th 9 64th Triplet 4 <p>Omitted Values</p> <p>Any omitted values are values which are not cleanly divisible by their longer-duration counterparts.</p> Regular Note MIDI Ticks Dotted Note MIDI Ticks Triplet MIDI Ticks Whole Note 480 Dotted Whole 720 Whole Triplet 320 Half Note 240 Dotted Half 360 Half Triplet 160 Quarter Note 120 Dotted Quarter 180 Quarter Triplet 80 Eighth Note 60 Dotted Eighth 90 Eighth Triplet 40 16th Note 30 Dotted 16th 45 16th Triplet 20 32nd Note 15 Dotted 32nd \u2014 32nd Triplet 10 64th Note 8 Dotted 64th \u2014 64th Triplet 5 <p>Omitted Values</p> <p>Any omitted values are values which are not cleanly divisible by their longer-duration counterparts.</p> <p>To create a note division table for a PPQN or tick value not in the above tables, take the regular quarter note tick value of the desired PPQN, then:</p> <ol> <li>Use the following formula to find the longer duration note's tick values:<ul> <li>\\(n * 2\\)</li> </ul> </li> <li>Use the following formula to find the shorter duration note's tick values:<ul> <li>\\(n / 2\\)</li> </ul> </li> <li>Use the following formula to find the dotted note values:<ul> <li>\\((n / 2) + n\\)</li> </ul> </li> <li>Use the following formula to find the triplet note values:<ul> <li>\\(n - (n / 3)\\)</li> </ul> </li> </ol> <p>Where n is the value of the regular note to use. As an example, if n equals 48, then a half note would be 96, an eighth note would be 24, a dotted quarter note would be 72, and a quarter triplet would be 32.</p> <p>Nintendo 64 Native PPQN</p> <p>Sequences in Ocarina of Time and Majora's Mask have a native resolution of 48 PPQN. The default PPQN of FL Studio is 96 PPQN, and the default PPQN of Sekaiju is 120 PPQN. It is easier for a MIDI file to be converted into a sequence if it is already at the native PPQN of Ocarina of Time and Majora's Mask than to have SEQ64 convert it to 48 PPQN.</p> <p>Note Corruption</p> <p>It is recommended not to have notes shorter than a duration of 4 ticks at 48 PPQN in a sequence as notes that are too short can end up corrupting other notes in the sequence; this may cause issues with notes being dropped by a channel during playback.</p>"},{"location":"basic/overview/#seq-loop","title":"seq loop move to separate page","text":"<p>Section markers, commonly referred to as \"loop points\", placeholder.</p> <p>When SEQ64 is creating sections in a sequence it looks specifically for MIDI meta message markers with a name of \"section\" and \"loop\".</p> Section 1Section 2Loop Address <pre><code>@Addr: Data         Command\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n@0010: D7 8E DB     Initialize Channels\n@0013: 90 00 7D     Set Channel\n@0016: 91 00 F4     Set Channel\n@0019: 93 01 02     Set Channel\n@001C: 94 01 10     Set Channel\n@001F: 96 02 7F     Set Channel\n@0022: 97 02 8D     Set Channel\n@0025: 99 02 9B     Set Channel\n@0028: 9A 02 AB     Set Channel\n@002B: 9B 03 2C     Set Channel\n@002E: 9F 03 53     Set Channel\n@0031: DB 50        Set Volume (SysEx Master Volume)\n@0033: DD 64        Set Tempo\n@0035: FD 84 80     Delay [n] Frame(s)\n@0038: DD 50        Set Tempo\n@003A: FD 80 C0     Delay [n] Frame(s)\n@003D: 90 03 61     Set Channel\n@0040: 91 03 6D     Set Channel\n@0043: 93 03 80     Set Channel\n@0046: 94 04 07     Set Channel\n@0049: 96 05 E6     Set Channel\n@004C: 97 06 F1     Set Channel\n@004F: 99 07 01     Set Channel\n@0052: 9A 07 77     Set Channel\n@0055: 9B 09 48     Set Channel\n@0058: 9F 0A 04     Set Channel\n</code></pre> <pre><code>@Addr: Data         Command\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n@0010: D7 8E DB     Initialize Channels\n@0013: 90 00 7D     Set Channel\n@0016: 91 00 F4     Set Channel\n@0019: 93 01 02     Set Channel\n@001C: 94 01 10     Set Channel\n@001F: 96 02 7F     Set Channel\n@0022: 97 02 8D     Set Channel\n@0025: 99 02 9B     Set Channel\n@0028: 9A 02 AB     Set Channel\n@002B: 9B 03 2C     Set Channel\n@002E: 9F 03 53     Set Channel\n@0031: DB 50        Set Volume (SysEx Master Volume)\n@0033: DD 64        Set Tempo\n@0035: FD 84 80     Delay [n] Frame(s)\n@0038: DD 50        Set Tempo\n@003A: FD 80 C0     Delay [n] Frame(s)\n@003D: 90 03 61     Set Channel\n@0040: 91 03 6D     Set Channel\n@0043: 93 03 80     Set Channel\n@0046: 94 04 07     Set Channel\n@0049: 96 05 E6     Set Channel\n@004C: 97 06 F1     Set Channel\n@004F: 99 07 01     Set Channel\n@0052: 9A 07 77     Set Channel\n@0055: 9B 09 48     Set Channel\n@0058: 9F 0A 04     Set Channel\n</code></pre> <pre><code>@Addr: Data         Command\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n@0010: D7 8E DB     Initialize Channels\n@0013: 90 00 7D     Set Channel\n@0016: 91 00 F4     Set Channel\n@0019: 93 01 02     Set Channel\n@001C: 94 01 10     Set Channel\n@001F: 96 02 7F     Set Channel\n@0022: 97 02 8D     Set Channel\n@0025: 99 02 9B     Set Channel\n@0028: 9A 02 AB     Set Channel\n@002B: 9B 03 2C     Set Channel\n@002E: 9F 03 53     Set Channel\n@0031: DB 50        Set Volume (SysEx Master Volume)\n@0033: DD 64        Set Tempo\n@0035: FD 84 80     Delay [n] Frame(s)\n@0038: DD 50        Set Tempo\n@003A: FD 80 C0     Delay [n] Frame(s)\n@003D: 90 03 61     Set Channel\n@0040: 91 03 6D     Set Channel\n@0043: 93 03 80     Set Channel\n@0046: 94 04 07     Set Channel\n@0049: 96 05 E6     Set Channel\n@004C: 97 06 F1     Set Channel\n@004F: 99 07 01     Set Channel\n@0052: 9A 07 77     Set Channel\n@0055: 9B 09 48     Set Channel\n@0058: 9F 0A 04     Set Channel\n</code></pre>"},{"location":"basic/overview/#adding-loop-points-in-fl-studio","title":"Adding Loop Points in FL Studio","text":"<p>When working with FL Studio extra steps have to be taken as FL Studio Does not support SysEx MIDI messages or MIDI marker meta messages. The markers mentioned by FL Studio during export are FL Studio specific markers, they are not MIDI marker meta messages. There are two ways to get around this:</p> <ol> <li>Open the MIDI file in Sekaiju, or other MIDI sequencing software that supports MIDI marker meta messages. Then add a MIDI marker meta message with the name \"section\" or \"loop\".</li> <li>Insert MIDI CC#115 in MIDI channel 1. Then conver the MIDI file into a sequence using SEQ64 version 2.0 and above while \"FL Studio compatibility mode\" is enabled.</li> </ol> <p>When FL Studio compatibility mode is enabled in SEQ64 version 2.0 and above, SEQ64 will recognize MIDI CC#114 as master volume and MIDI CC#115 as a section marker. These MIDI control change messages must be placed in MIDI channel 1. For MIDI CC#115, its value must not be zero, and each section marker must have a value different than the last section marker.</p> <ol> <li> <p>Infomation found in Chapter 17.4.5: Allocating and Controlling Voices of the Nintendo 64 Programming Manual.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting-started/adv-tools/","title":"Advanced Tools and Resources","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>Procuring a ROM</p> <p>This page, as well as the wiki itself, can not and will not supply any ROM files or links to any ROM files for Ocarina of Time and Majora's Mask as it is illegal to do so. This wiki is not meant for piracy of copyrighted materials, it is meant to help those interested in creating custom music for Ocarina of Time and Majora's Mask learn the process and other details related to music creation for the games.</p> <p>This page is where download links to the advanced tools and resources used in custom music creation for Ocarina of Time and Majora's Mask are available.</p>"},{"location":"getting-started/adv-tools/#advanced-custom-music-creation-tools","title":"Advanced Custom Music Creation Tools","text":"<p>Below is a list of tools that are used for creating music for Ocarina of Time and Majora's Mask. It is recommended to download all the tools needed right now to save on needing to go back and forth between downloading and visiting the relevant wiki pages.</p>"},{"location":"getting-started/adv-tools/#links-to-advanced-tools","title":"Links to Advanced Tools","text":""},{"location":"getting-started/adv-tools/#sample-creation-tools","title":"Sample Creation Tools","text":"<ul> <li>z64audio </li> <li>ADPCM Predictor Conversion Scripts <code>xml output</code></li> <li>ADPCM Predictor Conversion Scripts <code>c output</code></li> </ul>"},{"location":"getting-started/adv-tools/#n64-soundlist-tool","title":"N64 Soundlist Tool","text":"<ul> <li>N64 Soundlist Tool </li> </ul>"},{"location":"getting-started/adv-tools/#audio-editing-tools","title":"Audio Editing Tools","text":"<ul> <li>Polyphone recommended</li> <li>Audacity </li> </ul>"},{"location":"getting-started/adv-tools/#tuning-float-calculator","title":"Tuning Float Calculator","text":"<ul> <li>Tuning Float Calculator v2024.07.07</li> </ul>"},{"location":"getting-started/adv-tools/#adsr-converter","title":"ADSR Converter","text":"<ul> <li>Z64 ADSR Converter v2024.07.07</li> </ul>"},{"location":"getting-started/adv-tools/#audiobank-templates","title":"Audiobank Templates","text":"<ul> <li>Audiobank Templates recommended</li> </ul>"},{"location":"getting-started/adv-tools/#brief-summary-of-tools","title":"Brief Summary of Tools","text":"Sample Creation ToolsN64 Soundlist ToolPolyphoneAudacityTuning Float CalculatorADSR ConverterAudiobank Templates <p>The Sample Creation Tools are required for converting <code>.wav</code> files to <code>.bin</code> (or <code>.zsound</code>) sample files and obtaining codebook and loopbook ADPCM predictor data.</p> <p>N64 Soundlist Tool is used to rip <code>.bin</code> (or <code>.zsound</code>) sample files and obtain their codebook and loopbook ADPCM predictor data \u2014 as well as other instrument, drum, and sound effect data \u2014 from Nintendo 64 games.</p> <p>Polyphone is optional, but can be used to obtain <code>.wav</code> files from <code>.sf2</code> (soundfont) files to convert into a <code>.bin</code> (<code>.zsound</code>) file with the \"Sample Creation Tools\". Polyphone can also edit <code>.wav</code> files in a few different ways, such as resampling, pitch-shifting, or setting loop points.</p> <p>Audacity is optional, but is a powerful audio editing tool. Audacity can edit audio files in many different ways, such as resampling, pitch-shifting, or trimming unneeded portions of audio.</p> <p>The Tuning Float Calculator is optional, but it can find the tuning float value for a sampled instrument, drum, or sound effect. The tuning float value for samples goes inside of an audiobank and adjusts the tuning of a sample.</p> <p>Windows Defender False Flagging</p> <p>Because the Tuning Float Calculator is an unsigned executable file, Windows Defender may false flag it as malware (<code>Trojan:Win32/Wacatac.B!ml</code>). To remedy this, follow the steps below:</p> <ol> <li>Open Windows Defender and navigate to \"Virus &amp; threat protection\".</li> <li>In \"Virus &amp; threat protection\", navigate to \"Virus &amp; threat protection settings &gt; Manage settings\".</li> <li>In \"Virus &amp; threat protection settings\", navigate to \"Exclusions &gt; Add or remove exclusions\".</li> <li>In \"Exclusions\", click the \"+ Add an exclusion\" button and locate the file or the folder the file is in to exclude.</li> </ol> <p>It is not recommended to exclude an entire folder unless everything related to Music Creation is being kept in a single folder. Whenever possible, always exclude trusted single files. The application does not contain any malicious code. If that statement is untrustworthy, then do not download it. And if it is already downloaded, then do not add a Windows Defender exclusion for it.</p> <p>The ADSR Converter is optional, but it can convert a soundfont's (<code>.sf2</code>) ADSR data into ADSR data compatible with Ocarina of Time and Majora's Mask.</p> <p>Windows Defender False Flagging</p> <p>Because the Tuning Float Calculator is an unsigned executable file, Windows Defender may false flag it as malware (<code>Trojan:Win32/Wacatac.B!ml</code>). To remedy this, follow the steps below:</p> <ol> <li>Open Windows Defender and navigate to \"Virus &amp; threat protection\".</li> <li>In \"Virus &amp; threat protection\", navigate to \"Virus &amp; threat protection settings &gt; Manage settings\".</li> <li>In \"Virus &amp; threat protection settings\", navigate to \"Exclusions &gt; Add or remove exclusions\".</li> <li>In \"Exclusions\", click the \"+ Add an exclusion\" button and locate the file or the folder the file is in to exclude.</li> </ol> <p>It is not recommended to exclude an entire folder unless everything related to Music Creation is being kept in a single folder. Whenever possible, always exclude trusted single files. The application does not contain any malicious code. If that statement is untrustworthy, then do not download it. And if it is already downloaded, then do not add a Windows Defender exclusion for it.</p> <p>The Audiobank Templates are optional, and made for the creation of sampled instruments, drums, and sound effects. SEQ64 or a text editor capable of opening and editing <code>.xml</code> files can edit the placeholder data in the template files. There are templates available for instruments, drums, or sound effects.</p> <p>Recommendation</p> <p>SEQ64 is not recommended for audiobank editing, a text editor capable of editing <code>.xml</code> files is instead recommended. There is a learning curve to editing audiobank <code>.xml</code> files. However, editing audiobanks in a text editor will bypass any bugs that SEQ64 can introduce during editing.</p>"},{"location":"getting-started/basic-tools/","title":"Basic Tools and Resources","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>Procuring a ROM</p> <p>This page, as well as the wiki itself, can not and will not supply any ROM files or links to any ROM files for Ocarina of Time and Majora's Mask as it is illegal to do so. This wiki is not meant for piracy of copyrighted materials, it is meant to help those interested in creating custom music for Ocarina of Time and Majora's Mask learn the process and other details related to music creation for the games.</p> <p>This page is where download links to the basic tools and resources used in custom music creation for Ocarina of Time and Majora's Mask are available.</p>"},{"location":"getting-started/basic-tools/#basic-custom-music-creation-tools","title":"Basic Custom Music Creation Tools","text":"<p>Below is a list of tools that are used for creating music for Ocarina of Time and Majora's Mask. It is recommended to download all the tools needed right now to save on needing to go back and forth between downloading and visiting the relevant wiki pages.</p>"},{"location":"getting-started/basic-tools/#links-to-basic-tools","title":"Links to Basic Tools","text":""},{"location":"getting-started/basic-tools/#seq64","title":"SEQ64","text":"<ul> <li>v1.0.0 required for audiobank editing</li> <li>v1.5.0 required for audiobank editing</li> <li>v2.3.2 recommended for sequence converting</li> </ul>"},{"location":"getting-started/basic-tools/#rom-description","title":"ROM Description","text":"<ul> <li>Ocarina of Time <code>ntsc-u</code> <code>ntsc-j</code> <code>v1.0</code><ul> <li>ROM Description <code>stable</code> v2024.07.20</li> <li>ROM Description <code>experimental</code> v2024.07.20</li> </ul> </li> <li>Majora's Mask <code>ntsc-u</code> <code>v1.0</code><ul> <li>ROM Description <code>stable</code> v2024.07.20</li> <li>ROM Description <code>experimental</code> v2024.07.20</li> </ul> </li> </ul>"},{"location":"getting-started/basic-tools/#seq64-abi-file","title":"SEQ64 ABI File","text":"<ul> <li>Zelda ABI \u00b12 semitone pitch bend scale</li> <li>Zelda ABI \u00b112 semitone pitch bend scale</li> </ul>"},{"location":"getting-started/basic-tools/#midi-capable-digital-audio-workstation","title":"MIDI Capable Digital Audio Workstation","text":"<ul> <li>FL Studio </li> <li>Sekaiju </li> <li>REAPER </li> </ul>"},{"location":"getting-started/basic-tools/#soundfont-files","title":"Soundfont Files","text":"<ul> <li>Ocarina of Time Soundfont v2023.11.09</li> <li>Majora's Mask Soundfont v2024.02.20</li> </ul>"},{"location":"getting-started/basic-tools/#nintendo-64-emulator","title":"Nintendo 64 Emulator","text":"<ul> <li>Simple64 recommended</li> <li>Rosalie's Mupen GUI </li> <li>ares </li> <li>Project64 </li> </ul>"},{"location":"getting-started/basic-tools/#rom-decompression-tool","title":"ROM Decompression Tool","text":"<ul> <li>nDEC</li> </ul>"},{"location":"getting-started/basic-tools/#brief-summary-of-tools","title":"Brief Summary of Tools","text":"SEQ64ROM Description &amp; ABI FilesDigital Audio WorkstationSoundfontN64 EmulatornDEC <p>SEQ64 is a tool created for making music sequences for first-party Nintendo 64 games (games made by Nintendo EAD/SRD). It is capable of converting MIDI (<code>.mid</code>), <code>.com</code>, and <code>.mus</code> files into the sequence files used in Ocarina of Time and Majora's Mask and vice versa. SEQ64 versions 1.0 and 1.5 have the ability to edit audiobank files as well. The ability to edit audiobanks is not available in version 2.0 and above.</p> <p>SEQ64 version differences</p> <p>For all intents and purposes, there are no differences in the main functionality of SEQ64 version 1.0 and version 1.5. However, SEQ64 version 1.0 has a light theme and SEQ64 version 1.5 has a dark theme.</p> <p>The ROM Description is a data file containing music sequence format definitions, audiobank binary format definitions, addresses of key files and tables, and general program settings for SEQ64 versions 1.0 and 1.5. The ROM descriptions provided with SEQ64 versions 1.0 and 1.5 are very old and contain less information as well as less accurate information. The ROM descriptions linked above are up-to-date and contain more information as well as more accurate information.</p> <p>The ABI is a data file which only contains sequence format definitions for SEQ64 version 2.0 and above.</p> <p>Digital Audio Workstations, or DAW(s) for short, are where conventional music files are created or edited. For the purposes of creating music for Ocarina of Time and Majora's Mask a DAW that is capable of creating and editing MIDI files is needed. The DAWs linked above are the most common DAWs used within the randomizer and romhacking communities.</p> <p>Sekaiju is not a DAW, it is a MIDI sequencer. It lacks many of the standard audio features a regular DAW may have as it is only intended to create and edit MIDI files.</p> <p>Soundfont(s) will allow previewing of a song with the instruments the games use when using a DAW capable of music playback with a soundfont. This allows for quick changes to the music before conversion. The soundfonts do not sound exactly like in-game instruments sound. However, they are close enough to give a good idea of how a song will sound in-game.</p> <p>An N64 Emulator is used to preview music in-game. This is to make sure there are no problems with the sequence or audiobank in-game. The emulators Simple64, Rosalie's Mupen GUI, and Project64 are all standalone, while Ares is a multi-system emulator. It is recommended to avoid RetroArch, BizHawk, and other multi-system emulators and frontends whenever possible.</p> <p>nDEC is a ROM decompression tool that decompresses ROMs so that SEQ64 can modify them. Included in the nDEC download is a batch script that makes using nDEC simple. For more detailed instructions on how to decompress a ROM with nDEC, there is a section on the ROM requirements  page of the wiki detailing the process.</p>"},{"location":"getting-started/requirements/","title":"ROM Requirements","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>Procuring a ROM</p> <p>This page, as well as the wiki itself, can not and will not supply any ROM files or links to any ROM files for Ocarina of Time and Majora's Mask as it is illegal to do so. This wiki is not meant for piracy of copyrighted materials, it is meant to help those interested in creating custom music for Ocarina of Time and Majora's Mask learn the process and other details related to music creation for the games.</p> <p>This page details the ROM requirements for ROMs of Ocarina of Time and Majora's Mask for use in creating custom music by testing sequences and audiobanks in-game to check for any errors as well as help making any adjustments to the custom music.</p>"},{"location":"getting-started/requirements/#ocarina-of-time-rom-requirements","title":"Ocarina of Time ROM Requirements","text":"<p>To be able to work with the tools required for custom music creation, the Ocarina of Time ROM will need to be any NTSC region version 1.0 ROM. NTSC region version 1.1 ROMs, NTSC region version 1.2 ROMs, and any version of PAL region ROMs will not work. The tools used to create music for Ocarina of Time only support or only have information available for NTSC region version 1.0 ROMs because the tool's developers decided on using NTSC region version 1.0 ROMs. However, for Ocarina of Time it does not matter if the ROM is NTSC-J or NTSC-U as the only difference between the NTSC-J and NTSC-U region ROMs is a toggle determining whether the language displayed should be in Japanese or English.<sup>1</sup></p> <p>To make sure the ROM is unmodified and is the correct game version, there are MD5 checksums available below to reference for both compressed and decompressed Ocarina of Time NTSC version 1.0 ROMs:</p> <p>ROM MD5 and CRC32 Checksums</p> <p>A relatively easy way to check if a ROM is correct is to go to this site  and open the ROM to check the ROM's MD5 and CRC32 checksums.</p> Compressed (NTSC-U)Decompressed (NTSC-U)Compressed (NTSC-J)Decompressed (NTSC-J) <p><code>Legend of Zelda, The - Ocarina of Time (NTSC-U) [V1.0]</code> <pre><code>CRC32: CD16C529\n  MD5: 5BD1FE107BF8106B2AB6650ABECD54D6\n</code></pre></p> <p><code>Legend of Zelda, The - Ocarina of Time (NTSC-U) [V1.0]</code> <pre><code>CRC32: B94D8AF1\n  MD5: 6F7957F08D564AE255B25D54B9EB6774\n</code></pre></p> <p><code>Zelda no Densetsu - Toki no Ocarina (NTSC-J) [V1.0]</code> <pre><code>CRC32: D423E8B0\n  MD5: 9F04C8E68534B870F707C247FA4B50FC\n</code></pre></p> <p><code>Zelda no Densetsu - Toki no Ocarina (NTSC-J) [V1.0]</code> <pre><code>CRC32: 49A3439C\n  MD5: 361F0A3BFC21289928D0F671517A6897\n</code></pre></p>"},{"location":"getting-started/requirements/#majoras-mask-rom-requirements","title":"Majora's Mask ROM Requirements","text":"<p>To be able to work with the tools required for custom music creation, the Majora's Mask ROM will need to be an NTSC-U version 1.0 ROM. NTSC-J version 1.0 ROMs, NTSC-J version 1.1 ROMs, and any version of PAL region ROMs will not work. The tools used to create music for Majora's Mask only support or have information available for NTSC-U version 1.0 because the tool's developers decided on using NTSC-U version 1.0. Unlike NTSC versions of Ocarina of Time there are multiple version differences between the NTSC versions of the game that make them vastly different (e.g., Owl Quicksaves being added to NTSC-U where they were absent from NTSC-J, or Zora Swimming physics being altered from NTSC-J to NTSC-U, etc.).<sup>2</sup></p> <p>To make sure the ROM is unmodified and is the correct game version, there are MD5 checksums available below to reference for both compressed and decompressed Majora's Mask NTSC-U version 1.0 ROMs:</p> <p>ROM MD5 Checksum</p> <p>A relatively easy way to check if a ROM is correct is to go to this site  and open the ROM to check the ROM's MD5 and CRC32 checksums.</p> Compressed (NTSC-U)Decompressed (NTSC-U) <p><code>Legend of Zelda, The - Majora's Mask (NTSC-U) [v1.0]</code> <pre><code>CRC32: B428D8A7\n  MD5: 2A0A8ACB61538235BC1094D297FB6556\n</code></pre></p> <p><code>Legend of Zelda, The - Majora's Mask (NTSC-U) [v1.0]</code> <pre><code>CRC32: 33751C40\n  MD5: 05FD2B38816173F92AB279C059FABBFB\n</code></pre></p>"},{"location":"getting-started/requirements/#rom-compression-requirements","title":"ROM Compression Requirements","text":"<p>To be able to use and edit a ROM with SEQ64 versions 1.0 and 1.5, it needs to be decompressed. If the ROM is not decompressed, then it will not be able to be used with SEQ64 to create sequences, test sequences on vanilla ROMs, or create custom audiobanks. SEQ64 cannot decompress ROMs, a different tool must be used. Any Yaz0 file compression or decompression SEQ64 versions 1.0 and 1.5 can do are only for single files, not entire ROMs.</p> <p>Info</p> <p>Sequences can still be created without a compressed ROM using SEQ64 versions 2.0 and above. However, either the Ocarina of Time randomizer or Majora's Mask randomizer must be used to test the sequences in-game. This method is not recommended as a new seed must be created to test any new changes made to the sequence.</p>"},{"location":"getting-started/requirements/#decompressing-a-rom","title":"Decompressing a ROM","text":"<p>To decompress a ROM, it is best to use the ROM decompression tool nDEC. While there are other ROM decompression tools available, nDEC is one of the few decompression tools that can properly decompress Majora's Mask. Other tools may properly decompress Ocarina of Time, but as stated previously they will not properly decompress Majora's Mask.</p> <p>nDEC</p> <p>nDEC is a tool for decompressing Nintendo 64 Zelda ROMs written in the C programming language that requires usage of the command line and must be compiled. An already compiled nDEC that includes an easy-to-use Windows batch file can be downloaded on the tools and resources  page of this wiki.</p> <p>To use nDEC and the batch file, simply follow the steps below:</p> <ol> <li>Move a compressed ROM (input ROM) of Ocarina of Time or Majora's Mask into the same folder as the nDEC executable file (<code>ndec.exe</code>) and Windows batch script file (<code>Drop Your ROM Here.bat</code>).</li> <li>Click and drag the compressed ROM (input ROM) of Ocarina of Time or Majora's Mask onto the Windows batch script file (<code>Drop Your ROM Here.bat</code>).</li> <li>Wait for nDEC to decompress the compressed ROM (input ROM) and for the command line window to close.</li> </ol> <p>Once completed, a decompressed ROM (output ROM) will have automatically been moved into a folder that shares the same name as the compressed ROM (input ROM) with the decompressed ROM (output ROM) having been renamed to \"DECOMPRESSED_ROM\".</p> <p>Alert</p> <p>For a ROM to be decompressed with nDEC it must be in the Big Endian byte order.</p>"},{"location":"getting-started/requirements/#rom-byte-order-requirements","title":"ROM Byte Order Requirements","text":"<p>While SEQ64 versions 1.0 and 1.5, as well as emulators, can work with ROMs using any byte order, for a ROM to work with nDEC it must be in the \"Big Endian\" byte order. If a ROM is in the \"Little Endian\" or \"Byteswapped\" byte order, it cannot be decompressed with nDEC. Big endian orders the bytes from MSB to LSB (e.g., <code>0x1234</code> will be <code>0x1234</code>). Little endian orders the bytes from LSB to MSB (e.g., <code>0x1234</code> will be <code>0x3412</code>). Byteswapped byte order reverses every byte (e.g., <code>0x1234</code> will be <code>0x2143</code>).</p> <p>Info</p> <p>For a ROM to work with the Ocarina of Time or Majora's Mask randomizers the ROM will need to be in the big endian byte order.</p>"},{"location":"getting-started/requirements/#checking-a-roms-byte-ordering","title":"Checking a ROM's Byte Ordering","text":"<p>There are two ways to check a ROM's byte order:</p> <ol> <li>Check the ROM's file extension.</li> <li>Open the ROM in a hex editor and reading the ROM's internal name.</li> </ol> <p>It is recommended not to check just by using a file extension, because file extensions can be changed at any point. Checking the ROM's byte order by checking the ROM's internal name is the best way to find out a ROM's byte order. However, at a glance the file extension can be useful.</p> <p>To check a ROM's byte order without relying on the file's extension, refer to the ROM's internal name as it appears in a hex editor using the information below (the internal name will be at the following address range: <code>0x00000020</code> to <code>0x0000003F</code>):</p> <p>ROM Internal Names</p> Little Endian (<code>.n64</code>)Big Endian (<code>.z64</code>)Byteswapped (<code>.v64</code>) <p>For Ocarina of Time, the ROM's internal name with little endian byte ordering will be: <pre><code>EHTEGELO DNEZ F ADL....C....ELZ\n</code></pre> For Majora's Mask, the ROM's internal name with little endian byte ordering will be: <pre><code>DLEZAM AAROJM S' KSA....N....ESZ\n</code></pre></p> <p>For Ocarina of Time, the ROM's internal name with big endian byte ordering will be: <pre><code>THE LEGEND OF ZELDA .......CZLE.\n</code></pre> For Majora's Mask, the ROM's internal name with big endian byte ordering will be: <pre><code>ZELDA MAJORA'S MASK .......NZSE.\n</code></pre></p> <p>For Ocarina of Time, the ROM's internal name with byteswapped byte ordering will be: <pre><code>HT EELEGDNO  FEZDL A......C.LZ.E\n</code></pre> For Majora's Mask, the ROM's internal name with byteswapped byte ordering will be: <pre><code>EZDL AAMOJARS'M SA K......N.SZ.E\n</code></pre></p>"},{"location":"getting-started/requirements/#changing-a-roms-byte-ordering","title":"Changing a ROM's Byte Ordering","text":"<p>If a ROM has the file extension of either <code>.n64</code> (Little Endian) or <code>.v64</code> (Bytesswapped), the byte order will need to be changed to <code>z64</code> (Big Endian) using Tool64.</p> <p>To change a ROM's byte ordering with Tool64 follow the steps below:</p> <ol> <li>Open Tool64.</li> <li>At the top of the window, click \"File &gt; Open...\".</li> <li>In the new window that appears, select the directory containing the ROM to be modified.</li> <li>Click \"OK\".</li> <li>In the main window, Select the ROM to modify the byte order of.</li> <li>Right-click and select \"Big Endian\" from the context menu.</li> </ol> <p>Warning</p> <p>Just changing the ROM's file extension will not change the ROM's byte ordering.</p> <ol> <li> <p>For a full breakdown of every difference between versions in The Legend of Zelda: Ocarina of Time, please visit The Cutting Room Floor's page  on version differences.\u00a0\u21a9</p> </li> <li> <p>For a full breakdown of every difference between versions in The Legend of Zelda: Majora's Mask, please visit The Cutting Room Floor's page  on program revisions.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting-started/seq64/","title":"Using SEQ64","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>This page goes over how to get started with SEQ64 for creating custom music in Ocarina of Time and Majora's Mask. It will give a basic rundown on the program as well as importing and converting a MIDI file into a sequence file.</p> <p>Bugs and Errors</p> <p>Please be aware that SEQ64 is an old program with many bugs, some known and others unknown. Errors and issues may be encountered when using the program when editing a ROM, ROM description, sequence file, or audiobank file.</p> <p>Info</p> <p>This page will be using SEQ64 version 1.5 and SEQ64 version 2.0 and above for images, SEQ64 version 1.0 has no dfferences from version 1.5 other than the UI style and theme of the program. Everything should be located in the same place and have all the same options for SEQ64 versions 1.0 and 1.5.</p>"},{"location":"getting-started/seq64/#loading-a-rom-and-rom-description","title":"Loading a ROM and ROM Description v1.0.0 and v1.5.0 only","text":"<p>When SEQ64 first opens everything will be blank and none of the program's fields will be populated with information. To begin working a ROM and ROM description will need to be loaded into SEQ64. The images below highlight how to load a ROM and ROM Description. It should not matter what order the ROM or ROM description are loaded in. However, it may be safest to load the ROM description first.</p> Loading a  ROMLoading a ROM Description <p></p> <p>Outline</p> <ol> <li>At the top of the window click \"ROM &gt; Load...\".</li> <li>In the file explorer window, navigate to the folder your decompressed ROM is in.</li> <li>Select your ROM and click \"Open\" in file explorer.</li> </ol> <p></p> <p>Outline</p> <ol> <li>At the top of the window click \"RomDesc &gt; Load...\".</li> <li>In the file explorer window, navigate to the folder your ROM description is in.</li> <li>Select your ROM description and click \"Open\" in file explorer.</li> </ol> <p>Info</p> <p>If the ROM has byte ordering other than Big Endian then the ROM's internal title shown in the title bar of SEQ64 will be switched around. The byte ordering SEQ64 uses can be changed. However, the ROM should be Big Endian byte ordering otherwise data may end up misaligned.</p> <p>After loading a ROM and ROM description all of the program's fields should be populated with ROM information and all the information inside of the ROM description. If the ROM description was loaded first then fields will be populated. However, not all of the fields will be populated until a ROM is also loaded.</p>"},{"location":"getting-started/seq64/#importing-a-midi-file-into-seq64","title":"Importing a MIDI File Into SEQ64","text":"<p>placeholder</p> SEQ64 v1.0.0 and v1.5.0SEQ64 v2.X.X <p></p> <p>Press the \"Import MIDI\" button to import a MIDI file to convert into a sequence. Before importing the highlighted values can be changed</p> <p>The \"Chn volume to\" dropdown determines the MIDI control change message to be converted to the channel sequence command 0xDF or \"Set Volume\".</p> <p>The \"Master volume to\" dropdown determines the MIDI control change or SysEx message to be converted to the header sequence command 0xDB or \"Set Volume (SysEX Master Volume)\".</p> <p>The \"Chn priority to\" dropdown determines the MIDI control change message to be converted to the channel sequence command 0xE9 or \"Set Note Priority\".</p> <p>The \"Create command to loop whole sequence\" checkbox determines whether or not SEQ64 will create the control flow sequence command 0xFB or \"Jump Absolute\" in the sequence and point to the correct address; if a MIDI has no marker meta message containing the text \"loop\" or \"section\" then it will point to the start of the sequence, and if a MIDI does contain marker meta messages containing the text \"loop\" or \"section\" then it will point to the first section created by SEQ64 during the MIDI to sequence conversion process.</p> <p>Fields highlighted in orange are fields that are optional fields that can change how a sequence looks when imported.</p> <p>Fields highlighted in green are fields that should not be changed, and instead be left as is.</p> <p></p> <p>Press the \"Import MIDI\" button to import a MIDI file to convert into a sequence. Before importing the highlighted values can be changed</p> <p>Fields highlighted in orange are fields that are optional fields that can change how a sequence looks when imported.</p> <p>Fields highlighted in green are fields that should not be changed, and instead be left as is.</p>"},{"location":"vanilla-reference/","title":"Index","text":""},{"location":"vanilla-reference/#vanilla-information-reference","title":"Vanilla Information Reference","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul>"},{"location":"vanilla-reference/#placeholder","title":"Placeholder","text":"<p>placeholder blurb</p> <ul> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> <li> placeholder \u2013 placeholder</li> </ul>"},{"location":"vanilla-reference/audiobanks/","title":"Audiobank Reference","text":""},{"location":"vanilla-reference/audiobanks/#audiobank-reference","title":"Audiobank Reference","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>Below is a list of every audiobank in the vanilla ROMs of Ocarina of Time and Majora's Mask, every entry contains the following information:</p> <ul> <li>Audiobank index value</li> <li>Audiobank name (Same as the ROM Description name)</li> <li>Sequences that use the audiobank</li> <li>Number of instruments within the audiobank (indicated by <code>NUM_INST</code>)</li> <li>Number of drums within the audiobank (indicated by <code>NUM_DRUM</code>)</li> <li>Number of sound effects within the audiobank (indicated by <code>NUM_SFX</code>)</li> <li>Audiotable the audiobank uses (indicated by <code>ATnum</code>)</li> <li>Instrument list, drum list, and sound effect list (if there are no drums or sound effects there will be no list)</li> <li>MIDI program numbers you can use to access the instruments, drums, or sound effects</li> <li>MIDI note ranges for the different drum samples within the percussion kits</li> </ul> <p>Index Number to Note Number</p> <p>For instruments the pointer index value is equivalent to the program number, however, for drums &amp; sound effects the pointer index value is equivalent to the MIDI note number minus <code>21</code>.</p> <p>MIDI Notation</p> <p>All notes (e.g. <code>C5 (60)</code>) are using MIDI notation, they are not using piano notation. Using piano notation, the equivalent to MIDI note <code>60</code> would be <code>C4</code> instead of <code>C5</code>.</p> Ocarina of Time AudiobanksMajora's Mask AudiobanksWaveform Instruments <p>Instrument Names</p> <p>Some instruments are named after the closest instrument known by the community, though some are named after the name of the sample that was used to create the instrument (e.g. Shine, Fantasia, Spaceosphere, Enigmatic).</p> Audiobank 0x00 (SFX Bank) <p>Audiobank <code>0x00</code> is the first of the two main SFX audiobanks. It is mostly guesswork for what most of the sound effects are as mapping them out is done completely by listening to the samples themselves in N64 Soundlist Tool (for which many samples are pitched up or down in-game, so the pitches are \"off\" when being played back) and figuring out what sound is used where in the game.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x00: Master Sequence</code></li> <li><code>0x44: Ocarina Song: \"Saria's Song\"</code></li> <li><code>0x45: Ocarina Song: \"Epona's Song\"</code></li> <li><code>0x46: Ocarina Song: \"Zelda's Lullaby\"</code></li> <li><code>0x47: Ocarina Song: \"Sun's Song\"</code></li> <li><code>0x48: Ocarina Song: \"Song of Time\"</code></li> <li><code>0x49: Ocarina Song: \"Song of Storms\"</code></li> <li><code>0x6D: Unknown Technical Sequence</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 92</code></li> <li><code>NUM_DRUM: 4</code></li> <li><code>NUM_SFX: 136</code></li> <li><code>ATnum: 0</code></li> </ul> Audiobank 0x01 (Actor Sounds) <p>Audiobank <code>0x01</code> is the second of the two main sound effect audiobanks. It is mostly guesswork for what most of the sound effects are as mapping them out is done completely by listening to the samples themselves in N64 Soundlist Tool (for which many samples are pitched up or down in-game, so the pitches are \"off\" when being played back) and figuring out what sound is used where in the game.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x00: Master Sequence</code></li> <li><code>0x6D: Unknown Technical Sequence</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 51</code></li> <li><code>NUM_DRUM: 1</code></li> <li><code>NUM_SFX: 41</code></li> <li><code>ATnum: 0</code></li> </ul> Audiobank 0x02 (Ambient Sounds) <p>Audiobank <code>0x02</code> is used pretty much for basically every ambient sound effect in the game. It is mostly guesswork for what most of the sound effects are as mapping them out is done completely by listening to the samples themselves in N64 Soundlist Tool (for which many samples are pitched up or down in-game, so the pitches are \"off\" when being played back) and figuring out what sound is used where in the game.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x01: Nature Ambience</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 21</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 0</code></li> </ul> Audiobank 0x03 (Main Orchestra) <p>Audiobank <code>0x03</code> is one of the largest regular audiobanks which makes it the best candidate to overwrite when making a custom audiobank.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x02: Hyrule Field (Master)</code></li> <li><code>0x03: Hyrule Field (Day 1 - GG - Opening)</code></li> <li><code>0x04: Hyrule Field (Day 2 - GF - Trumpets 1)</code></li> <li><code>0x05: Hyrule Field (Day 3 - GF - Trumpets 2)</code></li> <li><code>0x06: Hyrule Field (Day 4 - GFEb - Clarinets)</code></li> <li><code>0x07: Hyrule Field (Day 5 - GCB - Strings, Pizz. Strings)</code></li> <li><code>0x08: Hyrule Field (Day 6 - GFEm - OoT Theme)</code></li> <li><code>0x09: Hyrule Field (Day 7 - CD - French Horns)</code></li> <li><code>0x0A: Hyrule Field (Day 8 - CD - Strings)</code></li> <li><code>0x0B: Hyrule Field (Day 9 - GG - French Horns)</code></li> <li><code>0x0C: Hyrule Field (Day 10 - GBbDb - French Horns)</code></li> <li><code>0x0D: Hyrule Field (Day 11 - AbCF - French Horns)</code></li> <li><code>0x0E: Hyrule Field (Day 12 - GG - Neutral Opening)</code></li> <li><code>0x0F: Hyrule Field (Battle 1 - OoT Theme Deconstruction)</code></li> <li><code>0x10: Hyrule Field (Battle 2 - Brass)</code></li> <li><code>0x11: Hyrule Field (Battle 3 - Brass, Marimba)</code></li> <li><code>0x12: Hyrule Field (Battle 4 - Stabs, OoT Theme)</code></li> <li><code>0x13: Hyrule Field (Battle 5 - Stabs, Ocarina)</code></li> <li><code>0x14: Hyrule Field (Sunset 1 - Oboe)</code></li> <li><code>0x15: Hyrule Field (Sunset 2 - Piccolo)</code></li> <li><code>0x16: Hyrule Field (Sunset 3 - Strings)</code></li> <li><code>0x17: Hyrule Field (Sunset 4 - OoT Theme)</code></li> <li><code>0x19: Kakariko Village (Strings, Adult) [2]</code></li> <li><code>0x1A: Battle: Regular Enemy</code></li> <li><code>0x1B: Battle: Boss [1]</code></li> <li><code>0x1F: Inside a House</code></li> <li><code>0x21: Fanfare: Boss Defeated!</code></li> <li><code>0x23: Fanfare: Ganondorf Appears!</code></li> <li><code>0x2B: Fanfare: Open a Treasure Chest!</code></li> <li><code>0x2D: Castle Courtyard</code></li> <li><code>0x31: Hyrule Field (Morning, Day 1)</code></li> <li><code>0x32: Fanfare: Get a Spiritual Stone!</code></li> <li><code>0x38: Battle: Miniboss</code></li> <li><code>0x3B: Fanfare: Escape from Lon Lon Ranch!</code></li> <li><code>0x43: Fanfare: Get a Medallion!</code></li> <li><code>0x4A: Intro Cutscene ~Fairy Flying~</code></li> <li><code>0x51: Fanfare: A Meeting with Zelda! (Generic Reunion Theme)</code></li> <li><code>0x52: Zelda's Theme ~Reprise~</code></li> <li><code>0x53: Fanfare: Pull the Master Sword!</code></li> <li><code>0x54: Ganondorf's Theme</code></li> <li><code>0x62: Castle Collapsing</code></li> <li><code>0x6C: Timed Minigame</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x04 (Deku Tree) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x1C: Inside the Deku Tree &amp; Secret Grottos</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 2</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 2</code></li> </ul> Audiobank 0x05 (Hylian Troupe) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x1D: Hyrule Castle Town</code></li> <li><code>0x3E: Lost Woods</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x06 (Title Screen) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x1E: Title Screen</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x07 (Jabu-Jabu's Belly) <p>Audiobank <code>0x06</code> is a bit of a special audiobank, it uses a different audiotable than other audiobanks and the offsets reference data later in the audiotable causing the ADPCM data for their samples to be split; however, <code>SEQ64</code> will automatically update their sample location upon importing.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x26: Jabu-Jabu's Belly</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 3</code></li> </ul> Audiobank 0x08 (Kakariko Village (Guitar)) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x27: Kakariko Village (Guitar, Child) [1]</code></li> <li><code>0x4C: Windmill Hut</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x09 (Harp &amp; Strings) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x28: Great Fairy's Fountain</code></li> <li><code>0x29: Zelda's Theme</code></li> <li><code>0x3A: Temple of Time</code></li> <li><code>0x3D: Fanfare: Learned a Song!</code></li> <li><code>0x4B: Deku Tree's Theme</code></li> <li><code>0x4F: Sheik's Theme</code></li> <li><code>0x57: Ptr to Great Fairy's Fountain (File Select)</code></li> <li><code>0x66: Ending Cutscene ~Ocarina of Time~</code></li> <li><code>0x6A: End Credits &amp; Staff Roll [4]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0A (Fire Temple) <p>This audiobank entry contains data not only for Ocarina of Time version <code>1.0</code>, but also version <code>1.2</code> of the game where the chants have been \"removed\" (the sequence has been changed, and the audiobank expanded instead of actually removing the data [needs confirmation]).</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2A: Fire Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> <p>Version Difference</p> <p>Version <code>1.2</code> has <code>14</code> instruments for the <code>NUM_INST</code> variable instead of <code>10</code>; the audiobank was expanded in subsequent versions of the game. [needs confirmation]</p> Audiobank 0x0B (Dodongo's Cavern) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x18: Dodongo's Cavern</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 4</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0C (Forest Temple) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2C: Forest Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 3</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0D (Lon Lon Ranch) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2F: Lon Lon Ranch</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0E (Goron City) <p>Audiobank <code>0x0E</code> is a bit of a special audiobank, it uses a different audiotable than other audiobanks and the offsets reference data later in the audiotable causing the ADPCM data for their samples to be split; however, <code>SEQ64</code> will automatically update their sample location upon importing.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x30: Goron City</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 5</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 5</code></li> </ul> Audiobank 0x0F (Kokiri Forest) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x3C: Kokiri Forest</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x10 (Spirit Temple) <p>Audiobank <code>0x10</code> is a bit of a special audiobank, it uses a different audiotable than other audiobanks and the offsets reference data later in the audiotable causing the ADPCM data for their samples to be split; however, <code>SEQ64</code> will automatically update their sample location upon importing.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x3F: Spirit Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 6</code></li> </ul> Audiobank 0x11 (Horse Race) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x40: Horse Race</code></li> <li><code>0x41: Fanfare: Horse Race Victory!</code></li> <li><code>0x42: Ingo's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x12 (Warp Songs) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x25: Warp Song: \"Prelude of Light\"</code></li> <li><code>0x33: Warp Song: \"Bolero of Fire\"</code></li> <li><code>0x34: Warp Song: \"Minuet of Forest\"</code></li> <li><code>0x35: Warp Song: \"Serenade of Water\"</code></li> <li><code>0x36: Warp Song: \"Requiem of Spirit\"</code></li> <li><code>0x37: Warp Song: \"Nocturne of Shadow\"</code></li> <li><code>0x59: Fanfare: Open the Door of Time!</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x13 (Chamber of the Sages) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x4D: Chamber of the Sages</code></li> <li><code>0x56: Legend of Hyrule (Short Version)</code></li> <li><code>0x5D: Fanfare: Bridge of the Six Sages!</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 4</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x14 (Minigame Shop) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x4E: Minigame Shop</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x15 (Zora's Domain) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x50: Zora's Domain</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x16 (Item Shop) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x55: Item Shop</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 11</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x17 (Ice Cavern) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x58: Ice Cavern</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 4</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x18 (Shadow Temple) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x5B: Shadow Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 9</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x19 (Water Temple) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x5C: Water Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 8</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1A (Piano (Unused)) <p>This audiobank is not used anywhere in-game.</p> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1B (Gerudo Valley) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x5F: Gerudo Valley</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 12</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1C (Potion Shop) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x60: Potion Shop</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 5</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1D (Koume &amp; Kotake's Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x61: Koume &amp; Kotake's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 12</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1E (Ganondorf's Organ) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2E: Ganon's Tower</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 5</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1F (Inside Ganon's Castle) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x63: Inside Ganon's Castle</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 8</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x20 (Adversarial Orchestra) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x5E: Fanfare: Seal of the Six Sages!</code></li> <li><code>0x64: Battle: Great Evil King, Ganondorf</code></li> <li><code>0x65: Battle: Ganon</code></li> <li><code>0x6B: Battle: Boss [2]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x21 (Ending Orchestra [1]) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x67: End Credits &amp; Staff Roll [1]</code></li> <li><code>0x69: End Credits &amp; Staff Roll [3]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x22 (Ending Orchestra [2]) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x68: End Credits &amp; Staff Roll [2]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x23 (Fanfare Orchestra) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x20: Fanfare: Game Over!</code></li> <li><code>0x22: Fanfare: Get an Item!</code></li> <li><code>0x24: Fanfare: Get a Heart Container!</code></li> <li><code>0x39: Fanfare: Get a Heart Piece!</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x24 (Kaepora Gaebora's Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x5A: Kaepora Gaebora's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x25 (Unused Bank) <p>Audiobank <code>0x25</code> only contains instruments with bad pointers and broken samples. This audiobank is not used anywhere in-game, it is most likely leftover data from the development cycle; however, since it is unused that means it can be used for anything. Do not import the instruments from this audiobank, they will only place garbage data.</p> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 2</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 0</code></li> </ul> <p>Instrument Names</p> <p>Some instruments are named after the closest instrument known by the community, though some are named after the name of the sample that was used to create the instrument (e.g. ELVES, PIT HIT 1, OMINOUSITY, EERIE WIND, TUNNEL RAIN, Mystic Pad, ICELAND 1, Fantasia, DANGER).</p> Audiobank 0x00 (SFX Bank) <p>Audiobank <code>0x00</code> is the first of the two main sound effect audiobanks. It is mostly guesswork for what most of the sound effects are as mapping them out is done completely by listening to the samples themselves in N64 Soundlist Tool (for which many samples are pitched up or down in-game, so the pitches are \"off\" when being played back) and figuring out what sound is used where in the game.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x00: Master Sequence</code></li> <li><code>0x32: Ocarina Song: \"Epona's Song\"</code></li> <li><code>0x33: Ocarina Song: \"Sun's Song\"</code></li> <li><code>0x34: Ocarina Song: \"Song of Time\"</code></li> <li><code>0x35: Ocarina Song: \"Song of Storms\"</code></li> <li><code>0x47: Ocarina Song: \"Song of Soaring\"</code></li> <li><code>0x48: Ocarina Song: \"Song of Healing\"</code></li> <li><code>0x49: Ocarina Song: \"Song of Inverted Time\"</code></li> <li><code>0x4A: Ocarina Song: \"Song of Double Time\"</code></li> <li><code>0x51: Ocarina Song: \"Lullaby Intro\"</code></li> <li><code>0x5A: Don Gero's Theme (\"Frog Acapella\")</code></li> <li><code>0x5B: Ocarina Song: \"Sonata of Awakening\"</code></li> <li><code>0x5C: Ocarina Song: \"Goron Lullaby\"</code></li> <li><code>0x5D: Ocarina Song: \"New Wave Bossa Nova\"</code></li> <li><code>0x5E: Ocarina Song: \"Elegy of Emptiness\"</code></li> <li><code>0x5F: Ocarina Song: \"Oath to Order\"</code></li> <li><code>0x61: Ptr to Ocarina Song: \"Lullaby Intro\"</code></li> <li><code>0x7A: Music Box House (Silence)?</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 122</code></li> <li><code>NUM_DRUM: 16</code></li> <li><code>NUM_SFX: 197</code></li> <li><code>ATnum: 0</code></li> </ul> Audiobank 0x01 (Actor Sounds) <p>Audiobank <code>0x01</code> is the second of the two main sound effect audiobanks. It is mostly guesswork for what most of the sound effects are as mapping them out is done completely by listening to the samples themselves in N64 Soundlist Tool (for which many samples are pitched up or down in-game, so the pitches are \"off\" when being played back) and figuring out what sound is used where in the game.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x00: Master Sequence</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 126</code></li> <li><code>NUM_DRUM: 1</code></li> <li><code>NUM_SFX: 88</code></li> <li><code>ATnum: 0</code></li> </ul> Audiobank 0x02 (Ambient Sounds) <p>Audiobank <code>0x02</code> is used pretty much for basically every ambient sound effect in the game. It is mostly guesswork for what most of the sound effects are as mapping them out is done completely by listening to the samples themselves in N64 Soundlist Tool (for which many samples are pitched up or down in-game, so the pitches are \"off\" when being played back) and figuring out what sound is used where in the game.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x01: Nature Ambience</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 21</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 0</code></li> </ul> <p>Info</p> <p>This audiobank has no drums or sound effects.</p> Audiobank 0x03 (Main Orchestra) <p>Audiobank <code>0x03</code> is one of the largest regular audiobanks which makes it the best candidate to overwrite when making a custom audiobank.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x02: Termina Field</code></li> <li><code>0x03: Pursuit Theme</code></li> <li><code>0x08: Fanfare: Event Failure [1]</code></li> <li><code>0x09: Fanfare: Event Failure [2]</code></li> <li><code>0x0F: Sharp's Curse: \"Melody of Darkness\"</code></li> <li><code>0x14: Pirates' Fortress</code></li> <li><code>0x19: Fanfare: Event Success!</code></li> <li><code>0x1A: Battle: Regular Enemy</code></li> <li><code>0x1B: Battle: Dungeon Boss</code></li> <li><code>0x1D: Termina Field Morning Theme</code></li> <li><code>0x1F: Inside a House</code></li> <li><code>0x21: Fanfare: Boss Defeated!</code></li> <li><code>0x25: Timed Minigame</code></li> <li><code>0x2B: Fanfare: Open a Treasure Chest!</code></li> <li><code>0x31: Mayor Dotour's Office</code></li> <li><code>0x38: Battle: Miniboss</code></li> <li><code>0x3D: Fanfare: The Truth Revealed</code></li> <li><code>0x75: Intro Cutscene: ~Lost in a Dark Wood~ [2]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x04 (Woods of Mystery) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x3E: Woods of Mystery</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x05 (Music Box House &amp; Guru-Guru) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x0E: Old Koume's Boat Cruise</code></li> <li><code>0x27: Music Box House: \"Farewell to Gibdo\"</code></li> <li><code>0x2E: Guru-Guru's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x06 (Fairy's Fountain) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x18: File Select</code></li> <li><code>0x28: Ptr to File Select</code></li> <li><code>0x29: Zelda's Theme</code></li> <li><code>0x52: Fanfare: Learned a Song!</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x07 (Romani Ranch) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2F: Romani Ranch</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x08 (Gorman Brothers' Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x40: Horse Race</code></li> <li><code>0x41: Fanfare: Horse Race Victory!</code></li> <li><code>0x42: Gorman Brothers' Theme</code></li> <li><code>0x72: Cremia's Carriage</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x09 (Bremen March) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x53: Bremen March</code></li> <li><code>0x55: Song of Soaring</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0A (Minigame Shop) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x46: Minigame Shop Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0B (Zora Hall) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x36: Zora Hall</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0C (Item Shop) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x44: Item Shop</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 11</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0D (Curiosity Shop) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2C: Marine Research Lab &amp; Curiosity Shop</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 5</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0E (Koume &amp; Kotake's Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x43: Koume &amp; Kotake's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 12</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x0F (Fanfare Orchestra) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x20: Fanfare: Game Over!</code></li> <li><code>0x22: Fanfare: Get an Item!</code></li> <li><code>0x24: Fanfare: Get a Heart Container!</code></li> <li><code>0x37: Fanfare: Get a Mask!</code></li> <li><code>0x39: Fanfare: Get a Heart Piece!</code></li> <li><code>0x77: Fanfare: Temple Appears!</code></li> <li><code>0x78: Fanfare: Temple Clear! (Short) [1]</code></li> <li><code>0x79: Fanfare: Temple Clear! (Long) [2]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x10 (Kaepora Gaebora's Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x45: Kaepora Gaebora's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x11 (Skull Kid's Band) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x04: Majora's Theme</code></li> <li><code>0x1E: Intro Cutscene ~Lost in a Dark Wood~ [1]</code></li> <li><code>0x69: Battle: Majora's Wrath</code></li> <li><code>0x6A: Battle: Majora's Incarnation</code></li> <li><code>0x6B: Battle: Majora's Mask</code></li> <li><code>0x7B: The Moon Enraged</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x12 (Giants' Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2D: Giants' Theme</code></li> <li><code>0x4B: Sonata of Awakening</code></li> <li><code>0x4C: Goron Lullaby</code></li> <li><code>0x4E: Elegy of Emptiness</code></li> <li><code>0x4F: Oath to Order</code></li> <li><code>0x54: Milk Bar Band: \"Ballad of the Wind Fish\"</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x13 (The Indigo-Gos) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x4D: New Wave Bossa Nova (Lulu's Voice Returns) [1]</code></li> <li><code>0x58: Mikau's Cry (Song Loop) [1]</code></li> <li><code>0x59: Mikau's Cry (Song Ends) [2]</code></li> <li><code>0x62: Song-Writing: Jam Session with Japas</code></li> <li><code>0x63: Song-Writing: Evan's Piano Solo</code></li> <li><code>0x64: Song-Writing: The Indigo-Gos Rehearsal</code></li> <li><code>0x67: New Wave Bossa Nova (Zora Eggs Hatch) [2]</code></li> <li><code>0x68: New Wave Bossa Nova (Lulu's Voice Returns) [3]</code></li> <li><code>0x6C: Band-Practice: Japas' Bass (Zelda 1 \"Dungeon\")</code></li> <li><code>0x6D: Band-Practice: Tijo's Drum (ALttP \"Cave\")</code></li> <li><code>0x6E: Band-Practice: Evan's Piano (Zelda 1 \"Continue?\")</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x14 (Woodfall Temple) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x1C: Woodfall Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 6</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x15 (Snowhead Temple) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x13: Snowhead</code></li> <li><code>0x65: Snowhead Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 13</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x16 (Aliens &amp; Great Bay Temple) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x0D: Aliens' Theme</code></li> <li><code>0x66: Great Bay Temple</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 8</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x17 (Astral Observatory &amp; Final Hours) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x05: Clock Tower</code></li> <li><code>0x0B: Song of Healing</code></li> <li><code>0x3A: Astral Observatory</code></li> <li><code>0x57: Final Hours</code></li> <li><code>0x60: Ptr to Final Hours</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 14</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x18 (Swordsman's School) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x50: Swordsman's School</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 11</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x19 (Termina Troupe) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x06: Stone Tower Temple</code></li> <li><code>0x07: Stone Tower Temple (Inverted)</code></li> <li><code>0x12: Deku palace</code></li> <li><code>0x15: Clock Town (Day 1)</code></li> <li><code>0x16: Clock Town (Day 2)</code></li> <li><code>0x17: Clock Town (Day 3)</code></li> <li><code>0x23: Ptr to Clock Town (Day 2)</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1A (Cave) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x06: Inside a Cave</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 4</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1B (Happy Mask Salesman) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x0A: Happy Mask Salesman's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 10</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1C (Southern Swamp) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x0C: Southern Swamp</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 12</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1D (Great Bay Coast) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x10: Great Bay Coast</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 11</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1E (Ikana Canyon) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x11: Ikana Canyon</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 9</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x1F (Rosa Sisters) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x2A: Rosa Sisters' Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 8</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x20 (Milk Bar) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x3C: Milk Bar</code></li> <li><code>0x56: Ptr to Milk Bar</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x21 (Epic Orchestra) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x6F: Ancient Castle of Ikana</code></li> <li><code>0x70: Giants' Theme</code></li> <li><code>0x7C: The Giants' Farewell</code></li> <li><code>0x7D: Tatl &amp; Tael Reunited (Generic Reunited Theme)</code></li> <li><code>0x7E: The Moon Destroyed</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x22 (Kamaro's Theme) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x71: Kamaro's Theme</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 1</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x23 (Title Screen) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x76: Title Screen</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 16</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x24 (Ending Orchestra [1]) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x74: End Credits &amp; Staff Roll [1]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x25 (Ending Orchestra [2]) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x7F: End Credits &amp; Staff Roll [2]</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 15</code></li> <li><code>NUM_DRUM: 64</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x26 (Goron's Theme) <p>Audiobank <code>0x26</code> is a bit of a special audiobank, it uses a different audiotable than other audiobanks and the offsets reference data later in the audiotable causing the ADPCM data for their samples to be split; however, <code>SEQ64</code> will automatically update their sample location upon importing.</p> <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x26: Goron Race</code></li> <li><code>0x30: Goron Village</code></li> <li><code>0x3F: Fanfare: Goron Race Victory!</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 5</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 2</code></li> </ul> Audiobank 0x27 (Keaton's Quiz) <p>Sequences that use this audiobank are listed below:</p> <ul> <li><code>0x73: Keaton's Quiz</code></li> </ul> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 8</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 1</code></li> </ul> Audiobank 0x28 (Unused Bank) <p>Audiobank <code>0x28</code> only contains instruments with bad pointers and broken samples. This audiobank is not used anywhere in-game, it is most likely leftover data from the development cycle; however, since it is unused that means it can be used for anything. Do not import the instruments from this audiobank, they will only place garbage data.</p> <p>The number of instruments, drum, and sound effects, as well as the audiotable the audiobank uses, are listed below:</p> <ul> <li><code>NUM_INST: 5</code></li> <li><code>NUM_DRUM: 0</code></li> <li><code>NUM_SFX: 0</code></li> <li><code>ATnum: 0</code></li> </ul> <p>The waveform instruments are a collection of synth waves available at all times for all audiobanks. These instruments cannot be assigned using a MIDI program change message as their instrument change command assignment values go over the 7 bit data value limit of MIDI; their instrument change command assignment values go from 128 (0x80) to 135 (0x87), so they must be assigned inside a sequence. These instruments' instrument change command assignments can be overwritten as audiobank instruments have priority for the instrument change command.</p> <p>Instrument 0x88 and Above</p> <p>Waveform instrument change command assignment values 0x88 and above are not true instruments with true sample data like waveforms 0x80 to 0x87, they instead take compiled assembly code and interpret that as if it were real sample data. The starting address uses the audio thread and adds a random offset between <code>0x0000</code> and <code>0xFFF0</code> and interprets it as sample data; this is volatile and may cause issues, so it is recommended to avoid using 0x88 and above when no audiobank instrument is assigned to those values.</p> <p>List of Waveforms: <pre><code>0x80. Sawtooth Wave\n0x81. Triangle Wave\n0x82. Sine Wave\n0x83. Square Wave\n0x84. White Noise\n0x85. D_801D4790\n0x86. Pulse Wave (Duty Cycle: 12.5%)\n0x87. Pulse Wave (Duty Cycle: 25%)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-number-0x00-to-0x5b","title":"Instruments (Program Number: 0x00 to 0x5B)","text":"<p>Below is a list of the \"instruments\" inside of audiobank <code>0x00</code>. These work exactly as regular instruments do, you can even import them into a custom audiobank as an instrument and use it in a sequence just like any regular instrument; and this is a common structure for the sound effects within the game.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x5B (91)</code></p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Some sound effects using the instrument structure have multiple samples, the sound effects using multiple samples indicate which region contains which sound effect sample (e.g. <code>0x00: Low: SFX name, Mid: SFX Name, High: SFX Name</code>). Any sound effects without multiple regions use the mid (primary) sample.</p> <p>Instrument List: <pre><code>0x00. Dirt Footstep SFX?\n0x01. Sand Footstep SFX?\n0x02. Stone Footstep SFX\n0x03. Water Footstep SFX\n0x04. Splash Footstep SFX\n0x05. Unknown SFX (Rock?)\n0x06. Unknown SFX (Footstep?)\n0x07. Grass Footstep SFX\n0x08. Chest reveal SFX, Others?\n0x09. Snow Footstep SFX?\n0x0A. Unknown SFX (Rock related?)\n0x0B. Unknown SFX (Footstep?)\n0x0C. Splash SFX 1\n0x0D. Splash SFX 2\n0x0E. Unknown Sand SFX (Quicksand?)\n0x0F. Mid: Egg Hatch SFX 1, High: Wind SFX\n0x10. Unknown SFX (Sand?)\n0x11. Unknown White Noise SFX 1\n0x12. Unknown White Noise SFX 2\n0x13. Splash SFX 3\n0x14. Swimming SFX\n0x15. Mid: Drum SFX?, High: Gunshot SFX\n0x16. Footstep SFX?\n0x17. Footstep SFX ?\n0x18. Iron Boot Footstep SFX\n0x19. Hover Boot/Ice Footstep SFX\n0x1A. Mid: Sword Clink SFX 1, High: Sword Clink SFX 2\n0x1B. Scratch SFX?\n0x1C. Link Sword Sheathe SFX\n0x1D. Link Sword Unsheathe SFX\n0x1E. Whoosh SFX\n0x1F. Unknown SFX\n0x20. Metal Clang SFX\n0x21. Mid: Bow Draw SFX, High: Bow Twang SFX\n0x22. Mid: Hookshot Chain SFX\n0x23. Mid: Bombchu Fuse SFX, High: Bombchu Moving SFX\n0x24. Megaton Hammer SFX (MM Bank Stamp)\n0x25. Like Like SFX?\n0x26. Arrow Hitting Wood/Kakariko Child Hammer SFX\n0x27. Whoosh SFX 2 (Boomerang?)\n0x28. Unknown SFX (Rock related?)\n0x29. Mid: Pop SFX, High: Cursor SFX?\n0x2A. Robotic Buzzing SFX\n0x2B. Mid: Unknown SFX (A Thud Sound?)\n0x2C. Mid: Lens of Truth SFX, High: Whoosh SFX 3\n0x2D. Mid: Wooden Door Open SFX, High: Wooden Door Close SFX\n0x2E. Mid: Blue Warp SFX?, High: Squeaking SFX?\n0x2F. Explosion SFX\n0x30. Horse Gallop SFX\n0x32. Mid: Horse Whinny SFX, High: Horse Snort SFX\n0x31. \u26d4 (nullptr)\n0x33. Mid: Running Water SFX, High: White Noise SFX 1 (Waterfall)\n0x34. Ocarina SFX 1 (Special Effect)\n0x35. Ocarina SFX 2\n0x36. Mid: Stone Moving on Stone SFX, High: Metal Door Closing SFX\n0x37. Rock Rolling SFX?\n0x38. Mid: Lava Bubbling SFX\n0x39. Chain Pulley SFX (Hyrule Castle Gate)\n0x3A. Mid: Chicken Cluck SFX, High: Frog Ribbit SFX\n0x3B. Door Thud SFX\n0x3C. Wind SFX\n0x3D. Mid: Rooster Crow SFX, High: Wolf Howl SFX\n0x3E. Light Splash SFX (Fish?)\n0x3F. Mid: Wooden Clack SFX, High: Stick Clack SFX\n0x40. Fairy Flying SFX 1? (Fairy Related)\n0x41. Unknown SFX\n0x42. Mid: Door Creak SFX, High: Door Creak Low SFX\n0x43. Unknown SFX\n0x44. Glass Hum SFX\n0x45. Fairy Flying SFX 2? (Fairy Related)\n0x46. Mid: Electric SFX (Barinade?), High: Pot Break SFX\n0x47. Water Drip SFX\n0x48. Water Bubbling SFX (Morpha Cutscene?)\n0x49. Mid: Fire Crackle SFX, High: Cow Moo SFX\n0x4A. Mid: Balloon Inflate SFX, High: Thunder SFX\n0x4B. Unknown SFX\n0x4C. Unknown SFX (Pop? Bang? Thud?)\n0x4D. Mid: Wind SFX?, High: Revving SFX\n0x4E. Mid: Cloth Flutter SFX\n0x4F. Mid: Castle Town Crowd SFX, High: Glass Shatter SFX (Ice?)\n0x50. Scratch SFX 2?\n0x51. Mid: Dodongo Roar SFX, High: Dog Bark SFX\n0x52. Woodwind Noise SFX\n0x53. Accordion Noise SFX\n0x54. Piano/Harp Noise SFX 1\n0x55. Malon Voice SFX\n0x56. Whistle Noise SFX?\n0x57. Mid: Wrong Note SFX, High: Unknown Metal Sound SFX\n0x58. Bird Chirp SFX\n0x59. Piano/Harp Noise SFX 2\n0x5A. Mid: Camera Alignment SFX, High: Lock-on SFX\n0x5B. Metal Chain SFX\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#sound-effects-program-number-7e","title":"Sound Effects (Program Number: 7E)","text":"<p>Below is a list of the \"sound effects\" inside of audiobank <code>0x00</code>. These work nearly identical to how percussion sets work except for how they are structured, they cannot be imported into audiobanks because their structure is built directly into a pointer array within <code>&lt;absfxlist&gt;</code>.</p> <p>You can access these sound effects when using this audiobank using MIDI program number(s): <code>0x7E (126)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Sound effects can only have one sample per sound effect, but some sound effect indexes point to the same sample in the audiobank. The indexes that use the same sample as another index are marked: <code>[Same sample as (index value)]</code></p> <p>Sound Effect List: <pre><code>0x00. Adult Link (Attack 1)\n0x01. Adult Link (Attack 2)\n0x02. Adult Link (Attack 3)\n0x03. Adult Link (Attack 4)\n0x04. Adult Link (Attack 5)\n0x05. Adult Link (Attack 6)\n0x06. Adult Link (Ledge 1)\n0x07. Adult Link (Ledge 2)\n0x08. Adult Link (Ledge 3)\n0x09. Adult Link (Damage 1)\n0x0A. Adult Link (Damage 2)\n0x0B. Adult Link (Damage 3)\n0x0C. Adult Link (Damage 4)\n0x0D. Adult Link (Damage 5)\n0x0E. Adult Link (Damage 6)\n0x0F. Adult Link (Scream 1)\n0x10. Adult Link (Scream 2)\n0x11. Adult Link (Gasp 1)\n0x12. Adult Link (Gasp 2)\n0x13. Adult Link (Critical 1)\n0x14. Young Link (Death 1)\n0x15. Adult Link (\"Hyah!\")\n0x16. Adult Link (\"Hey!\")\n0x17. Adult Link (Critical 2)\n0x18. Adult Link (Fall Damage)\n0x19. Adult Link (Ledge 4)\n0x1A. Adult Link (Jump 1)\n0x1B. Adult Link (Jump 2)\n0x1C. Young Link (Attack 1)\n0x1D. Young Link (Attack 2)\n0x1E. Young Link (Attack 3)\n0x1F. Young Link (Attack 4)\n0x20. Young Link (Attack 5)\n0x21. Young Link (Attack 6)\n0x22. Young Link (Ledge 1)\n0x23. Young Link (Ledge 2)\n0x24. Young Link (Ledge 3)\n0x25. Young Link (Damage 1)\n0x26. Young Link (Damage 2)\n0x27. Young Link (Damage 3)\n0x28. Young Link (Damage 4)\n0x29. Young Link (Damage 5)\n0x2A. Young Link (Damage 6)\n0x2B. Young Link (Scream 1)\n0x2C. Young Link (Scream 2)\n0x2D. Young Link (Gasp 1)\n0x2E. Young Link (Gasp 2)\n0x2F. Young Link (Critical 1)\n0x30. Young Link (Critical 2)\n0x31. Young Link (Fall Damage)\n0x32. Young Link (Ledge 4)\n0x33. Young Link (Drink 1)\n0x34. Young Link (Drink 2)\n0x35. Young Link (Jump 1)\n0x36. Young Link (Jump 2)\n0x37. Adult Link (Drink 1)\n0x38. Adult Link (Drink 2)\n0x39. Navi (\"Watch Out!\")\n0x3A. Navi (\"Look!\")\n0x3B. Navi (\"Hey!\")\n0x3C. Adult Link (Din's Fire 1)\n0x3D. Adult Link (Din's Fire 2)\n0x3E. Young Link (Din's Fire 1)\n0x3F. Young Link (Din's Fire 2)\n0x40. Young Link (Death 1)\n0x41. Young Link (Death 2)\n0x42. Young Link (Death 3)\n0x43. Young Link (Shiver)\n0x44. \u26d4 (nullptr)\n0x45. Young Link (Sneeze)\n0x46. Young Link (Sleep 1)\n0x47. Young Link (Sleep 2)\n0x48. Young Link (Sleep 3)\n0x49. Young Link (Sleep 4)\n0x4A. Young Link (Stretch 1)\n0x4B. Young Link (Stretch 2)\n0x4C. Young Link (Stretch 3)\n0x4D. Adult Link (Death 1)\n0x4E. Adult Link (Death 2)\n0x4F. Adult Link (Death 3)\n0x50. Adult Link (Shiver 1)\n0x51. Adult Link (Shiver 2)\n0x52. Adult Link (Sneeze)\n0x53. Adult Link (Sigh 1)\n0x54. Adult Link (Sigh 2)\n0x55. Adult Link (Sigh 3)\n0x56. Adult Link (Stretch 1)\n0x57. Adult Link (Stretch 2)\n0x58. Adult Link (Stretch 3)\n0x59. Talon (Snore)\n0x5A. Talon (Awaken)\n0x5B. Talon (Confused)\n0x5C. Talon (Yell)\n0x5D. Ingo (\"Wah!\")\n0x5E. Mutoh (\"Kaaah!\")\n0x5F. Ingo (\"Hyah!\")\n0x60. Ingo (\"Ha!\")\n0x61. Great Fairy (Laugh 1)\n0x62. Great Fairy (Laugh 2)\n0x63. Nabooru (Gasp)\n0x64. Nabooru (Scream)\n0x65. Nabooru (\"Hmm?\")\n0x66. Navi (\"Watch Out!\")\n0x67. Navi (\"Look!\")\n0x68. Navi (\"Hey!\")\n0x69. Princess Ruto (\"Gueh!\")\n0x6A. Princess Ruto (\"Ah!\")\n0x6B. Princess Ruto (Scream)\n0x6C. Young Malon (Laugh)\n0x6D. Princess Ruto (Pickup 1)\n0x6E. Princess Ruto (Pickup 2)\n0x6F. Princess Ruto (Wiggle)\n0x70. Cursed Man (Scream)\n0x71. Cursed Man (Attack)\n0x72. Female (Gasp 1)\n0x73. Female (\"Eh?\")\n0x74. Female (\"Huh?\")\n0x75. Female (\"Hmph\")\n0x76. Female (Laugh 1)\n0x77. Female (Gasp 2)\n0x78. Female (Damage)\n0x79. Gerudo Guard (Damage 1)\n0x7A. Gerudo Guard (Damage 2)\n0x7B. Gerudo Guard (Damage 3)\n0x7C. Navi (\"Listen!\")\n0x7D. Sheik (\"Hup!\")\n0x7E. Adult Zelda (Scream 1)\n0x7F. Adult Zelda (Scream 2)\n0x80. Adult Zelda (Magic)\n0x81. Adult Zelda (Gasp 1)\n0x82. Adult Zelda (Gasp 2)\n0x83. King Zora (\"Mweep\")\n0x84. Navi (\"Hello!\")\n0x85. \u26d4 (nullptr)\n0x86. Adult Link (Gasp 3)\n0x87. Young Link (Gasp 3)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-number-7f","title":"Drums (Program Number: 7F)","text":"<p>Below is a list of the \"drums\" inside of audiobank <code>0x00</code>. Unlike instrument index pointers, percussion index pointers represent a MIDI note instead of a program number.</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Drum List: <pre><code>0x00. Tambourine Slap\n0x01. Reverb Stick Hit SFX\n0x02. Rain SFX [1]\n0x03. Rain SFX [2]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-number-0x00-to-0x7d","title":"Instruments (Program Number: 0x00 to 0x7D)","text":"<p>Below is a list of the \"instruments\" inside of audiobank <code>0x01</code>. These work exactly as regular instruments do, you can even import them into a custom audiobank as an instrument and use it in a sequence just like any regular instrument; and this is a common structure for the sound effects within the game.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x7D (125)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.*</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Some sound effects using the instrument structure have multiple samples, the sound effects using multiple samples indicate which region contains which sound effect sample (e.g. <code>0x00: Low: SFX name, Mid: SFX Name, High: SFX Name</code>). Any sound effects without multiple regions use the mid (primary) sample.</p> <p>Instrument List: <pre><code>0x00. Pop/Thud SFX (Shabom?)\n0x01. Dodongo Roar SFX\n0x02. Balloon Inflate SFX\n0x03. Doom Monster Roar SFX\n0x04. Skulltula Skitter SFX\n0x05. Spider Egg Hatch SFX\n0x06. Rock Explosion SFX\n0x07. Unknown Buzz SFX (Creaking? Frog?)\n0x08. Poe Hover SFX?\n0x09. Clicking SFX (Keese Attack?)\n0x0A. Wing Flap SFX\n0x0B. Volvagia Pained Roar SFX\n0x0C. Scratch/Electric SFX (Skulltula Related?)\n0x0D. \"Ah\" SFX (Frog Croak?)\n0x0E. Lizalfos Laugh? SFX\n0x0F. Mid: Lizalfos SFX, High: Lizalfos Footstep SFX\n0x10. Deku Scrub Voice SFX\n0x11. Glass Break SFX (Ice?)\n0x12. Wind SFX 1\n0x13. Unknown White Noise SFX\n0x14. Mid: Gulp SFX, High: Stick Clack SFX\n0x15. Deku Baba Beak Snap SFX\n0x16. Wind SFX 2\n0x17. Crow/Eagle/Bat SFX\n0x18. Mid: Buzz SFX, High: Deku Baba Breath SFX\n0x19. Stalfos Sword Swing SFX\n0x1A. Stalchild Laughing SFX\n0x1B. Stalfos Laughing SFX\n0x1C. Whip SFX (Used for Garo in MM)\n0x1D. Thunder SFX\n0x1E. Electric SFX (Ganon Summoning Orb)\n0x1F. Phantom/Regular Ganon Hover SFX\n0x20. Phantom Ganon Attack SFX?\n0x21. Whoosh SFX\n0x22. Thunder SFX 2\n0x23. Ganon Related SFX?\n0x24. Ganondorf \"Ha!\" SFX\n0x25. Flare Dancer SFX?\n0x26. Splash SFX\n0x27. Splish SFX (Footstep on Watery Surface)\n0x28. Mid: Boulder Explosion SFX, High: Lava Bubbling SFX\n0x29. Unknown Monster Roar SFX (King Dodongo/Volvagia?)\n0x2A. Mid: Redead/Gibdo SFX (Pamela's Father in MM), High: Goron Falling Asleep SFX\n0x2B. Poe Laugh SFX\n0x2C. Water Bubbling SFX (Morpha Cutscene?)\n0x2D. Mid: Unknown Growl SFX, High: Poe Defeat Shriek SFX\n0x2E. Mid: Goron \"Hmm?\" SFX, High: Goron \"Ooooh...\" SFX\n0x2F. Mid: Metal Clink SFX, High: Leever SFX? (Sandy Sound)\n0x30. Mid: Bongo Bongo Drum Hit SFX, High: Unknown Voice SFX\n0x31. Mid: Wolfos Howl, High: Guay Caw SFX\n0x32. Mid: Witch Argument SFX, High: Metal Clank SFX (Iron Knuckle?)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#sound-effects-program-number-7e_1","title":"Sound Effects (Program Number: 7E)","text":"<p>Below is a list of the \"sound effects\" inside of audiobank <code>0x01</code>. These work nearly identical to how percussion sets work except for how they are structured, they cannot be imported into audiobanks because their structure is built directly into a pointer array within <code>&lt;absfxlist&gt;</code>.</p> <p>You can access these sound effects when using this audiobank using MIDI program number(s): <code>0x7E (126)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.*</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Sound effects can only have one sample per sound effect, but some sound effect indexes point to the same sample in the audiobank. The indexes that use the same sample as another index are marked: <code>[Same sample as (index value)]</code></p> <p>Sound Effect List: <pre><code>0x00. Koume &amp; Kotake (Laugh 1)\n0x01. Koume &amp; Kotake (Laugh 2)\n0x02. Koume &amp; Kotake (\"Hah!\")\n0x03. Koume &amp; Kotake (Attack)\n0x04. Koume &amp; Kotake (\"Eh?\")\n0x05. Koume &amp; Kotake (Scream)\n0x06. Twinrova (Damage 1)\n0x07. Twinrova (Damage 2)\n0x08. Twinrova (Attack)\n0x09. Twinrova (Laugh)\n0x0A. Twinrova (Scream)\n0x0B. Twinrova (Winking)\n0x0C. Phantom Ganon (Finger Snap)\n0x0D. Phantom Ganon (\"Tsk!\")\n0x0E. Phantom Ganon (Gasp)\n0x0F. Phantom Ganon (Attack 1)\n0x10. Phantom Ganon (Damage)\n0x11. Phantom Ganon (Attack 2)\n0x12. Phantom Ganon (???)\n0x13. Gerudo Thief (Attack)\n0x14. Gerudo Thief (Damage)\n0x15. Gerudo Thief (Scream)\n0x16. Gerudo Thief (Breath)\n0x17. Ganondorf (Laugh 1)\n0x18. Ganondorf (\"Hah!\" 1)\n0x19. Ganondorf (Attack 1)\n0x1A. Ganondorf (\"Tsk!\")\n0x1B. Ganondorf (Attack 2)\n0x1C. Ganondorf (Damage 1)\n0x1D. Ganondorf (Damage 2)\n0x1E. Ganondorf (Gasp)\n0x1F. Ganondorf (\"Hah!\" 2)\n0x20. Ganondorf (Death 1)\n0x21. Ganondorf (Breath)\n0x22. Ganondorf (Death 2)\n0x23. Ganondorf (Yell 1)\n0x24. Ganondorf (Yell 2)\n0x25. Ganondorf (Yell 3)\n0x26. Ganondorf (Laugh 2)\n0x27. Deku Baba (Damage)\n0x28. Redead (Shriek)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-number-7f_1","title":"Drums (Program Number: 7F)","text":"<p>Below is a list of the \"drums\" inside of audiobank <code>0x00</code>. There is one single drum pointer, but it is just a null pointer value with no sample being pointed to.</p> <p>Drum List: <pre><code>0x00. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x14","title":"Instruments (Program Name: 0x00 to 0x14)","text":"<p>Below is a list of the \"instruments\" inside of audiobank <code>0x02</code>. These work exactly as regular instruments do, you can even import them into a custom audiobank as an instrument and use it in a sequence just like any regular instrument; and this is a common structure for the sound effects within the game.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x14 (20)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Bird Chirp SFX 1\n0x02. Bird Chitter SFX\n0x03. Bird Trill SFX\n0x04. Bird Song SFX\n0x05. Bird Chirp SFX 2\n0x06. Crow Caw SFX\n0x07. Swamp Bird SFX (Some type of honking bird)\n0x08. Peacock SFX?\n0x09. Bird Twitter SFX\n0x0A. Rooster Crow SFX\n0x0B. Owl Hoot SFX\n0x0C. Eagle SFX\n0x0D. Bird Chirp SFX 3\n0x0E. Guay Caw SFX\n0x0F. White Noise SFX (Waterfall)\n0x10. Wind SFX (Haunted Wasteland Sandstorm)\n0x11. Wind SFX 2 (Haunted Wasteland Sandstorm)\n0x12. Rain SFX\n0x13. Thunder SFX\n0x14. Thunder SFX 2\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x03</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.*</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Oboe\n0x02. Clarinet\n0x03. Bassoon\n0x04. French Horn\n0x05. Trumpet\n0x06. Trombone\n0x07. Tuba\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. Piano\n0x0E. Harp\n0x0F. Marimba\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x03</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x01","title":"Instruments (Program Name: 0x00 to 0x01)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x04</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x01 (1)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Enigmatic\n0x01. Enigmatic ALT\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x05</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Ocarina\n0x02. Bassoon\n0x03. Oboe\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. Pizz. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_1","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x05</code>. This percussion set is referred to as \"Tambourine Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Tambourine Slap: <code>A1 (21)</code> to <code>B3 (47)</code> - Tambourine Tap: <code>C4 (48)</code> to <code>C\u266f4 (49)</code> - Tambourine Shake: <code>D4 (50)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Tambourine Slap [1]\n0x01. Tambourine Slap [2]\n0x02. Tambourine Slap [3]\n0x03. Tambourine Slap [4]\n0x04. Tambourine Slap [5]\n0x05. Tambourine Slap [6]\n0x06. Tambourine Slap [7]\n0x07. Tambourine Slap [8]\n0x08. Tambourine Slap [9]\n0x09. Tambourine Slap [10]\n0x0A. Tambourine Slap [11]\n0x0B. Tambourine Slap [12]\n0x0C. Tambourine Slap [13]\n0x0D. Tambourine Slap [14]\n0x0E. Tambourine Slap [15]\n0x0F. Tambourine Slap [16]\n0x10. Tambourine Slap [17]\n0x11. Tambourine Slap [18]\n0x12. Tambourine Slap [19]\n0x13. Tambourine Slap [20]\n0x14. Tambourine Slap [21]\n0x15. Tambourine Slap [22]\n0x16. Tambourine Slap [23]\n0x17. Tambourine Slap [24]\n0x18. Tambourine Slap [25]\n0x19. Tambourine Slap [26]\n0x1A. Tambourine Slap [27]\n0x1B. Tambourine Tap [1]\n0x1C. Tambourine Tap [2]\n0x1D. Tambourine Shake [1]\n0x1E. Tambourine Shake [2]\n0x1F. Tambourine Shake [3]\n0x20. Tambourine Shake [4]\n0x21. Tambourine Shake [5]\n0x22. Tambourine Shake [6]\n0x23. Tambourine Shake [7]\n0x24. Tambourine Shake [8]\n0x25. Tambourine Shake [9]\n0x26. Tambourine Shake [10]\n0x27. Tambourine Shake [11]\n0x28. Tambourine Shake [12]\n0x29. Tambourine Shake [13]\n0x2A. Tambourine Shake [14]\n0x2B. Tambourine Shake [15]\n0x2C. Tambourine Shake [16]\n0x2D. Tambourine Shake [17]\n0x2E. Tambourine Shake [18]\n0x2F. Tambourine Shake [19]\n0x30. Tambourine Shake [20]\n0x31. Tambourine Shake [21]\n0x32. Tambourine Shake [22]\n0x33. Tambourine Shake [23]\n0x34. Tambourine Shake [24]\n0x35. Tambourine Shake [25]\n0x36. Tambourine Shake [25*]\n0x37. Tambourine Shake [25*]\n0x38. Tambourine Shake [25*]\n0x39. Tambourine Shake [25*]\n0x3A. Tambourine Shake [25*]\n0x3B. Tambourine Shake [25*]\n0x3C. Tambourine Shake [25*]\n0x3D. Tambourine Shake [25*]\n0x3E. Tambourine Shake [25*]\n0x3F. Tambourine Shake [25*]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x06</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Ocarina\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. \u26d4 (nullptr)\n0x0D. Piano\n0x0E. Piano ALT (Splits: 22 &amp; 44, Release: 93)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x07</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Wind\n0x01. \u26d4 (nullptr)\n0x02. Synth Strings\n0x03. Crunch Roar\n0x04. Crunch Roar\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_2","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x07</code>. This percussion set is referred to as \"Trip Hopping Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Trip Hopping Kick: <code>A1 (21)</code> to <code>C\u266f3 (37)</code> - Trip Hopping Snare: <code>D3 (38)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Trip Hopping Kick [1]\n0x01. Trip Hopping Kick [2]\n0x02. Trip Hopping Kick [3]\n0x03. Trip Hopping Kick [4]\n0x04. Trip Hopping Kick [5]\n0x05. Trip Hopping Kick [6]\n0x06. Trip Hopping Kick [7]\n0x07. Trip Hopping Kick [8]\n0x08. Trip Hopping Kick [9]\n0x09. Trip Hopping Kick [10]\n0x0A. Trip Hopping Kick [11]\n0x0B. Trip Hopping Kick [12]\n0x0C. Trip Hopping Kick [13]\n0x0D. Trip Hopping Kick [14]\n0x0E. Trip Hopping Kick [15]\n0x0F. Trip Hopping Kick [16]\n0x10. Trip Hopping Kick [17]\n0x11. Trip Hopping Snare [1]\n0x12. Trip Hopping Snare [2]\n0x13. Trip Hopping Snare [3]\n0x14. Trip Hopping Snare [4]\n0x15. Trip Hopping Snare [5]\n0x16. Trip Hopping Snare [6]\n0x17. Trip Hopping Snare [7]\n0x18. Trip Hopping Snare [8]\n0x19. Trip Hopping Snare [9]\n0x1A. Trip Hopping Snare [10]\n0x1B. Trip Hopping Snare [11]\n0x1C. Trip Hopping Snare [12]\n0x1D. Trip Hopping Snare [13]\n0x1E. Trip Hopping Snare [14]\n0x1F. Trip Hopping Snare [15]\n0x20. Trip Hopping Snare [16]\n0x21. Trip Hopping Snare [17]\n0x22. Trip Hopping Snare [18]\n0x23. Trip Hopping Snare [19]\n0x24. Trip Hopping Snare [20]\n0x25. Trip Hopping Snare [21]\n0x26. Trip Hopping Snare [22]\n0x27. Trip Hopping Snare [23]\n0x28. Trip Hopping Snare [24]\n0x29. Trip Hopping Snare [25]\n0x2A. Trip Hopping Snare [26]\n0x2B. Trip Hopping Snare [27]\n0x2C. Trip Hopping Snare [28]\n0x2D. Trip Hopping Snare [29]\n0x2E. Trip Hopping Snare [30]\n0x2F. Trip Hopping Snare [31]\n0x30. Trip Hopping Snare [32]\n0x31. Trip Hopping Snare [33]\n0x32. Trip Hopping Snare [34]\n0x33. Trip Hopping Snare [35]\n0x34. Trip Hopping Snare [36]\n0x35. Trip Hopping Snare [37]\n0x36. Trip Hopping Snare [38]\n0x37. Trip Hopping Snare [39]\n0x38. Trip Hopping Snare [40]\n0x39. Trip Hopping Snare [41]\n0x3A. Trip Hopping Snare [42]\n0x3B. Trip Hopping Snare [43]\n0x3C. Trip Hopping Snare [44]\n0x3D. Trip Hopping Snare [45]\n0x3E. Trip Hopping Snare [46]\n0x3F. Trip Hopping Snare [47]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_1","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x08</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Harmonica\n0x01. Nylon Guitar (Release: 233)\n0x02. Nylon Guitar (Release: 234)\n0x03. Ocarina\n0x04. Glockenspiel\n0x05. Accordion\n0x06. Accordion\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_3","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x08</code>. This percussion set is referred to as \"Tambourine Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Tambourine Slap: <code>A1 (21)</code> to <code>B3 (47)</code> - Tambourine Tap: <code>C4 (48)</code> to <code>C\u266f4 (49)</code> - Tambourine Shake: <code>D4 (50)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Tambourine Slap [1]\n0x01. Tambourine Slap [2]\n0x02. Tambourine Slap [3]\n0x03. Tambourine Slap [4]\n0x04. Tambourine Slap [5]\n0x05. Tambourine Slap [6]\n0x06. Tambourine Slap [7]\n0x07. Tambourine Slap [8]\n0x08. Tambourine Slap [9]\n0x09. Tambourine Slap [10]\n0x0A. Tambourine Slap [11]\n0x0B. Tambourine Slap [12]\n0x0C. Tambourine Slap [13]\n0x0D. Tambourine Slap [14]\n0x0E. Tambourine Slap [15]\n0x0F. Tambourine Slap [16]\n0x10. Tambourine Slap [17]\n0x11. Tambourine Slap [18]\n0x12. Tambourine Slap [19]\n0x13. Tambourine Slap [20]\n0x14. Tambourine Slap [21]\n0x15. Tambourine Slap [22]\n0x16. Tambourine Slap [23]\n0x17. Tambourine Slap [24]\n0x18. Tambourine Slap [25]\n0x19. Tambourine Slap [26]\n0x1A. Tambourine Slap [27]\n0x1B. Tambourine Tap [1]\n0x1C. Tambourine Tap [2]\n0x1D. Tambourine Shake [1]\n0x1E. Tambourine Shake [2]\n0x1F. Tambourine Shake [3]\n0x20. Tambourine Shake [4]\n0x21. Tambourine Shake [5]\n0x22. Tambourine Shake [6]\n0x23. Tambourine Shake [7]\n0x24. Tambourine Shake [8]\n0x25. Tambourine Shake [9]\n0x26. Tambourine Shake [10]\n0x27. Tambourine Shake [11]\n0x28. Tambourine Shake [12]\n0x29. Tambourine Shake [13]\n0x2A. Tambourine Shake [14]\n0x2B. Tambourine Shake [15]\n0x2C. Tambourine Shake [16]\n0x2D. Tambourine Shake [17]\n0x2E. Tambourine Shake [18]\n0x2F. Tambourine Shake [19]\n0x30. Tambourine Shake [20]\n0x31. Tambourine Shake [21]\n0x32. Tambourine Shake [22]\n0x33. Tambourine Shake [23]\n0x34. Tambourine Shake [24]\n0x35. Tambourine Shake [25]\n0x36. Tambourine Shake [25*]\n0x37. Tambourine Shake [25*]\n0x38. Tambourine Shake [25*]\n0x39. Tambourine Shake [25*]\n0x3A. Tambourine Shake [25*]\n0x3B. Tambourine Shake [25*]\n0x3C. Tambourine Shake [25*]\n0x3D. Tambourine Shake [25*]\n0x3E. Tambourine Shake [25*]\n0x3F. Tambourine Shake [25*]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c_1","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x09</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Harp\n0x01. Harp\n0x02. Harp\n0x03. Harp ALT (Mid Only)\n0x04. Slow Strings\n0x05. Ocarina\n0x06. Male Choir\n0x07. Male Choir\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_4","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x09</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0d","title":"Instruments (Program Name: 0x00 to 0x0D)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0A</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0D (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Chant 1 &amp; 2\n0x01. Chant 3\n0x02. Chant 3\n0x03. Bass Marimba\n0x04. \u26d4 (nullptr)\n0x05. Wind\n0x06. Metal Bell\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n\u26a0\ufe0f Below are for Version 1.2 Only \u26a0\ufe0f\n0x0A. Male Choir\n0x0B. Male Choir\n0x0C. Female Choir\n0x0D. Female Choir\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_5","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x0A</code>. This percussion set is referred to as \"Lute &amp; Tambourine Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Lute &amp; Tambourine Low: <code>A1 (21)</code> to <code>C\u266f3 (37)</code> - Lute &amp; Tambourine High: <code>D3 (38)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Lute &amp; Tambourine Low [1]\n0x01. Lute &amp; Tambourine Low [2]\n0x02. Lute &amp; Tambourine Low [3]\n0x03. Lute &amp; Tambourine Low [4]\n0x04. Lute &amp; Tambourine Low [5]\n0x05. Lute &amp; Tambourine Low [6]\n0x06. Lute &amp; Tambourine Low [7]\n0x07. Lute &amp; Tambourine Low [8]\n0x08. Lute &amp; Tambourine Low [9]\n0x09. Lute &amp; Tambourine Low [10]\n0x0A. Lute &amp; Tambourine Low [11]\n0x0B. Lute &amp; Tambourine Low [12]\n0x0C. Lute &amp; Tambourine Low [13]\n0x0D. Lute &amp; Tambourine Low [14]\n0x0E. Lute &amp; Tambourine Low [15]\n0x0F. Lute &amp; Tambourine Low [16]\n0x10. Lute &amp; Tambourine Low [17]\n0x11. Lute &amp; Tambourine High [1]\n0x12. Lute &amp; Tambourine High [2]\n0x13. Lute &amp; Tambourine High [3]\n0x14. Lute &amp; Tambourine High [4]\n0x15. Lute &amp; Tambourine High [5]\n0x16. Lute &amp; Tambourine High [6]\n0x17. Lute &amp; Tambourine High [7]\n0x18. Lute &amp; Tambourine High [8]\n0x19. Lute &amp; Tambourine High [9]\n0x1A. Lute &amp; Tambourine High [10]\n0x1B. Lute &amp; Tambourine High [11]\n0x1C. Lute &amp; Tambourine High [12]\n0x1D. Lute &amp; Tambourine High [13]\n0x1E. Lute &amp; Tambourine High [14]\n0x1F. Lute &amp; Tambourine High [15]\n0x20. Lute &amp; Tambourine High [16]\n0x21. Lute &amp; Tambourine High [17]\n0x22. Lute &amp; Tambourine High [18]\n0x23. Lute &amp; Tambourine High [19]\n0x24. Lute &amp; Tambourine High [20]\n0x25. Lute &amp; Tambourine High [21]\n0x26. Lute &amp; Tambourine High [22]\n0x27. Lute &amp; Tambourine High [23]\n0x28. Lute &amp; Tambourine High [24]\n0x29. Lute &amp; Tambourine High [25]\n0x2A. Lute &amp; Tambourine High [26]\n0x2B. Lute &amp; Tambourine High [27]\n0x2C. Lute &amp; Tambourine High [28]\n0x2D. Lute &amp; Tambourine High [29]\n0x2E. Lute &amp; Tambourine High [30]\n0x2F. Lute &amp; Tambourine High [31]\n0x30. Lute &amp; Tambourine High [32]\n0x31. Lute &amp; Tambourine High [33]\n0x32. Lute &amp; Tambourine High [34]\n0x33. Lute &amp; Tambourine High [35]\n0x34. Lute &amp; Tambourine High [36]\n0x35. Lute &amp; Tambourine High [37]\n0x36. Lute &amp; Tambourine High [38]\n0x37. Lute &amp; Tambourine High [39]\n0x38. Lute &amp; Tambourine High [40]\n0x39. Lute &amp; Tambourine High [41]\n0x3A. Lute &amp; Tambourine High [42]\n0x3B. Lute &amp; Tambourine High [43]\n0x3C. Lute &amp; Tambourine High [44]\n0x3D. Lute &amp; Tambourine High [45]\n0x3E. Lute &amp; Tambourine High [46]\n0x3F. Lute &amp; Tambourine High [47]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x03","title":"Instruments (Program Name: 0x00 to 0x03)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0B</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x03 (3)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Wind Roar\n0x01. Lore Drone\n0x02. Metal Grind\n0x03. Spaceosphere\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x02","title":"Instruments (Program Name: 0x00 to 0x02)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0C</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x02 (2)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Digi Pad 04\n0x01. Flute Chant\n0x02. Bamboo Chimes\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_1","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0D</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Malon Voice (Release: 248)\n0x01. Malon Voice (Release: 247)\n0x02. Sustain Guitar\n0x03. Sustain Guitar ALT\n0x04. Sustain Guitar ALT\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. Strings\n0x0C. Strings\n0x0D. Fiddle\n0x0E. Fiddle\n0x0F. Carillon Bell (Unused in Sequence)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x04","title":"Instruments (Program Name: 0x00 to 0x04)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0E</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x04 (4)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bent Drum\n0x01. Conga &amp; Slap\n0x02. Cuica\n0x03. Bass Marimba\n0x04. Bass Marimba\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_2","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0F</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Oboe\n0x02. Clarinet\n0x03. Bassoon\n0x04. French Horn\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. Harpsichord\n0x0E. Harp\n0x0F. Marimba\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_2","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x10</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Digi Pad 04 ALT\n0x01. Synth Strings\n0x02. Duduk ALT\n0x03. Conga &amp; Slap\n0x04. Synth Strings\n0x05. Duduk\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums","title":"Drums","text":"<p>Below is a list of the drums inside of audiobank <code>0x10</code>. This percussion set is referred to as \"Gong &amp; Chimes Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code></p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Gong: <code>A1 (21)</code> to <code>F\u266f4 (54)</code> - Chimes: <code>G4 (55)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Gong [1]\n0x01. Gong [2]\n0x02. Gong [3]\n0x03. Gong [4]\n0x04. Gong [5]\n0x05. Gong [6]\n0x06. Gong [7]\n0x07. Gong [8]\n0x08. Gong [9]\n0x09. Gong [10]\n0x0A. Gong [11]\n0x0B. Gong [12]\n0x0C. Gong [13]\n0x0D. Gong [14]\n0x0E. Gong [15]\n0x0F. Gong [16]\n0x10. Gong [17]\n0x11. Gong [18]\n0x12. Gong [19]\n0x13. Gong [20]\n0x14. Gong [21]\n0x15. Gong [22]\n0x16. Gong [23]\n0x17. Gong [24]\n0x18. Gong [25]\n0x19. Gong [26]\n0x1A. Gong [27]\n0x1B. Gong [28]\n0x1C. Gong [29]\n0x1D. Gong [30]\n0x1E. Gong [31]\n0x1F. Gong [32]\n0x20. Gong [33]\n0x21. Gong [34]\n0x22. Chimes [1]\n0x23. Chimes [2]\n0x24. Chimes [3]\n0x25. Chimes [4]\n0x26. Chimes [5]\n0x27. Chimes [6]\n0x28. Chimes [7]\n0x29. Chimes [8]\n0x2A. Chimes [9]\n0x2B. Chimes [10]\n0x2C. Chimes [11]\n0x2D. Chimes [12]\n0x2E. Chimes [13]\n0x2F. Chimes [14]\n0x30. Chimes [15]\n0x31. Chimes [16]\n0x32. Chimes [17]\n0x33. Chimes [18]\n0x34. Chimes [19]\n0x35. Chimes [20]\n0x36. Chimes [21]\n0x37. Chimes [22]\n0x38. Chimes [23]\n0x39. Chimes [24]\n0x3A. Chimes [25]\n0x3B. Chimes [26]\n0x3C. Chimes [27]\n0x3D. Chimes [28]\n0x3E. Chimes [29]\n0x3F. Chimes [30]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_1","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x11</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Banjo\n0x01. Banjo\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. Pizz. Double Bass\n0x06. Harmonica\n0x07. Nylon Guitar\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. \u26d4 (nullptr)\n0x0D. Fiddle\n0x0E. Fiddle\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c_2","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x12</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Harp\n0x01. Harp\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. Slow Strings\n0x05. Ocarina\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_6","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x12</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x03_1","title":"Instruments (Program Name: 0x00 to 0x03)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x13</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x03 (3)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Female Choir\n0x01. Female Choir\n0x02. Harp\n0x03. Glockenspiel\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_3","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x14</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Clarinet\n0x02. Clarinet\n0x03. Accordion\n0x04. Glockenspiel\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_7","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x14</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_4","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x15</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Steel Drum\n0x01. Digi Pad 04\n0x02. Nylon Guitar\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_8","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x15</code>. This percussion set is referred to as \"Conga &amp; Shaker Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Conga Closed: <code>A1 (21)</code> to <code>F3 (41)</code> - Conga Open: <code>F\u266f3 (42)</code> to <code>C5 (60)</code> - Conga Slap: <code>C\u266f5 (61)</code> to <code>G\u266f6 (80)</code> - Shaker: <code>A6 (81)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Conga Closed [1]\n0x01. Conga Closed [2]\n0x02. Conga Closed [3]\n0x03. Conga Closed [4]\n0x04. Conga Closed [5]\n0x05. Conga Closed [6]\n0x06. Conga Closed [7]\n0x07. Conga Closed [8]\n0x08. Conga Closed [9]\n0x09. Conga Closed [10]\n0x0A. Conga Closed [11]\n0x0B. Conga Closed [12]\n0x0C. Conga Closed [13]\n0x0D. Conga Closed [14]\n0x0E. Conga Closed [15]\n0x0F. Conga Closed [16]\n0x10. Conga Closed [17]\n0x11. Conga Closed [18]\n0x12. Conga Closed [19]\n0x13. Conga Closed [20]\n0x14. Conga Closed [21]\n0x15. Conga Open [1]\n0x16. Conga Open [2]\n0x17. Conga Open [3]\n0x18. Conga Open [4]\n0x19. Conga Open [5]\n0x1A. Conga Open [6]\n0x1B. Conga Open [7]\n0x1C. Conga Open [8]\n0x1D. Conga Open [9]\n0x1E. Conga Open [10]\n0x1F. Conga Open [11]\n0x20. Conga Open [12]\n0x21. Conga Open [13]\n0x22. Conga Open [14]\n0x23. Conga Open [15]\n0x24. Conga Open [16]\n0x25. Conga Open [17]\n0x26. Conga Open [18]\n0x27. Conga Open [19]\n0x28. Conga Slap [1]\n0x29. Conga Slap [2]\n0x2A. Conga Slap [3]\n0x2B. Conga Slap [4]\n0x2C. Conga Slap [5]\n0x2D. Conga Slap [6]\n0x2E. Conga Slap [7]\n0x2F. Conga Slap [8]\n0x30. Conga Slap [9]\n0x31. Conga Slap [10]\n0x32. Conga Slap [11]\n0x33. Conga Slap [12]\n0x34. Conga Slap [13]\n0x35. Conga Slap [14]\n0x36. Conga Slap [15]\n0x37. Conga Slap [16]\n0x38. Conga Slap [17]\n0x39. Conga Slap [18]\n0x3A. Conga Slap [19]\n0x3B. Conga Slap [20]\n0x3C. Shaker [1]\n0x3D. Shaker [2]\n0x3E. Shaker [3]\n0x3F. Shaker [4]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0a","title":"Instruments (Program Name: 0x00 to 0x0A)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x16</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0A (10)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Nylon Guitar\n0x01. Accordion\n0x02. Pizz. Double Bass\n0x03. Trombone\n0x04. Trumpet\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Cowbell\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_9","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x16</code>. This percussion set is referred to as \"Conga &amp; Shaker Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Conga Closed: <code>A1 (21)</code> to <code>F3 (41)</code> - Conga Open: <code>F\u266f3 (42)</code> to <code>C5 (60)</code> - Conga Slap: <code>C\u266f5 (61)</code> to <code>G\u266f6 (80)</code> - Shaker: <code>A6 (81)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Conga Closed [1]\n0x01. Conga Closed [2]\n0x02. Conga Closed [3]\n0x03. Conga Closed [4]\n0x04. Conga Closed [5]\n0x05. Conga Closed [6]\n0x06. Conga Closed [7]\n0x07. Conga Closed [8]\n0x08. Conga Closed [9]\n0x09. Conga Closed [10]\n0x0A. Conga Closed [11]\n0x0B. Conga Closed [12]\n0x0C. Conga Closed [13]\n0x0D. Conga Closed [14]\n0x0E. Conga Closed [15]\n0x0F. Conga Closed [16]\n0x10. Conga Closed [17]\n0x11. Conga Closed [18]\n0x12. Conga Closed [19]\n0x13. Conga Closed [20]\n0x14. Conga Closed [21]\n0x15. Conga Open [1]\n0x16. Conga Open [2]\n0x17. Conga Open [3]\n0x18. Conga Open [4]\n0x19. Conga Open [5]\n0x1A. Conga Open [6]\n0x1B. Conga Open [7]\n0x1C. Conga Open [8]\n0x1D. Conga Open [9]\n0x1E. Conga Open [10]\n0x1F. Conga Open [11]\n0x20. Conga Open [12]\n0x21. Conga Open [13]\n0x22. Conga Open [14]\n0x23. Conga Open [15]\n0x24. Conga Open [16]\n0x25. Conga Open [17]\n0x26. Conga Open [18]\n0x27. Conga Open [19]\n0x28. Conga Slap [1]\n0x29. Conga Slap [2]\n0x2A. Conga Slap [3]\n0x2B. Conga Slap [4]\n0x2C. Conga Slap [5]\n0x2D. Conga Slap [6]\n0x2E. Conga Slap [7]\n0x2F. Conga Slap [8]\n0x30. Conga Slap [9]\n0x31. Conga Slap [10]\n0x32. Conga Slap [11]\n0x33. Conga Slap [12]\n0x34. Conga Slap [13]\n0x35. Conga Slap [14]\n0x36. Conga Slap [15]\n0x37. Conga Slap [16]\n0x38. Conga Slap [17]\n0x39. Conga Slap [18]\n0x3A. Conga Slap [19]\n0x3B. Conga Slap [20]\n0x3C. Shaker [1]\n0x3D. Shaker [2]\n0x3E. Shaker [3]\n0x3F. Shaker [4]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x03_2","title":"Instruments (Program Name: 0x00 to 0x03)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x17</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x03 (3)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Fantasia\n0x01. Fantasia ALT\n0x02. Wind\n0x03. Fantasia ALT\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x08","title":"Instruments (Program Name: 0x00 to 0x08)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x18</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x08 (8)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Djembe\n0x01. Wind Roar\n0x02. Lore Drone &amp; Shine\n0x03. Male Choir\n0x04. Female Choir\n0x05. \u26d4 (nullptr)\n0x06. Chant 3\n0x07. Spaceosphere\n0x08. Harpsichord\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x07","title":"Instruments (Program Name: 0x00 to 0x07)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x19</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x07 (7)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Gong &amp; Chimes\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. Fantasia\n0x05. Bamboo Chimes\n0x06. Digi Pad 04\n0x07. Bouzouki\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_2","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1A</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. \u26d4 (nullptr)\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. \u26d4 (nullptr)\n0x0D. Piano ALT (Splits: 22 &amp; 44, Release: 93)\n0x0E. Piano ALT (Splits: 22 &amp; 44, Release: 93)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0b","title":"Instruments (Program Name: 0x00 to 0x0B)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1B</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0B (11)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Trumpet\n0x01. Trombone\n0x02. Nylon Guitar (Release: 233)\n0x03. Nylon Guitar (Release: 219)\n0x04. \u26d4 (nullptr)\n0x05. Pizz. Double Bass\n0x06. \u26d4 (nullptr)\n0x07. Nylon Guitar (Release: 234)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Clap\n0x0B. Clap\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x04_1","title":"Instruments (Program Name: 0x00 to 0x04)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1C</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x04 (4)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Djembe\n0x02. \u26d4 (nullptr)\n0x03. Bent Drum\n0x04. Gong &amp; Chimes\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0b_1","title":"Instruments (Program Name: 0x00 to 0x0B)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1D</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0B (11)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Djembe\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. Piccolo\n0x06. \u26d4 (nullptr)\n0x07. Piccolo\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_10","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x1D</code>. This percussion set is referred to as \"Gong &amp; Chimes Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Gong: <code>A1 (21)</code> to <code>F\u266f4 (54)</code> - Chimes: <code>G4 (55)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Gong [1]\n0x01. Gong [2]\n0x02. Gong [3]\n0x03. Gong [4]\n0x04. Gong [5]\n0x05. Gong [6]\n0x06. Gong [7]\n0x07. Gong [8]\n0x08. Gong [9]\n0x09. Gong [10]\n0x0A. Gong [11]\n0x0B. Gong [12]\n0x0C. Gong [13]\n0x0D. Gong [14]\n0x0E. Gong [15]\n0x0F. Gong [16]\n0x10. Gong [17]\n0x11. Gong [18]\n0x12. Gong [19]\n0x13. Gong [20]\n0x14. Gong [21]\n0x15. Gong [22]\n0x16. Gong [23]\n0x17. Gong [24]\n0x18. Gong [25]\n0x19. Gong [26]\n0x1A. Gong [27]\n0x1B. Gong [28]\n0x1C. Gong [29]\n0x1D. Gong [30]\n0x1E. Gong [31]\n0x1F. Gong [32]\n0x20. Gong [33]\n0x21. Gong [34]\n0x22. Chimes [1]\n0x23. Chimes [2]\n0x24. Chimes [3]\n0x25. Chimes [4]\n0x26. Chimes [5]\n0x27. Chimes [6]\n0x28. Chimes [7]\n0x29. Chimes [8]\n0x2A. Chimes [9]\n0x2B. Chimes [10]\n0x2C. Chimes [11]\n0x2D. Chimes [12]\n0x2E. Chimes [13]\n0x2F. Chimes [14]\n0x30. Chimes [15]\n0x31. Chimes [16]\n0x32. Chimes [17]\n0x33. Chimes [18]\n0x34. Chimes [19]\n0x35. Chimes [20]\n0x36. Chimes [21]\n0x37. Chimes [22]\n0x38. Chimes [23]\n0x39. Chimes [24]\n0x3A. Chimes [25]\n0x3B. Chimes [26]\n0x3C. Chimes [27]\n0x3D. Chimes [28]\n0x3E. Chimes [29]\n0x3F. Chimes [30]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x04_2","title":"Instruments (Program Name: 0x00 to 0x04)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1E</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x04 (4)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Pipe Organ\n0x01. Pipe Organ\n0x02. Pipe Organ\n0x03. \u26d4 (nullptr)\n0x04. French Horn\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x07_1","title":"Instruments (Program Name: 0x00 to 0x07)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1F</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x07 (7)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Wind Roar\n0x02. Lore Drone &amp; Shine\n0x03. Male Choir\n0x04. Piano\n0x05. Piano ALT 3 (Splits: 22 &amp;amp; 44, Release Rate: 93)\n0x06. \u26d4 (nullptr)\n0x07. Spaceosphere\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_3","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x20</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Female Choir\n0x02. Male Choir\n0x03. \u26d4 (nullptr)\n0x04. French Horn\n0x05. Trumpet\n0x06. Trombone\n0x07. Tuba\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. \u26d4 (nullptr)\n0x0D. Piano\n0x0E. \u26d4 (nullptr)\n0x0F. Marimba\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_11","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x20</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_4","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x21</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Malon Voice (Release: 248)\n0x01. Malon Voice (Release: 247)\n0x02. Clarinet\n0x03. \u26d4 (nullptr)\n0x04. French Horn\n0x05. Oboe\n0x06. Harp\n0x07. Fiddle\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. \u26d4 (nullptr)\n0x0D. Carillon Bell\n0x0E. Harp\n0x0F. Female Choir\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_12","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x21</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_5","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x22</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Ocarina\n0x02. Bassoon\n0x03. Oboe\n0x04. Female Choir\n0x05. Tambourine\n0x06. Harp\n0x07. Glockenspiel\n0x08. Malon Voice (Release: 248)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. French Horn\n0x0E. Male Choir\n0x0F. Cuica\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_13","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x22</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_3","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x23</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. \u26d4 (nullptr)\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. Trumpet\n0x06. Trombone\n0x07. Tuba\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. \u26d4 (nullptr)\n0x0D. \u26d4 (nullptr)\n0x0E. Harp\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_14","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x23</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Orchestra Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Orchestra Bass Drum [1]\n0x01. Orchestra Bass Drum [2]\n0x02. Orchestra Bass Drum [3]\n0x03. Orchestra Bass Drum [4]\n0x04. Orchestra Bass Drum [5]\n0x05. Orchestra Bass Drum [6]\n0x06. Orchestra Bass Drum [7]\n0x07. Orchestra Bass Drum [8]\n0x08. Orchestra Bass Drum [9]\n0x09. Orchestra Bass Drum [10]\n0x0A. Orchestra Bass Drum [11]\n0x0B. Orchestra Bass Drum [12]\n0x0C. Orchestra Bass Drum [13]\n0x0D. Orchestra Bass Drum [14]\n0x0E. Orchestra Bass Drum [15]\n0x0F. Orchestra Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_4","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x24</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Oboe\n0x02. \u26d4 (nullptr)\n0x03. Bassoon\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. \u26d4 (nullptr)\n0x0E. Harp\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x01_1","title":"Instruments (Program Name: 0x00 to 0x01)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x25</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x01 (1)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Junk [1]\n0x01. Junk [2]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-number-0x00-to-0x79","title":"Instruments (Program Number: 0x00 to 0x79)","text":"<p>Below is a list of the \"instruments\" inside of audiobank <code>0x00</code>. These work exactly as regular instruments do, you can even import them into a custom audiobank as an instrument and use it in a sequence just like any regular instrument; and this is a common structure for the sound effects within the game.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x79 (121)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Some sound effects using the instrument structure have multiple samples, the sound effects using multiple samples indicate which region contains which sound effect sample (e.g. <code>0x00: Low: SFX name, Mid: SFX Name, High: SFX Name</code>). Any sound effects without multiple regions use the mid (primary) sample.</p> <p>Instrument List: <pre><code>0x00. Dirt Footstep SFX\n0x01. Sand Footstep SFX\n0x02. Stone Footstep SFX?\n0x03. Water Footstep SFX\n0x04. Splash Footstep SFX\n0x05. Dirt Footstep SFX 2?\n0x06. Wood Footstep SFX?\n0x07. Grass Footstep SFX?\n0x08. Chest reveal SFX, Ice Switch SFX, and Skull Kid Spotlight SFX\n0x09. Snow Footstep SFX?\n0x0A. Unknown SFX (Rock related?)\n0x0B. Unknown SFX (Footstep?)\n0x0C. Splash SFX 1\n0x0D. Splash SFX 2\n0x0E. Unknown Sand SFX 1\n0x0F. Mid: Egg Hatch SFX 1, High: Wind SFX\n0x10. Unknown Sand SFX 2\n0x11. Unknown White Noise SFX 1\n0x12. Unknown White Noise SFX 2\n0x13. Splash SFX 3\n0x14. Swimming SFX\n0x15. Mid: Drum SFX?, High: Gunshot SFX\n0x16. Wood Footstep SFX 2?\n0x17. Snow Footstep SFX 2?\n0x18. Mid: Fairy Flying SFX 1?, High: Fairy Bell SFX 1\n0x19. Stone Footstep SFX 2?\n0x1A. Mid: Sword Clink SFX 1, High: Sword Clink SFX 2\n0x1B. Scratch SFX?\n0x1C. Link Sword Sheathe SFX\n0x1D. Link Sword Unsheathe SFX\n0x1E. Whoosh SFX\n0x1F. Unknown Whoosh SFX\n0x20. Metal Clang SFX\n0x21. Mid: Bow Draw SFX, High: Bow Twang SFX\n0x22. Mid: Hookshot Chain SFX, High: Bat Noise SFX?\n0x23. Mid: Bombchu Fuse SFX, High: Bombchu Moving SFX\n0x24. Bank Stamp SFX (OOT Megaton Hammer)\n0x25. Like Like SFX?\n0x26. Arrow Hitting Wood/Festival Hammer SFX\n0x27. Whoosh SFX 2 (Boomerang?)\n0x28. Unknown SFX (Rock related?)\n0x29. Mid: Pop SFX, High: Cursor SFX?\n0x2A. Robotic Buzzing SFX\n0x2B. Mid: Unknown SFX, High: Song of Double Time Tick SFX\n0x2C. Mid: Lens of Truth SFX, High: Whoosh SFX 3\n0x2D. Mid: Door Open SFX, High: Door Close SFX\n0x2E. Mid: Digi Pad 04 SFX?, High: Squeaking SFX?\n0x2F. Explosion SFX\n0x30. Horse Gallop SFX\n0x32. Mid: Horse Whinny SFX, High: Horse Snort SFX\n0x31. \u26d4 (nullptr)\n0x33. Mid: Running Water SFX, High: White Noise SFX 1 (Waterfall)\n0x34. Ocarina SFX 1 (Special Effect)\n0x35. Ocarina SFX 2\n0x36. Mid: Stone Moving on Stone SFX, High: Metal Door Closing SFX\n0x37. Rock Rolling SFX?\n0x38. Mid: Lava Bubbling SFX, High: Soup Bubbling SFX\n0x39. Chain Pulley SFX\n0x3A. Chicken Cluck SFX\n0x3B. Door Thud SFX\n0x3C. Wind SFX\n0x3D. Mid: Rooster Crow SFX, High: Wolf Howl SFX\n0x3E. Light Splash SFX (Fish?)\n0x3F. Mid: Spider House Portrait Fall SFX, High: Stick Clack SFX\n0x40. Fairy Flying SFX 2? (Fairy Related)\n0x41. Dawn of the First Day SFX\n0x42. Mid: Door Creak SFX, High: Door Creak Low SFX\n0x43. Unknown SFX\n0x44. Glass Hum SFX\n0x45. Fairy Flying SFX 3? (Fairy Related)\n0x46. Mid: Electric SFX, High: Pot Break SFX\n0x47. Water Drip SFX\n0x48. Water Bubbling SFX (Gyorg Cutscene?)\n0x49. Mid: Fire Crackle SFX, High: Cow Moo SFX\n0x4A. Mid: Balloon Inflate SFX, High: Thunder SFX\n0x4B. Unknown SFX\n0x4C. Unknown SFX\n0x4D. Mid: Wind SFX?, High: Revving SFX\n0x4E. Mid: Cloth Flutter SFX, High: Wing Flap SFX\n0x4F. Mid: Carpenters and Soldiers Arguing SFX, High: Glass Shatter SFX (Ice?)\n0x50. Scratch SFX 2?\n0x51. Mid: Dodongo Roar SFX, High: Dog Bark SFX\n0x52. Woodwind Noise SFX\n0x53. Bandoneon SFX\n0x54. Piano/Harp SFX?\n0x55. Lulu's Voice SFX\n0x56. Fairy Bell SFX 2\n0x57. Mid: Wrong Note SFX, High: Unknown Metal Sound SFX\n0x58. Bird Chirp SFX\n0x59. Harp SFX\n0x5A. Mid: Camera Alignment SFX, High: Lock-on SFX\n0x5B. Metal Chain SFX\n0x5C. Rawhide Drum SFX (Goron)\n0x5D. Steel Str. Guitar SFX (Zora)\n0x5E. Trumpet (B3) SFX (Deku)\n0x5F. Frog Ribbit SFX\n0x60. Goron Elder's Son Voice SFX\n0x61. Mid: Beaver Talk SFX, High: Bird Tweet SFX\n0x62. Cuckoo Clock SFX\n0x63. Mid: Ocean Wave SFX, High: Same as Mid\n0x64. Carillon Bell SFX\n0x65. Eagle(?) SFX\n0x66. Orchestral Timpani SFX\n0x67. Mid: Glass Shatter SFX, High: Click SFX\n0x68. Snow Footstep SFX 3?\n0x69. Arwing Laser SFX\n0x6A. Mid: Wooden Clack/Pop/Clap/Slap SFX?, High: Gulp SFX\n0x6B. Mid: Monkey Noise SFX, Monkey Shriek SFX\n0x6C. Mid: Same as High Pitched Lower?, High: Insect Buzz Sfx?\n0x6D. Low: Dog Yelp SFX, Mid: Dog Growl SFX, High: Dog Calm Whine(?) SFX\n0x6E. Mid: Crowd Cheer SFX, High: Link Gulp? SFX\n0x6F. Goron Burnout/Skid SFX\n0x70. Egg Hatch SFX 2\n0x71. Bent Conga SFX\n0x72. Giant Voice SFX\n0x73. Piano SFX\n0x74. Fretless Bass SFX (Zora/Japas?)\n0x75. Chinese Gong SFX\n0x76. Creaking SFX\n0x77. Piccolo SFX\n0x78. Igos Du Ikana Voice SFX (Elegy)\n0x79. Grass Rustle SFX\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#sound-effects-program-number-7e_2","title":"Sound Effects (Program Number: 7E)","text":"<p>Below is a list of the \"sound effects\" inside of audiobank <code>0x00</code>. These work nearly identical to how percussion sets work except for how they are structured, they cannot be imported into audiobanks because their structure is built directly into a pointer array within <code>&lt;absfxlist&gt;</code>.</p> <p>You can access these sound effects when using this audiobank using MIDI program number(s): <code>0x7E (126)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Sound effects can only have one sample per sound effect, but some sound effect indexes point to the same sample in the audiobank. The indexes that use the same sample as another index are marked: <code>[Same sample as (index value)]</code></p> <p>Sound Effect List: <pre><code>0x00. Young Link (Attack 1)\n0x01. Young Link (Attack 2)\n0x02. Young Link (Attack 3)\n0x03. Young Link (Attack 4)\n0x04. Young Link (Attack 5)\n0x05. Young Link (Attack 6)\n0x06. Goron Link (Damage 1)\n0x07. Goron Link (Damage 2?)\n0x08. Goron Link (Damage 3)\n0x09. Young Link (Damage 1)\n0x0A. Young Link (Damage 2)\n0x0B. Young Link (Damage 3)\n0x0C. Young Link (Damage 4)\n0x0D. Zora Link (Damage 1)\n0x0E. Young Link (Damage 5)\n0x0F. Young Link (Scream 1)\n0x10. Young Link (Scream 2)\n0x11. Young Link (Scream 2) [Same sample as 10]\n0x12. Goron Link (Critical Health?)\n0x13. Zora Link (Critical Health?)\n0x14. Young Link (Grunt 1)\n0x15. Igos Du Ikana (Elegy)\n0x16. Igos Du Ikana (Elegy)\n0x17. Young Link (Critical Health 1)\n0x18. Goron Link (Fall Damage)\n0x19. Goron Link (Push &amp; Grab)\n0x1A. Young Link (Grunt 2)\n0x1B. Young Link (Grunt 3)\n0x1C. Young Link (\"Hup\" 1)\n0x1D. Young Link (\"Ha!\" 1)\n0x1E. Young Link (\"Hup\" 2)\n0x1F. Young Link (\"Hup\" 3)\n0x20. Young Link (\"Hyah!\")\n0x21. Young Link (Attack 7)\n0x22. Young Link (Ledge Related?)\n0x23. Young Link (Grab &amp; Push 1?)\n0x24. Young Link (Grab &amp; Push 2?)\n0x25. Deku Link (Damage 1)\n0x26. Deku Link (Damage 2)\n0x27. Young Link (Grunt 2) [Same sample as 1A]\n0x28. Young Link (Damage 6)\n0x29. Zora Link (Damage 2)\n0x2A. Young Link (Fall Damage 1)\n0x2B. Young Link (Fall Scream 1)\n0x2C. Young Link (Fall Scream 2)\n0x2D. Young Link (Fall Start 1)\n0x2E. Young Link (Fall Start 2)\n0x2F. Young Link (Critical Health 2)\n0x30. Young Link (Critical Health 3)\n0x31. Young Link (Fall Damage 2)\n0x32. Young Link (Sliding)\n0x33. Young Link (Drink 1)\n0x34. Young Link (Drink 2)\n0x35. Young Link (\"Hup\" 4)\n0x36. Young Link (\"Hup\" 5)\n0x37. Goron Link (Fall Damage) [Same sample as 18]\n0x38. Goron Link (Fall Damage) [Same sample as 18]\n0x39. \u26d4 (nullptr)\n0x3A. \u26d4 (nullptr)\n0x3B. \u26d4 (nullptr)\n0x3C. Goron Link (Fall Damage) [Same sample as 18]\n0x3D. Goron Link (Fall Damage) [Same sample as 18]\n0x3E. Young Link (Ledge Climb?)\n0x3F. Young Link (Attack 8)\n0x40. Young Link (Grunt 1) [Same sample as 14]\n0x41. Unknown Sound [1]\n0x42. Young Link (Damage 6?)\n0x43. Young Link (Shiver)\n0x44. \u26d4 (nullptr)\n0x45. Young Link (Sneeze)\n0x46. Young Link? (Sneeze 2?)\n0x47. Young Link? (Stretch 1?)\n0x48. Young Link (Stretch 2)\n0x49. Young Link (Stretch 3)\n0x4A. Young Link (Stretch 4)\n0x4B. Young Link (Stretch 5)\n0x4C. Young Link (Stretch 6)\n0x4D. Young Link (Damage 7?)\n0x4E. Unknown Sound [2]\n0x4F. Unknown Sound [3]\n0x50. Unknown Sound [3]\n0x51. Unknown Sound [3]\n0x52. Unknown Sound [3]\n0x53. Unknown Sound [3]\n0x54. Unknown Sound [3]\n0x55. Unknown Sound [3]\n0x56. Unknown Sound [3]\n0x57. Unknown Sound [3]\n0x58. Unknown Sound [3]\n0x59. \u26d4 (nullptr)\n0x5A. \u26d4 (nullptr)\n0x5B. \u26d4 (nullptr)\n0x5C. \u26d4 (nullptr)\n0x5D. Gorman Bros. (\"Uwahh!\")\n0x5E. Mutoh (\"Kaaah!\")\n0x5F. Gorman Bros.? (???)\n0x60. Gorman Bros. (\"Ha!\")\n0x61. Great Fairy (Laugh 1)\n0x62. Great Fairy (Laugh 2)\n0x63. Ikana Castle Stalfos (Laugh)\n0x64. Ikana Castle Stalfos (Damage)\n0x65. Igos Du Ikana (Gasp)\n0x66. Ikana Castle Stalfos (\"Rawr\")\n0x67. Ikana Castle Stalfos (\"Rawr\") [Same sample as 66]\n0x68. \u26d4 (nullptr)\n0x69. \u26d4 (nullptr)\n0x6A. \u26d4 (nullptr)\n0x6B. \u26d4 (nullptr)\n0x6C. \u26d4 (nullptr)\n0x6D. \u26d4 (nullptr)\n0x6E. \u26d4 (nullptr)\n0x6F. \u26d4 (nullptr)\n0x70. \u26d4 (nullptr)\n0x71. \u26d4 (nullptr)\n0x72. \u26d4 (nullptr)\n0x73. \u26d4 (nullptr)\n0x74. \u26d4 (nullptr)\n0x75. \u26d4 (nullptr)\n0x76. \u26d4 (nullptr)\n0x77. \u26d4 (nullptr)\n0x78. \u26d4 (nullptr)\n0x79. \u26d4 (nullptr)\n0x7A. \u26d4 (nullptr)\n0x7B. \u26d4 (nullptr)\n0x7C. \u26d4 (nullptr)\n0x7D. \u26d4 (nullptr)\n0x7E. \u26d4 (nullptr)\n0x7F. \u26d4 (nullptr)\n0x80. \u26d4 (nullptr)\n0x81. Great Fairy (Giggle 1)\n0x82. Great Fairy (Giggle 2)\n0x83. \u26d4 (nullptr)\n0x84. \u26d4 (nullptr)\n0x85. Unknown Laugh\n0x86. Unknown Laugh [Same sample as 85]\n0x87. Unknown Laugh [Same sample as 85]\n0x88. Unknown Laugh [Same sample as 85]\n0x89. Goron Voice? (\"Awww...\")\n0x8A. Deku Link (Gasp)\n0x8B. Young Link? (\"Ha!\" 2)\n0x8C. Young Link? (\"Ha!\" 3)\n0x8D. Traveling Goron Voice? (Exhale 1)\n0x8E. Traveling Goron Voice? (Exhale 2)\n0x8F. Traveling Goron Voice? (Exhale 3)\n0x90. Traveling Goron Voice? (Exhale 4)\n0x91. \u26d4 (nullptr)\n0x92. \u26d4 (nullptr)\n0x93. \u26d4 (nullptr)\n0x94. \u26d4 (nullptr)\n0x95. \u26d4 (nullptr)\n0x96. \u26d4 (nullptr)\n0x97. \u26d4 (nullptr)\n0x98. \u26d4 (nullptr)\n0x99. \u26d4 (nullptr)\n0x9A. \u26d4 (nullptr)\n0x9B. \u26d4 (nullptr)\n0x9C. \u26d4 (nullptr)\n0x9D. \u26d4 (nullptr)\n0x9E. \u26d4 (nullptr)\n0x9F. \u26d4 (nullptr)\n0xA0. \u26d4 (nullptr)\n0xA1. \u26d4 (nullptr)\n0xA2. \u26d4 (nullptr)\n0xA3. \u26d4 (nullptr)\n0xA4. \u26d4 (nullptr)\n0xA5. \u26d4 (nullptr)\n0xA6. \u26d4 (nullptr)\n0xA7. \u26d4 (nullptr)\n0xA8. \u26d4 (nullptr)\n0xA9. \u26d4 (nullptr)\n0xAA. \u26d4 (nullptr)\n0xAB. \u26d4 (nullptr)\n0xAC. \u26d4 (nullptr)\n0xAD. \u26d4 (nullptr)\n0xAE. \u26d4 (nullptr)\n0xAF. \u26d4 (nullptr)\n0xB0. \u26d4 (nullptr)\n0xB1. \u26d4 (nullptr)\n0xB2. \u26d4 (nullptr)\n0xB3. \u26d4 (nullptr)\n0xB4. \u26d4 (nullptr)\n0xB5. \u26d4 (nullptr)\n0xB6. \u26d4 (nullptr)\n0xB7. \u26d4 (nullptr)\n0xB8. \u26d4 (nullptr)\n0xB9. \u26d4 (nullptr)\n0xBA. \u26d4 (nullptr)\n0xBB. \u26d4 (nullptr)\n0xBC. \u26d4 (nullptr)\n0xBD. \u26d4 (nullptr)\n0xBE. \u26d4 (nullptr)\n0xBF. \u26d4 (nullptr)\n0xC0. \u26d4 (nullptr)\n0xC1. Young Link (\"Hup\" 1) [Same sample as 1C]\n0xC2. Young Link (\"Ha!\" 1) [Same sample as 1D]\n0xC3. Young Link (\"Hup\" 2) [Same sample as 1E]\n0xC4. Young Link (\"Hup\" 3) [Same sample as 1F]\n0xC5. Young Link (\"Hyah!\") [Same sample as 20]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-number-7f_2","title":"Drums (Program Number: 7F)","text":"<p>Below is a list of the \"drums\" inside of audiobank <code>0x00</code>. Unlike instrument index pointers, percussion index pointers represent a MIDI note instead of a program number.</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Drum List: <pre><code>0x00. Tambourine Slap\n0x01. Sand Footstep SFX\n0x02. Garbage Data\n0x03. Garbage Data\n0x04. Young Link? (Ledge Related)\n0x05. Young Link (Fall Start)\n0x06. Young Link (Fall Scream)\n0x07. Goron Link (Damage?)\n0x08. Garbage Data\n0x09. Kaching SFX (Clock Town Mailbox)\n0x0A. Clap SFX [1]\n0x0B. Clap SFX [2]\n0x0C. Clap SFX [3]\n0x0D. Clap SFX [4]\n0x0E. Clap SFX [5]\n0x0F. Clap SFX [6]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-number-0x00-to-0x7d_1","title":"Instruments (Program Number: 0x00 to 0x7D)","text":"<p>Below is a list of the \"instruments\" inside of audiobank <code>0x01</code>. These work exactly as regular instruments do, you can even import them into a custom audiobank as an instrument and use it in a sequence just like any regular instrument; and this is a common structure for the sound effects within the game.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x7D (125)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Some sound effects using the instrument structure have multiple samples, the sound effects using multiple samples indicate which region contains which sound effect sample (e.g. <code>0x00: Low: SFX name, Mid: SFX Name, High: SFX Name</code>). Any sound effects without multiple regions use the mid (primary) sample.</p> <p>Instrument List: <pre><code>0x00. Balloon Inflating SFX 1\n0x01. Wallmaster Rising SFX\n0x02. Balloon Inflating SFX 2\n0x03. Mid: Buzz SFX, High: Deku Baba Attack SFX\n0x04. Mid: Metal Clink SFX, High: White Noise SFX\n0x05. Hookshot Related SFX? (Unsure)\n0x06. Long Explosion SFX\n0x07. Mid: Real Bombchu Pur SFX, High: Real Bombchu Passive SFX\n0x08. Pop/Thud SFX\n0x09. Dodongo Roar SFX\n0x0A. Doom Monster Roar SFX\n0x0B. Skulltula Skitter SFX\n0x0C. Spider Egg Hatch SFX\n0x0D. Rock Explosion SFX\n0x0E. Buzz SFX (Frog Croak?)\n0x0F. Clicking SFX (Keese Attack?)\n0x10. Wing Flap SFX\n0x11. Volvagia Pained Roar SFX\n0x12. Scratch/Electric SFX (Skulltula Related?)\n0x13. \"Ah\" SFX (Frog Croak?)\n0x14. Dinolfos Laughing SFX\n0x15. Low: Dinolfos SFX, High: Dinolfos Footstep SFX\n0x16. Deku Scrub Voice SFX\n0x17. Glass Break SFX (Ice?)\n0x18. Gulp SFX 1\n0x19. Deku Baba Beak Snap SFX\n0x1A. Wind SFX\n0x1B. Crow/Eagle/Bat SFX\n0x1C. Igos Du Ikana Sword Swing SFX\n0x1D. Stalchild Laughing SFX\n0x1E. Stalfos Laughing SFX\n0x1F. Garo Appearing SFX\n0x20. Thunder SFX (Deku Baba Death?)\n0x21. Electric SFX (OOT Ganon Summoning Orb)\n0x22. Whoosh SFX\n0x23. Armos Awakening SFX\n0x24. Splash SFX (Link/Octorok/etc)\n0x25. Splish SFX (Footsteps on Watery Surfaces)\n0x26. Boulder Explosion SFX\n0x27. Mid: Pamela's Father SFX, High: Goron Falling Asleep SFX\n0x28. Poe/Garo Laugh SFX\n0x29. Bubbling SFX (Gyorg Cutscene)\n0x2A. Poe Defeat Shriek SFX\n0x2B. Mid: Goron \"Hmm?\" SFX, High: Goron \"Ooooh...\" SFX\n0x2C. Mid: Wolfos Howl SFX, High: Crow Caw SFX\n0x2D. Phantom Ganon \"Ha!\" SFX\n0x2E. \u26d4 (nullptr)\n0x2F. Deku Scrub SFX\n0x30. Wizzrobe Defeat SFX\n0x31. Thud/Impact SFX\n0x32. Thud SFX\n0x33. Unknown Growl SFX\n0x34. Synth SFX\n0x35. Explosion SFX\n0x36. Moon Speaking/Moving SFX\n0x37. Twinmold Damage SFX\n0x38. Laughing SFX 1\n0x39. Real Bombchu SFX\n0x3A. Bomb Fuse SFX\n0x3B. Odolwa Calling Bugs SFX\n0x3C. Odolwa Passive Taunt SFX\n0x3D. Odolwa Calling Moths SFX\n0x3E. Laughing SFX 2\n0x3F. Majora's Incarnation Head SFX\n0x40. Gomess Shout SFX\n0x41. SM64 Bowser Defeat SFX\n0x42. Laughing SFX 3\n0x43. Hiploop Charge Footstep SFX\n0x44. Wizzrobe Initiating Attack SFX\n0x45. Wizzrobe Afterimage SFX\n0x46. Thunder SFX\n0x47. Pop/Slap SFX\n0x48. White Noise SFX (Water Noise)\n0x49. Synth SFX (Death Armos?)\n0x4A. Garo Warp Attack SFX\n0x4B. Garo Warp Away SFX\n0x4C. Rumble SFX\n0x4D. Sword Unsheathe SFX\n0x4E. Nejiron Grunt SFX\n0x4F. Chuchu Jumping SFX\n0x50. Chuchu Landing SFX\n0x51. Chuchu Jiggle SFX\n0x52. Mid: Goron Snore Inhale SFX, High: Goron Snore Exhale SFX\n0x53. Mad Jelly SFX\n0x54. Wizzrobe Casts Spell SFX\n0x55. Wizzrobe Damage SFX\n0x56. Witch Shriek SFX\n0x57. Crunchy Footstep SFX\n0x58. Witch \"Hmm\" SFX\n0x59. Gulp SFX 2\n0x5A. Majora's Incarnation Voice SFX\n0x5B. Wizzrobe Laughing SFX\n0x5C. Snapper Idle SFX\n0x5D. Snapper Overturned SFX\n0x5E. Unknown Chip SFX\n0x5F. Unknown Chip SFX\n0x60. Whoosh SFX\n0x61. Deku Bubble Pop/Jim Peashooter SFX\n0x62. Poe Hovering SFX (Unsure)\n0x63. Bombchu Growl SFX\n0x64. Majora's Wrath Spinners SFX (Unsure)\n0x65. Majora's Incarnation Clucking SFX 1\n0x66. Majora's Incarnation Clucking SFX 2\n0x67. Bird Chirp SFX\n0x68. Bird Chitter SFX\n0x69. Bird Trill SFX\n0x6A. Bio Deku Baba Screech SFX\n0x6B. Blue Warp Pad SFX\n0x6C. Orchestral Timpani\n0x6D. Majora's Wrath Whip SFX 1\n0x6E. Majora's Wrath Whip SFX 2\n0x6F. Majora's Wrath Whip SFX 3\n0x70. Boss Remains Awaken SFX\n0x71. Majora's Wrath Whip SFX 4\n0x72. Majora's Wrath Whip SFX 5\n0x73. Goron Elder's Son Crying SFX\n0x74. Beamos Laser SFX (Unsure)\n0x75. Static/Glass Break Noise SFX (Unsure)\n0x76. Drum SFX? (Unsure)\n0x77. Eeno SFX\n0x78. Adult Link Falling SFX\n0x79. Gekko Calling Snapper SFX\n0x7A. Gekko Damage SFX\n0x7B. Gekko Climing Walls SFX\n0x7C. Ice Shattering SFX\n0x7D. Fairy Flying SFX\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#sound-effects-program-number-7e_3","title":"Sound Effects (Program Number: 7E)","text":"<p>Below is a list of the \"sound effects\" inside of audiobank <code>0x01</code>. These work nearly identical to how percussion sets work except for how they are structured, they cannot be imported into audiobanks because their structure is built directly into a pointer array within <code>&lt;absfxlist&gt;</code>.</p> <p>You can access these sound effects when using this audiobank using MIDI program number(s): <code>0x7E (126)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code> </p> <p>Data Structure</p> <p>Sound effects can only have one sample per sound effect, but some sound effect indexes point to the same sample in the audiobank. The indexes that use the same sample as another index are marked: <code>[Same sample as (index value)]</code></p> <p>Sound Effect List: <pre><code>0x00. Young Link? (Damage Voice?)\n0x01. Young Link? (Damage Scream?)\n0x02. Young Link? (Attack Voice 1?)\n0x03. Young Link? (Attack Voice 2?)\n0x04. Young Link? (Attack Voice 3?)\n0x05. Redead Shriek?\n0x06. Deku Baba Damage\n0x07. Unknown Gasp\n0x08. Unknown Scream\n0x09. Unknown \"Ha\" Sound\n0x0A. Unknown \"Yah!\" Sound\n0x0B. Witch Shriek?\n0x0C. Young Link? (Breath Sound 1)\n0x0D. Young Link? (Breath Sound 2)\n0x0E. Goron Voice (\"Aww...\")\n0x0F. Unknown Synth Sound\n0x10. Unknown Monster Sound?\n0x11. Baby Goron Voice (Cry 1)\n0x12. Baby Goron Voice (Hiccup)\n0x13. Baby Goron Voice (Cry 2?)\n0x14. Unknown \"Hmph\" Sound\n0x15. Unknown \"Eheh\" Sound\n0x16. Unknown Laugh Sound 1\n0x17. Unknown Laugh Sound 2\n0x18. Unknown \"Ahah\" Sound\n0x19. Unknown Laugh Sound 3\n0x1A. Unknown \"Rawr\" Sound\n0x1B. Unknown Honk Sound\n0x1C. Unknown Laugh Sound 4\n0x1D. Unknown Sound 1\n0x1E. Unknown Damage Sound 1\n0x1F. Unknown Damage Sound 2\n0x20. Unknown Yell Sound\n0x21. Unknown Damage Sound 3\n0x22. Unknown Attack Sound\n0x23. Unknown \"AHHH\" Sound\n0x24. Majora's Wrath Attack Sound 1\n0x25. Majora's Wrath Attack Sound 2\n0x26. Majora's Wrath Attack Sound 3\n0x27. Majora's Wrath Shriek Sound 1\n0x28. Majora's Wrath Laugh Sound\n0x29. Majora's Wrath Attack Sound 4\n0x2A. Majora's Wrath Shriek Sound 2\n0x2B. Majora's Wrath Death Scream Sound\n0x2C. Majora's Incarnation Humming Sound\n0x2D. Majora's Incarnation Intro Sound 1?\n0x2E. Majora's Incarnation Intro Sound 2?\n0x2F. Majora's Incarnation Intro Sound 3?\n0x30. Unknown Majora's Incarnation Sound\n0x31. Majora's Incarnation Shriek Sound\n0x32. Majora's Incarnation Death Scream Sound\n0x33. Unknown Laugh Sound 5\n0x34. Skull Kid Laugh Sound 1?\n0x35. Unknown Skull Kid Sound [1]\n0x36. Skull Kid Gasp Sound\n0x37. Skull Kid \"Ha\" Sound\n0x38. Skull Kid Laugh Sound 2\n0x39. Skull Kid Laugh Sound 3\n0x3A. Skull Kid Laugh Sound 4\n0x3B. Skull Kid \"Hmph\" Sound\n0x3C. Unknown Skull Kid Sound [2]\n0x3D. Unknown Skull Kid Sound [3]\n0x3E. Unknown Skull Kid Sound [4]\n0x3F. Unknown Skull Kid Sound [5]\n0x40. Skull Kid Calls Moon Sound\n0x41. Skull Kid Laugh Sound 5\n0x42. Skull Kid Laugh Sound 6\n0x43. Skull Kid Laugh Sound 7\n0x44. Unknown Skull Kid Sound [6]\n0x45. Odolwa Drum Sound\n0x46. Skull Kid Laugh Sound 7\n0x47. Skull Kid Calls Moon Sound [Same sample as 40]\n0x48. Unknown Laugh Sound 4\n0x49. Unknown Sound 1 [Same sample as 1D]\n0x4A. Unknown Yell Sound [Same sample as 20]\n0x4B. Unknown \"AHHH\" Sound [Same sample as 23]\n0x4C. Unknown Honk Sound [Same sample as 1B]\n0x4D. Unknown Grunt Sound\n0x4E. Goron \"Huh\" Sound\n0x4F. Goron Voice (\"Aww...\") [Same sample as 0E]\n0x50. Goron \"Huh\" Sound [Same sample as 0x4E]\n0x51. Goron \"Ahh\" Sound\n0x52. Goron \"Hmm\" &amp; Witch \"Hmm\" Sound\n0x53. Unknown Static Sound\n0x54. Unknown Sound 2\n0x55. Unknown Sound 3\n0x56. Unknown Laugh Sound 6\n0x57. Unknown Sound 4\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-number-7f_3","title":"Drums (Program Number: 7F)","text":"<p>Below is a list of the \"drums\" inside of audiobank <code>0x00</code>. There is one single drum pointer, but it is just a null pointer value with no sample being pointed to.</p> <p>Drum List: <pre><code>0x00. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x14_1","title":"Instruments (Program Name: 0x00 to 0x14)","text":"<p>Below is a list of the \"instruments\" inside of audiobank <code>0x02</code>. These work exactly as regular instruments do, you can even import them into a custom audiobank as an instrument and use it in a sequence just like any regular instrument; and this is a common structure for the sound effects within the game.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x14 (20)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Bird Chirp SFX 1\n0x02. Bird Chitter SFX\n0x03. Bird Trill SFX\n0x04. Bird Song SFX\n0x05. Bird Chirp SFX 2\n0x06. Crow Caw SFX\n0x07. Swamp Bird SFX (Some type of honking bird)\n0x08. Peacock SFX?\n0x09. Bird Twitter SFX\n0x0A. Rooster Crow SFX\n0x0B. Owl Hoot SFX\n0x0C. Loon Call SFX (Tremolo)\n0x0D. Bird Chirp SFX 3\n0x0E. Guay Caw SFX\n0x0F. White Noise SFX (Waterfall)\n0x10. Wind SFX (Haunted Wasteland Sandstorm)\n0x11. Wind SFX 2 (Haunted Wasteland Sandstorm)\n0x12. Rain SFX\n0x13. Thunder SFX\n0x14. Thunder SFX 2\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_6","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x03</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Oboe\n0x02. Clarinet\n0x03. Bassoon\n0x04. French Horn\n0x05. Trumpet (C5)\n0x06. Trumpet (G4)\n0x07. Tuba\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. Piano\n0x0E. Harp\n0x0F. Marimba\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_15","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x03</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_7","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x04</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Ocarina\n0x02. Bassoon\n0x03. Oboe\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. Pizz. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_16","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x04</code>. This percussion set is referred to as \"Tambourine Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Tambourine Slap: <code>A1 (21)</code> to <code>B3 (47)</code> - Tambourine Tap: <code>C4 (48)</code> to <code>C\u266f4 (49)</code> - Tambourine Shake: <code>D4 (50)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Tambourine Slap [1]\n0x01. Tambourine Slap [2]\n0x02. Tambourine Slap [3]\n0x03. Tambourine Slap [4]\n0x04. Tambourine Slap [5]\n0x05. Tambourine Slap [6]\n0x06. Tambourine Slap [7]\n0x07. Tambourine Slap [8]\n0x08. Tambourine Slap [9]\n0x09. Tambourine Slap [10]\n0x0A. Tambourine Slap [11]\n0x0B. Tambourine Slap [12]\n0x0C. Tambourine Slap [13]\n0x0D. Tambourine Slap [14]\n0x0E. Tambourine Slap [15]\n0x0F. Tambourine Slap [16]\n0x10. Tambourine Slap [17]\n0x11. Tambourine Slap [18]\n0x12. Tambourine Slap [19]\n0x13. Tambourine Slap [20]\n0x14. Tambourine Slap [21]\n0x15. Tambourine Slap [22]\n0x16. Tambourine Slap [23]\n0x17. Tambourine Slap [24]\n0x18. Tambourine Slap [25]\n0x19. Tambourine Slap [26]\n0x1A. Tambourine Slap [27]\n0x1B. Tambourine Tap [1]\n0x1C. Tambourine Tap [2]\n0x1D. Tambourine Shake [1]\n0x1E. Tambourine Shake [2]\n0x1F. Tambourine Shake [3]\n0x20. Tambourine Shake [4]\n0x21. Tambourine Shake [5]\n0x22. Tambourine Shake [6]\n0x23. Tambourine Shake [7]\n0x24. Tambourine Shake [8]\n0x25. Tambourine Shake [9]\n0x26. Tambourine Shake [10]\n0x27. Tambourine Shake [11]\n0x28. Tambourine Shake [12]\n0x29. Tambourine Shake [13]\n0x2A. Tambourine Shake [14]\n0x2B. Tambourine Shake [15]\n0x2C. Tambourine Shake [16]\n0x2D. Tambourine Shake [17]\n0x2E. Tambourine Shake [18]\n0x2F. Tambourine Shake [19]\n0x30. Tambourine Shake [20]\n0x31. Tambourine Shake [21]\n0x32. Tambourine Shake [22]\n0x33. Tambourine Shake [23]\n0x34. Tambourine Shake [24]\n0x35. Tambourine Shake [25]\n0x36. Tambourine Shake [25*]\n0x37. Tambourine Shake [25*]\n0x38. Tambourine Shake [25*]\n0x39. Tambourine Shake [25*]\n0x3A. Tambourine Shake [25*]\n0x3B. Tambourine Shake [25*]\n0x3C. Tambourine Shake [25*]\n0x3D. Tambourine Shake [25*]\n0x3E. Tambourine Shake [25*]\n0x3F. Tambourine Shake [25*]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_5","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x05</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (09)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Harmonica\n0x01. Nylon Str. Guitar\n0x02. Nylon Str. Guitar\n0x03. Ocarina\n0x04. Glockenspiel\n0x05. Bandoneon\n0x06. Bandoneon\n0x07. Tuba\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_17","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x05</code>. This percussion set is referred to as \"Tambourine Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Tambourine Slap: <code>A1 (21)</code> to <code>B3 (47)</code> - Tambourine Tap: <code>C4 (48)</code> to <code>C\u266f4 (49)</code> - Tambourine Shake: <code>D4 (50)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Tambourine Slap [1]\n0x01. Tambourine Slap [2]\n0x02. Tambourine Slap [3]\n0x03. Tambourine Slap [4]\n0x04. Tambourine Slap [5]\n0x05. Tambourine Slap [6]\n0x06. Tambourine Slap [7]\n0x07. Tambourine Slap [8]\n0x08. Tambourine Slap [9]\n0x09. Tambourine Slap [10]\n0x0A. Tambourine Slap [11]\n0x0B. Tambourine Slap [12]\n0x0C. Tambourine Slap [13]\n0x0D. Tambourine Slap [14]\n0x0E. Tambourine Slap [15]\n0x0F. Tambourine Slap [16]\n0x10. Tambourine Slap [17]\n0x11. Tambourine Slap [18]\n0x12. Tambourine Slap [19]\n0x13. Tambourine Slap [20]\n0x14. Tambourine Slap [21]\n0x15. Tambourine Slap [22]\n0x16. Tambourine Slap [23]\n0x17. Tambourine Slap [24]\n0x18. Tambourine Slap [25]\n0x19. Tambourine Slap [26]\n0x1A. Tambourine Slap [27]\n0x1B. Tambourine Tap [1]\n0x1C. Tambourine Tap [2]\n0x1D. Tambourine Shake [1]\n0x1E. Tambourine Shake [2]\n0x1F. Tambourine Shake [3]\n0x20. Tambourine Shake [4]\n0x21. Tambourine Shake [5]\n0x22. Tambourine Shake [6]\n0x23. Tambourine Shake [7]\n0x24. Tambourine Shake [8]\n0x25. Tambourine Shake [9]\n0x26. Tambourine Shake [10]\n0x27. Tambourine Shake [11]\n0x28. Tambourine Shake [12]\n0x29. Tambourine Shake [13]\n0x2A. Tambourine Shake [14]\n0x2B. Tambourine Shake [15]\n0x2C. Tambourine Shake [16]\n0x2D. Tambourine Shake [17]\n0x2E. Tambourine Shake [18]\n0x2F. Tambourine Shake [19]\n0x30. Tambourine Shake [20]\n0x31. Tambourine Shake [21]\n0x32. Tambourine Shake [22]\n0x33. Tambourine Shake [23]\n0x34. Tambourine Shake [24]\n0x35. Tambourine Shake [25]\n0x36. Tambourine Shake [25*]\n0x37. Tambourine Shake [25*]\n0x38. Tambourine Shake [25*]\n0x39. Tambourine Shake [25*]\n0x3A. Tambourine Shake [25*]\n0x3B. Tambourine Shake [25*]\n0x3C. Tambourine Shake [25*]\n0x3D. Tambourine Shake [25*]\n0x3E. Tambourine Shake [25*]\n0x3F. Tambourine Shake [25*]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c_3","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x06</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Harp\n0x01. Harp\n0x02. Harp\n0x03. Harp ALT (Mid Only)\n0x04. Slow Strings\n0x05. Ocarina\n0x06. Male Choir\n0x07. Male Choir\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_18","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x06</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_8","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x07</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Lulu's Voice (Release: 248)\n0x01. Lulu's Voice (Release: 247)\n0x02. Sustain E. Guitar\n0x03. Sustain E. Guitar ALT (Attack Time: 32)\n0x04. Sustain E. Guitar ALT (Attack Time: 32)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. Strings\n0x0C. Strings\n0x0D. Solo Violin\n0x0E. Solo Violin\n0x0F. Carillon Bell (Release: 248, Non-looping) (Unused in sequence)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_5","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x08</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Banjo\n0x01. Banjo\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. Pizz. Double Bass\n0x06. Harmonica\n0x07. Nylon Str. Guitar\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. \u26d4 (nullptr)\n0x0D. Solo Violin\n0x0E. Solo Violin\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c_4","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x09</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Harp\n0x01. Harp\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. Slow Strings\n0x05. Ocarina\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_19","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x09</code>. This percussion set is referred to as \"Orchestra Kit\", however, audiobank <code>0x09</code> uses a variant with 20 less \"Timpani\" drums making it a partial \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>E5 (64)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. \u26d4 (nullptr)\n0x2C. \u26d4 (nullptr)\n0x2D. \u26d4 (nullptr)\n0x2E. \u26d4 (nullptr)\n0x2F. \u26d4 (nullptr)\n0x30. \u26d4 (nullptr)\n0x31. \u26d4 (nullptr)\n0x32. \u26d4 (nullptr)\n0x33. \u26d4 (nullptr)\n0x34. \u26d4 (nullptr)\n0x35. \u26d4 (nullptr)\n0x36. \u26d4 (nullptr)\n0x37. \u26d4 (nullptr)\n0x38. \u26d4 (nullptr)\n0x39. \u26d4 (nullptr)\n0x3A. \u26d4 (nullptr)\n0x3B. \u26d4 (nullptr)\n0x3C. \u26d4 (nullptr)\n0x3D. \u26d4 (nullptr)\n0x3E. \u26d4 (nullptr)\n0x3F. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_6","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0A</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Clarinet\n0x02. Clarinet\n0x03. Bandoneon\n0x04. Glockenspiel\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_20","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x0A</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_7","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0B</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Steel Drum\n0x01. Digi Pad 04\n0x02. Nylon Str. Guitar\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_21","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x0B</code>. This percussion set is referred to as \"Conga &amp; Shaker Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Conga Closed: <code>A1 (21)</code> to <code>F3 (41)</code> - Conga Open: <code>F\u266f3 (42)</code> to <code>C5 (60)</code> - Conga Slap: <code>C\u266f5 (61)</code> to <code>G\u266f6 (80)</code> - Shaker: <code>A6 (81)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Conga Closed [1]\n0x01. Conga Closed [2]\n0x02. Conga Closed [3]\n0x03. Conga Closed [4]\n0x04. Conga Closed [5]\n0x05. Conga Closed [6]\n0x06. Conga Closed [7]\n0x07. Conga Closed [8]\n0x08. Conga Closed [9]\n0x09. Conga Closed [10]\n0x0A. Conga Closed [11]\n0x0B. Conga Closed [12]\n0x0C. Conga Closed [13]\n0x0D. Conga Closed [14]\n0x0E. Conga Closed [15]\n0x0F. Conga Closed [16]\n0x10. Conga Closed [17]\n0x11. Conga Closed [18]\n0x12. Conga Closed [19]\n0x13. Conga Closed [20]\n0x14. Conga Closed [21]\n0x15. Conga Open [1]\n0x16. Conga Open [2]\n0x17. Conga Open [3]\n0x18. Conga Open [4]\n0x19. Conga Open [5]\n0x1A. Conga Open [6]\n0x1B. Conga Open [7]\n0x1C. Conga Open [8]\n0x1D. Conga Open [9]\n0x1E. Conga Open [10]\n0x1F. Conga Open [11]\n0x20. Conga Open [12]\n0x21. Conga Open [13]\n0x22. Conga Open [14]\n0x23. Conga Open [15]\n0x24. Conga Open [16]\n0x25. Conga Open [17]\n0x26. Conga Open [18]\n0x27. Conga Open [19]\n0x28. Conga Slap [1]\n0x29. Conga Slap [2]\n0x2A. Conga Slap [3]\n0x2B. Conga Slap [4]\n0x2C. Conga Slap [5]\n0x2D. Conga Slap [6]\n0x2E. Conga Slap [7]\n0x2F. Conga Slap [8]\n0x30. Conga Slap [9]\n0x31. Conga Slap [10]\n0x32. Conga Slap [11]\n0x33. Conga Slap [12]\n0x34. Conga Slap [13]\n0x35. Conga Slap [14]\n0x36. Conga Slap [15]\n0x37. Conga Slap [16]\n0x38. Conga Slap [17]\n0x39. Conga Slap [18]\n0x3A. Conga Slap [19]\n0x3B. Conga Slap [20]\n0x3C. Shaker [1]\n0x3D. Shaker [2]\n0x3E. Shaker [3]\n0x3F. Shaker [4]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0a_1","title":"Instruments (Program Name: 0x00 to 0x0A)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0C</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0A (10)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Nylon Str. Guitar\n0x01. Bandoneon\n0x02. Pizz. Double Bass\n0x03. Trumpet (G4)\n0x04. Trumpet (C5)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Cowbell\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_22","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x0C</code>. This percussion set is referred to as \"Conga &amp; Shaker Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Conga Closed: <code>A1 (21)</code> to <code>F3 (41)</code> - Conga Open: <code>F\u266f3 (42)</code> to <code>C5 (60)</code> - Conga Slap: <code>C\u266f5 (61)</code> to <code>G\u266f6 (80)</code> - Shaker: <code>A6 (81)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Conga Closed [1]\n0x01. Conga Closed [2]\n0x02. Conga Closed [3]\n0x03. Conga Closed [4]\n0x04. Conga Closed [5]\n0x05. Conga Closed [6]\n0x06. Conga Closed [7]\n0x07. Conga Closed [8]\n0x08. Conga Closed [9]\n0x09. Conga Closed [10]\n0x0A. Conga Closed [11]\n0x0B. Conga Closed [12]\n0x0C. Conga Closed [13]\n0x0D. Conga Closed [14]\n0x0E. Conga Closed [15]\n0x0F. Conga Closed [16]\n0x10. Conga Closed [17]\n0x11. Conga Closed [18]\n0x12. Conga Closed [19]\n0x13. Conga Closed [20]\n0x14. Conga Closed [21]\n0x15. Conga Open [1]\n0x16. Conga Open [2]\n0x17. Conga Open [3]\n0x18. Conga Open [4]\n0x19. Conga Open [5]\n0x1A. Conga Open [6]\n0x1B. Conga Open [7]\n0x1C. Conga Open [8]\n0x1D. Conga Open [9]\n0x1E. Conga Open [10]\n0x1F. Conga Open [11]\n0x20. Conga Open [12]\n0x21. Conga Open [13]\n0x22. Conga Open [14]\n0x23. Conga Open [15]\n0x24. Conga Open [16]\n0x25. Conga Open [17]\n0x26. Conga Open [18]\n0x27. Conga Open [19]\n0x28. Conga Slap [1]\n0x29. Conga Slap [2]\n0x2A. Conga Slap [3]\n0x2B. Conga Slap [4]\n0x2C. Conga Slap [5]\n0x2D. Conga Slap [6]\n0x2E. Conga Slap [7]\n0x2F. Conga Slap [8]\n0x30. Conga Slap [9]\n0x31. Conga Slap [10]\n0x32. Conga Slap [11]\n0x33. Conga Slap [12]\n0x34. Conga Slap [13]\n0x35. Conga Slap [14]\n0x36. Conga Slap [15]\n0x37. Conga Slap [16]\n0x38. Conga Slap [17]\n0x39. Conga Slap [18]\n0x3A. Conga Slap [19]\n0x3B. Conga Slap [20]\n0x3C. Shaker [1]\n0x3D. Shaker [2]\n0x3E. Shaker [3]\n0x3F. Shaker [4]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x04_3","title":"Instruments (Program Name: 0x00 to 0x04)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0D</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x04 (4)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Djembe\n0x02. \u26d4 (nullptr)\n0x03. Bent Conga\n0x04. Gong &amp; Chimes\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0b_2","title":"Instruments (Program Name: 0x00 to 0x0B)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0E</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0B (11)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Djembe\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. Piccolo\n0x06. \u26d4 (nullptr)\n0x07. Piccolo\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_23","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x0E</code>. This percussion set is referred to as \"Gong &amp; Chimes Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Gong: <code>A1 (21)</code> to <code>F\u266f4 (54)</code> - Chimes: <code>G4 (55)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Gong [1]\n0x01. Gong [2]\n0x02. Gong [3]\n0x03. Gong [4]\n0x04. Gong [5]\n0x05. Gong [6]\n0x06. Gong [7]\n0x07. Gong [8]\n0x08. Gong [9]\n0x09. Gong [10]\n0x0A. Gong [11]\n0x0B. Gong [12]\n0x0C. Gong [13]\n0x0D. Gong [14]\n0x0E. Gong [15]\n0x0F. Gong [16]\n0x10. Gong [17]\n0x11. Gong [18]\n0x12. Gong [19]\n0x13. Gong [20]\n0x14. Gong [21]\n0x15. Gong [22]\n0x16. Gong [23]\n0x17. Gong [24]\n0x18. Gong [25]\n0x19. Gong [26]\n0x1A. Gong [27]\n0x1B. Gong [28]\n0x1C. Gong [29]\n0x1D. Gong [30]\n0x1E. Gong [31]\n0x1F. Gong [32]\n0x20. Gong [33]\n0x21. Gong [34]\n0x22. Chimes [1]\n0x23. Chimes [2]\n0x24. Chimes [3]\n0x25. Chimes [4]\n0x26. Chimes [5]\n0x27. Chimes [6]\n0x28. Chimes [7]\n0x29. Chimes [8]\n0x2A. Chimes [9]\n0x2B. Chimes [10]\n0x2C. Chimes [11]\n0x2D. Chimes [12]\n0x2E. Chimes [13]\n0x2F. Chimes [14]\n0x30. Chimes [15]\n0x31. Chimes [16]\n0x32. Chimes [17]\n0x33. Chimes [18]\n0x34. Chimes [19]\n0x35. Chimes [20]\n0x36. Chimes [21]\n0x37. Chimes [22]\n0x38. Chimes [23]\n0x39. Chimes [24]\n0x3A. Chimes [25]\n0x3B. Chimes [26]\n0x3C. Chimes [27]\n0x3D. Chimes [28]\n0x3E. Chimes [29]\n0x3F. Chimes [30]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_6","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x0F</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. \u26d4 (nullptr)\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. Trumpet (C5)\n0x06. Trumpet (G4)\n0x07. Tuba\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. \u26d4 (nullptr)\n0x0D. \u26d4 (nullptr)\n0x0E. Harp\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_24","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x0F</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_7","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x10</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Oboe\n0x02. \u26d4 (nullptr)\n0x03. Bassooon\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. \u26d4 (nullptr)\n0x0E. Harp\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_9","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x11</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Chinese Gong\n0x01. Shehnai\n0x02. \u26d4 (nullptr)\n0x03. Nylon Str. Guitar ALT\n0x04. Bandoneon\n0x05. Trumpet (C5)\n0x06. Trumpet (G4)\n0x07. Tuba\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Marimba\n0x0D. Synth Strings\n0x0E. Harp\n0x0F. Piano\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_25","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x11</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c_5","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x12</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Ocarina\n0x01. Trumpet (B3)\n0x02. Steel Str. Guitar\n0x03. Rawhide Drum\n0x04. Strings\n0x05. Strings\n0x06. Pizz. Strings\n0x07. Harp\n0x08. Goron Elder Son's Voice\n0x09. \u26d4 (nullptr)\n0x0A. Male Choir\n0x0B. Female Choir\n0x0C. Giants' Voice\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_8","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x13</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Fretless Bass\n0x01. Tenor Saxophone\n0x02. Muted E. Guitar\n0x03. Steel Str. Guitar\n0x04. E. Rhodes Piano\n0x05. Bent Conga\n0x06. Piano\n0x07. Steel Str. Guitar ALT (Mid/High Split: 127)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Cowbell\n0x0B. Piano ALT (Split: 29 &amp; 44, Release: 93)\n0x0C. Piano ALT (Split: 22 &amp; 44, Release: 93)\n0x0D. Lulu's Voice (Release: 248)\n0x0E. Lulu's Voice (Release: 247)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_26","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x13</code>. This percussion set is referred to as \"Drum Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Drum Kit Shaker: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Drum Kit Snare: <code>D\u266f3 (39)</code> to <code>G3 (43)</code> - Open Hi-Hat: <code>G\u266f3 (44)</code> to <code>A3 (45)</code> - Ride Cymbal: <code>A\u266f4 (46)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Drum Kit Shaker [1]\n0x11. Drum Kit Shaker [2]\n0x12. Drum Kit Snare [1]\n0x13. Drum Kit Snare [2]\n0x14. Drum Kit Snare [3]\n0x15. Drum Kit Snare [4]\n0x16. Drum Kit Snare [5]\n0x17. Open Hi-Hat [1]\n0x18. Open Hi-Hat [2]\n0x19. Ride Cymbal [1]\n0x1A. Ride Cymbal [2]\n0x1B. Ride Cymbal [3]\n0x1C. Ride Cymbal [4]\n0x1D. Ride Cymbal [5]\n0x1E. Ride Cymbal [6]\n0x1F. Ride Cymbal [7]\n0x20. Ride Cymbal [8]\n0x21. Ride Cymbal [9]\n0x22. Ride Cymbal [10]\n0x23. Ride Cymbal [11]\n0x24. Ride Cymbal [12]\n0x25. Ride Cymbal [13]\n0x26. Ride Cymbal [14]\n0x27. Ride Cymbal [15]\n0x28. Ride Cymbal [16]\n0x29. Ride Cymbal [17]\n0x2A. Ride Cymbal [18]\n0x2B. Ride Cymbal [19]\n0x2C. Ride Cymbal [20]\n0x2D. Ride Cymbal [21]\n0x2E. Ride Cymbal [22]\n0x2F. Ride Cymbal [23]\n0x30. Ride Cymbal [24]\n0x31. Ride Cymbal [25]\n0x32. Ride Cymbal [26]\n0x33. Ride Cymbal [27]\n0x34. Ride Cymbal [28]\n0x35. Ride Cymbal [29]\n0x36. Ride Cymbal [30]\n0x37. Ride Cymbal [31]\n0x38. Ride Cymbal [32]\n0x39. Ride Cymbal [33]\n0x3A. Ride Cymbal [34]\n0x3B. Ride Cymbal [35]\n0x3C. Ride Cymbal [36]\n0x3D. Ride Cymbal [37]\n0x3E. Ride Cymbal [38]\n0x3F. Ride Cymbal [39]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x05","title":"Instruments (Program Name: 0x00 to 0x05)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x14</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x05 (5)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Tabla\n0x01. Bongo &amp; Slap\n0x02. Surdo\n0x03. Leaves Brush\n0x04. Awk Bird\n0x05. African Singer\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0c_6","title":"Instruments (Program Name: 0x00 to 0x0C)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x15</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0C (12)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Fantasia\n0x01. \u26d4 (nullptr)\n0x02. EERIE WIND\n0x03. E. Rhodes Piano ALT\n0x04. OMINOUSITY\n0x05. \u26d4 (nullptr)\n0x06. Hi-Hat Noise\n0x07. E. Rhodes Piano ALT\n0x08. E. Rhodes Piano\n0x09. \u26d4 (nullptr)\n0x0A. PIT HIT 1\n0x0B. Muted E. Guitar\n0x0C. Female Choir\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x08_1","title":"Instruments (Program Name: 0x00 to 0x08)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x16</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x08 (8)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. TUNNEL RAIN\n0x01. Metal Bang\n0x02. Metal Knock\n0x03. Chip SFX\n0x04. Electric Organ\n0x05. Electric Organ\n0x06. Mystic Pad\n0x07. Velocity\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0d_1","title":"Instruments (Program Name: 0x00 to 0x0D)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x17</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0D (13)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Synth Strings\n0x01. Synth Strings ALT (Release: 235)\n0x02. ICELAND 1\n0x03. Harpsichord\n0x04. Hi-Hat Noise\n0x05. Strings\n0x06. Fantasia\n0x07. Female Choir\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. Piano\n0x0D. Piano ALT (Split: 24 &amp; 44, Release: 186)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0a_2","title":"Instruments (Program Name: 0x00 to 0x0A)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x18</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0A (10)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. \u26d4 (nullptr)\n0x02. \u26d4 (nullptr)\n0x03. \u26d4 (nullptr)\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Kagura Suzu\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_27","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x18</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_10","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x19</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. Ocarina\n0x02. Bassoon ALT (Splits: 42 &amp; 127)\n0x03. Oboe\n0x04. Solo Violin\n0x05. Harmonica\n0x06. Piccolo\n0x07. \u26d4 (nullptr)\n0x08. Steel Str. Guitar\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Female Choir\n0x0D. Male Choir\n0x0E. ELVES\n0x0F. EERIE WIND\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_28","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x19</code>. This percussion set is referred to as \"Tambourine Percussion\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Tambourine Slap: <code>A1 (21)</code> to <code>B3 (47)</code> - Tambourine Tap: <code>C4 (48)</code> to <code>C\u266f4 (49)</code> - Tambourine Shake: <code>D4 (50)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Tambourine Slap [1]\n0x01. Tambourine Slap [2]\n0x02. Tambourine Slap [3]\n0x03. Tambourine Slap [4]\n0x04. Tambourine Slap [5]\n0x05. Tambourine Slap [6]\n0x06. Tambourine Slap [7]\n0x07. Tambourine Slap [8]\n0x08. Tambourine Slap [9]\n0x09. Tambourine Slap [10]\n0x0A. Tambourine Slap [11]\n0x0B. Tambourine Slap [12]\n0x0C. Tambourine Slap [13]\n0x0D. Tambourine Slap [14]\n0x0E. Tambourine Slap [15]\n0x0F. Tambourine Slap [16]\n0x10. Tambourine Slap [17]\n0x11. Tambourine Slap [18]\n0x12. Tambourine Slap [19]\n0x13. Tambourine Slap [20]\n0x14. Tambourine Slap [21]\n0x15. Tambourine Slap [22]\n0x16. Tambourine Slap [23]\n0x17. Tambourine Slap [24]\n0x18. Tambourine Slap [25]\n0x19. Tambourine Slap [26]\n0x1A. Tambourine Slap [27]\n0x1B. Tambourine Tap [1]\n0x1C. Tambourine Tap [2]\n0x1D. Tambourine Shake [1]\n0x1E. Tambourine Shake [2]\n0x1F. Tambourine Shake [3]\n0x20. Tambourine Shake [4]\n0x21. Tambourine Shake [5]\n0x22. Tambourine Shake [6]\n0x23. Tambourine Shake [7]\n0x24. Tambourine Shake [8]\n0x25. Tambourine Shake [9]\n0x26. Tambourine Shake [10]\n0x27. Tambourine Shake [11]\n0x28. Tambourine Shake [12]\n0x29. Tambourine Shake [13]\n0x2A. Tambourine Shake [14]\n0x2B. Tambourine Shake [15]\n0x2C. Tambourine Shake [16]\n0x2D. Tambourine Shake [17]\n0x2E. Tambourine Shake [18]\n0x2F. Tambourine Shake [19]\n0x30. Tambourine Shake [20]\n0x31. Tambourine Shake [21]\n0x32. Tambourine Shake [22]\n0x33. Tambourine Shake [23]\n0x34. Tambourine Shake [24]\n0x35. Tambourine Shake [25]\n0x36. Tambourine Shake [25*]\n0x37. Tambourine Shake [25*]\n0x38. Tambourine Shake [25*]\n0x39. Tambourine Shake [25*]\n0x3A. Tambourine Shake [25*]\n0x3B. Tambourine Shake [25*]\n0x3C. Tambourine Shake [25*]\n0x3D. Tambourine Shake [25*]\n0x3E. Tambourine Shake [25*]\n0x3F. Tambourine Shake [25*]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x03_3","title":"Instruments (Program Name: 0x00 to 0x03)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1A</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x03 (3)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. OMINOUSITY\n0x01. PIT HIT 1\n0x02. Hi-Hat Noise ALT\n0x03. DANGER\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x09_8","title":"Instruments (Program Name: 0x00 to 0x09)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1B</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x09 (9)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Kagura Suzu\n0x01. Shehnai\n0x02. Metal Knock\n0x03. Banjo\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_29","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x1B</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0b_3","title":"Instruments (Program Name: 0x00 to 0x0B)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1C</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0B (11)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bouzouki\n0x01. \u26d4 (nullptr)\n0x02. Bassoon ALT (Splits: 42 &amp; 127)\n0x03. Oboe\n0x04. \u26d4 (nullptr)\n0x05. \u26d4 (nullptr)\n0x06. Piccolo\n0x07. French Horn\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0a_3","title":"Instruments (Program Name: 0x00 to 0x0A)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1D</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0A (10)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Sustain E. Guitar ALT (Attack Time: 32)\n0x01. \u26d4 (nullptr)\n0x02. \u26d4 (nullptr)\n0x03. Steel Drum\n0x04. Fretless Bass ALT (Decay Time: 511)\n0x05. Sitar\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x08_2","title":"Instruments (Program Name: 0x00 to 0x08)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1E</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x08 (8)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. OMINOUSITY\n0x01. Piano\n0x02. DANGER\n0x03. Synth Strings\n0x04. Electric Organ\n0x05. Male Choir\n0x06. Piccolo\n0x07. Lulu's Voice (Release: 248)\n0x08. Lulu's Voice (Release: 247)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x07_2","title":"Instruments (Program Name: 0x00 to 0x07)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x1F</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x07 (7)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Djembe\n0x02. Shehnai\n0x03. \u26d4 (nullptr)\n0x04. Kagura Suzu\n0x05. Surdo\n0x06. Bandoneon\n0x07. Sitar\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_11","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x20</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Fretless Bass\n0x01. Tenor Saxophone\n0x02. \u26d4 (nullptr)\n0x03. Steel Str. Guitar\n0x04. E. Rhodes Piano\n0x05. \u26d4 (nullptr)\n0x06. \u26d4 (nullptr)\n0x07. \u26d4 (nullptr)\n0x08. Electric Organ\n0x09. \u26d4 (nullptr)\n0x0A. \u26d4 (nullptr)\n0x0B. \u26d4 (nullptr)\n0x0C. Harpsichord\n0x0D. \u26d4 (nullptr)\n0x0E. Glockenspiel\n0x0F. Tambourine\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_30","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x20</code>. This percussion set is referred to as \"Drum Kit ALT\", the only difference between the \"Drum Kit\" and this percussion kit is a different bass drum sample.</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Kick Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Drum Kit Shaker: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Drum Kit Snare: <code>D\u266f3 (39)</code> to <code>G3 (43)</code> - Open Hi-Hat: <code>G\u266f3 (44)</code> to <code>A3 (45)</code> - Ride Cymbal: <code>A\u266f4 (46)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Kick Drum [1]\n0x01. Kick Drum [2]\n0x02. Kick Drum [3]\n0x03. Kick Drum [4]\n0x04. Kick Drum [5]\n0x05. Kick Drum [6]\n0x06. Kick Drum [7]\n0x07. Kick Drum [8]\n0x08. Kick Drum [9]\n0x09. Kick Drum [10]\n0x0A. Kick Drum [11]\n0x0B. Kick Drum [12]\n0x0C. Kick Drum [13]\n0x0D. Kick Drum [14]\n0x0E. Kick Drum [15]\n0x0F. Kick Drum [16]\n0x10. Drum Kit Shaker [1]\n0x11. Drum Kit Shaker [2]\n0x12. Drum Kit Snare [1]\n0x13. Drum Kit Snare [2]\n0x14. Drum Kit Snare [3]\n0x15. Drum Kit Snare [4]\n0x16. Drum Kit Snare [5]\n0x17. Open Hi-Hat [1]\n0x18. Open Hi-Hat [2]\n0x19. Ride Cymbal [1]\n0x1A. Ride Cymbal [2]\n0x1B. Ride Cymbal [3]\n0x1C. Ride Cymbal [4]\n0x1D. Ride Cymbal [5]\n0x1E. Ride Cymbal [6]\n0x1F. Ride Cymbal [7]\n0x20. Ride Cymbal [8]\n0x21. Ride Cymbal [9]\n0x22. Ride Cymbal [10]\n0x23. Ride Cymbal [11]\n0x24. Ride Cymbal [12]\n0x25. Ride Cymbal [13]\n0x26. Ride Cymbal [14]\n0x27. Ride Cymbal [15]\n0x28. Ride Cymbal [16]\n0x29. Ride Cymbal [17]\n0x2A. Ride Cymbal [18]\n0x2B. Ride Cymbal [19]\n0x2C. Ride Cymbal [20]\n0x2D. Ride Cymbal [21]\n0x2E. Ride Cymbal [22]\n0x2F. Ride Cymbal [23]\n0x30. Ride Cymbal [24]\n0x31. Ride Cymbal [25]\n0x32. Ride Cymbal [26]\n0x33. Ride Cymbal [27]\n0x34. Ride Cymbal [28]\n0x35. Ride Cymbal [29]\n0x36. Ride Cymbal [30]\n0x37. Ride Cymbal [31]\n0x38. Ride Cymbal [32]\n0x39. Ride Cymbal [33]\n0x3A. Ride Cymbal [34]\n0x3B. Ride Cymbal [35]\n0x3C. Ride Cymbal [36]\n0x3D. Ride Cymbal [37]\n0x3E. Ride Cymbal [38]\n0x3F. Ride Cymbal [39]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_12","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x21</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Oboe\n0x02. Female Choir\n0x03. Bassoon ALT (Split: 42 &amp; 127)\n0x04. French Horn\n0x05. Trumpet (C5)\n0x06. Trumpet (G4)\n0x07. Tuba\n0x08. Glockenspiel\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. Giant Voice\n0x0E. Harp\n0x0F. Male Choir\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_31","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x21</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00","title":"Instruments (Program Name: 0x00)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x22</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0f_13","title":"Instruments (Program Name: 0x00 to 0x0F)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x23</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0F (15)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Oboe\n0x02. Clarinet\n0x03. Bassoon ALT (Split: 42 &amp; 127)\n0x04. French Horn\n0x05. Trumpet (C5)\n0x06. Trumpet (G4)\n0x07. Tuba\n0x08. \u26d4 (nullptr)\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Pizz. Strings\n0x0D. Shehnai\n0x0E. Harp\n0x0F. Chinese Gong\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_32","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x23</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_9","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x24</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Fretless Bass\n0x02. Tenor Saxophone\n0x03. Steel Str. Guitar\n0x04. Tambourine\n0x05. Trumpet (G4)\n0x06. Piano\n0x07. Bandoneon\n0x08. Solo Violin\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. \u26d4 (nullptr)\n0x0D. Lulu's Voice (Release: 248)\n0x0E. Lulu's Voice (Release: 247)\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_33","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x24</code>. This percussion set is referred to as \"Drum Kit ALT\", the only difference between the \"Drum Kit\" and this percussion kit is a different bass drum sample.</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Kick Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Drum Kit Shaker: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Drum Kit Snare: <code>D\u266f3 (39)</code> to <code>G3 (43)</code> - Open Hi-Hat: <code>G\u266f3 (44)</code> to <code>A3 (45)</code> - Ride Cymbal: <code>A\u266f4 (46)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Kick Drum [1]\n0x01. Kick Drum [2]\n0x02. Kick Drum [3]\n0x03. Kick Drum [4]\n0x04. Kick Drum [5]\n0x05. Kick Drum [6]\n0x06. Kick Drum [7]\n0x07. Kick Drum [8]\n0x08. Kick Drum [9]\n0x09. Kick Drum [10]\n0x0A. Kick Drum [11]\n0x0B. Kick Drum [12]\n0x0C. Kick Drum [13]\n0x0D. Kick Drum [14]\n0x0E. Kick Drum [15]\n0x0F. Kick Drum [16]\n0x10. Drum Kit Shaker [1]\n0x11. Drum Kit Shaker [2]\n0x12. Drum Kit Snare [1]\n0x13. Drum Kit Snare [2]\n0x14. Drum Kit Snare [3]\n0x15. Drum Kit Snare [4]\n0x16. Drum Kit Snare [5]\n0x17. Open Hi-Hat [1]\n0x18. Open Hi-Hat [2]\n0x19. Ride Cymbal [1]\n0x1A. Ride Cymbal [2]\n0x1B. Ride Cymbal [3]\n0x1C. Ride Cymbal [4]\n0x1D. Ride Cymbal [5]\n0x1E. Ride Cymbal [6]\n0x1F. Ride Cymbal [7]\n0x20. Ride Cymbal [8]\n0x21. Ride Cymbal [9]\n0x22. Ride Cymbal [10]\n0x23. Ride Cymbal [11]\n0x24. Ride Cymbal [12]\n0x25. Ride Cymbal [13]\n0x26. Ride Cymbal [14]\n0x27. Ride Cymbal [15]\n0x28. Ride Cymbal [16]\n0x29. Ride Cymbal [17]\n0x2A. Ride Cymbal [18]\n0x2B. Ride Cymbal [19]\n0x2C. Ride Cymbal [20]\n0x2D. Ride Cymbal [21]\n0x2E. Ride Cymbal [22]\n0x2F. Ride Cymbal [23]\n0x30. Ride Cymbal [24]\n0x31. Ride Cymbal [25]\n0x32. Ride Cymbal [26]\n0x33. Ride Cymbal [27]\n0x34. Ride Cymbal [28]\n0x35. Ride Cymbal [29]\n0x36. Ride Cymbal [30]\n0x37. Ride Cymbal [31]\n0x38. Ride Cymbal [32]\n0x39. Ride Cymbal [33]\n0x3A. Ride Cymbal [34]\n0x3B. Ride Cymbal [35]\n0x3C. Ride Cymbal [36]\n0x3D. Ride Cymbal [37]\n0x3E. Ride Cymbal [38]\n0x3F. Ride Cymbal [39]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x0e_10","title":"Instruments (Program Name: 0x00 to 0x0E)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x25</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x0E (14)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Piccolo\n0x01. Oboe\n0x02. French Horn\n0x03. Steel Str. Guitar\n0x04. Tambourine\n0x05. Trumpet (G4)\n0x06. Piano\n0x07. Bandoneon\n0x08. Solo Violin\n0x09. \u26d4 (nullptr)\n0x0A. Strings\n0x0B. Strings\n0x0C. Female Choir\n0x0D. \u26d4 (nullptr)\n0x0E. Harp\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#drums-program-name-0x7f_34","title":"Drums (Program Name: 0x7F)","text":"<p>Below is a list of the drums inside of audiobank <code>0x25</code>. This percussion set is referred to as \"Orchestra Kit\".</p> <p>You can access these drums when using this audiobank using MIDI program number(s): <code>0x7F (127)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>Here is a list of note ranges for the drums: - Concert Bass Drum: <code>A1 (21)</code> to <code>C3 (36)</code> - Orchestra Snare Low: <code>C\u266f3 (37)</code> to <code>D3 (38)</code> - Orchestra Snare High: <code>D\u266f3 (39)</code> to <code>F3 (41)</code> - Crash Cymbal: <code>F\u266f3 (42)</code> to <code>F4 (53)</code> - Timpani: <code>F\u266f4 (54)</code> to <code>C7 (84)</code></p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Drum List: <pre><code>0x00. Concert Bass Drum [1]\n0x01. Concert Bass Drum [2]\n0x02. Concert Bass Drum [3]\n0x03. Concert Bass Drum [4]\n0x04. Concert Bass Drum [5]\n0x05. Concert Bass Drum [6]\n0x06. Concert Bass Drum [7]\n0x07. Concert Bass Drum [8]\n0x08. Concert Bass Drum [9]\n0x09. Concert Bass Drum [10]\n0x0A. Concert Bass Drum [11]\n0x0B. Concert Bass Drum [12]\n0x0C. Concert Bass Drum [13]\n0x0D. Concert Bass Drum [14]\n0x0E. Concert Bass Drum [15]\n0x0F. Concert Bass Drum [16]\n0x10. Orchestra Snare Low [1]\n0x11. Orchestra Snare Low [2]\n0x12. Orchestra Snare High [1]\n0x13. Orchestra Snare High [2]\n0x14. Orchestra Snare High [3]\n0x15. Crash Cymbal [1]\n0x16. Crash Cymbal [2]\n0x17. Crash Cymbal [3]\n0x18. Crash Cymbal [4]\n0x19. Crash Cymbal [5]\n0x1A. Crash Cymbal [6]\n0x1B. Crash Cymbal [7]\n0x1C. Crash Cymbal [8]\n0x1D. Crash Cymbal [9]\n0x1E. Crash Cymbal [10]\n0x1F. Crash Cymbal [11]\n0x20. Crash Cymbal [12]\n0x21. Timpani [1]\n0x22. Timpani [2]\n0x23. Timpani [3]\n0x24. Timpani [4]\n0x25. Timpani [5]\n0x26. Timpani [6]\n0x27. Timpani [7]\n0x28. Timpani [8]\n0x29. Timpani [9]\n0x2A. Timpani [10]\n0x2B. Timpani [11]\n0x2C. Timpani [12]\n0x2D. Timpani [13]\n0x2E. Timpani [14]\n0x2F. Timpani [15]\n0x30. Timpani [16]\n0x31. Timpani [17]\n0x32. Timpani [18]\n0x33. Timpani [19]\n0x34. Timpani [20]\n0x35. Timpani [21]\n0x36. Timpani [22]\n0x37. Timpani [23]\n0x38. Timpani [24]\n0x39. Timpani [25]\n0x3A. Timpani [26]\n0x3B. Timpani [27]\n0x3C. Timpani [28]\n0x3D. Timpani [29]\n0x3E. Timpani [30]\n0x3F. Timpani [31]\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x04_4","title":"Instruments (Program Name: 0x00 to 0x04)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x26</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x04 (4)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Bent Conga\n0x01. Conga &amp; Slap\n0x02. Cuica\n0x03. Bass Marimba\n0x04. Bass Marimba\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x07_3","title":"Instruments (Program Name: 0x00 to 0x07)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x27</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x07 (7)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. \u26d4 (nullptr)\n0x01. Djembe\n0x02. Shehnai\n0x03. \u26d4 (nullptr)\n0x04. Kagura Suzu\n0x05. Surdo\n0x06. Bandoneon\n0x07. Sitar\n</code></pre></p>"},{"location":"vanilla-reference/audiobanks/#instruments-program-name-0x00-to-0x04_5","title":"Instruments (Program Name: 0x00 to 0x04)","text":"<p>Below is a list of the instruments inside of audiobank <code>0x28</code>.</p> <p>You can access these instruments when using this audiobank using MIDI program number(s): <code>0x00 (0)</code> to <code>0x04 (4)</code> </p> <p>Program Numbers</p> <p>Some DAWs start with program number <code>0</code>, and others start with program number <code>1</code>; because of this you may need to offset your program number assignment by a value of <code>1</code>.</p> <p>The list is structured and named like so: <code>Pointer index in HEX: Name of SFX</code></p> <p>Instrument List: <pre><code>0x00. Junk [1]\n0x01. Junk [2]\n0x02. Junk [3]\n0x03. Junk [4]\n0x04. Junk [5]\n</code></pre></p>"},{"location":"vanilla-reference/samples/","title":"Sample Reference","text":""},{"location":"vanilla-reference/samples/#sample-reference","title":"Sample Reference","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>Below is a list containing all the samples in the Ocarina of Time and Majora's Mask ROMs in decimal and hexadecimal. Instrument samples are organized using General MIDI 1.0<sup>1</sup> instrument program number specification going from the lowest instrument sample to the highest instrument sample for each instrument. Some instruments, however, do not fit into the General MIDI specification, so they are placed in the table where they would most likely fit instead.</p> <p>Percussion kit and sound effect samples are organized in ascending order of the audiobank they are contained within.</p> Ocarina of Time SamplesMajora's Mask Samples <ol> <li> <p>For more information on General MIDI 1.0 specification, please visit the Wikipedia  article on it, or visit the midi.org  specification page on it.\u00a0\u21a9</p> </li> </ol>"},{"location":"vanilla-reference/samples/#instrument-samples","title":"Instrument Samples","text":"<p>placeholder</p>"},{"location":"vanilla-reference/samples/#drum-samples","title":"Drum Samples","text":"<p>placeholder</p>"},{"location":"vanilla-reference/samples/#sound-effect-samples","title":"Sound Effect Samples","text":"<p>placeholder</p>"},{"location":"vanilla-reference/samples/#instrument-samples_1","title":"Instrument Samples","text":"Sample Names to Possibly Be Changed <p><code>Giants' Voice</code> to <code>CARTOON, YELL - FUNNY TARZAN YELL 01</code> <code>Metal Bang</code> to <code>CARTOON, HIT - BIG, HEAVY METALLIC HIT</code></p> <p>Below is a list of instrument samples located within audiobanks <code>0x03</code> to <code>0x27</code>. Audiobank <code>0x28</code> does not contain any useful sample data so it has been omitted.</p> Instrument Sample Table Sample Name Sample Address (DEC) Sample Address (HEX) Audiotable Piano Low 4165648 0x003F9010 <code>ATNUM 1</code> Piano Mid 4196832 0x004009E0 <code>ATNUM 1</code> Piano High 2817232 0x002AFCD0 <code>ATNUM 1</code> E. Rhodes Piano Low 4577744 0x0045D9D0 <code>ATNUM 1</code> E. Rhodes Piano Mid 4589792 0x0046D8E0 <code>ATNUM 1</code> Harpsichord 5106448 0x004DEB10 <code>ATNUM 1</code> Glockenspiel 4014816 0x003D42E0 <code>ATNUM 1</code> Marimba Mid 5321248 0x00513220 <code>ATNUM 1</code> Marimba High 5331136 0x005158C0 <code>ATNUM 1</code> Reverb Marimba 34352 0x00008630 <code>ATNUM 2</code> Carillon Bell 5366464 0x0051E2C0 <code>ATNUM 1</code> Electric Organ 4720128 0x00480600 <code>ATNUM 1</code> Harmonica 4413472 0x00435820 <code>ATNUM 1</code> Bandoneon 2603312 0x0027B930 <code>ATNUM 1</code> Nylon Str. Guitar Mid 4422352 0x00437AD0 <code>ATNUM 1</code> Nylon Str. Guitar High 4438832 0x0043BB30 <code>ATNUM 1</code> Steel Str. Guitar Mid 2707520 0x00295040 <code>ATNUM 1</code> Steel Str. Guitar High 4137424 0x003F21D0 <code>ATNUM 1</code> Sustain E. Guitar Low 5339728 0x00517A50 <code>ATNUM 1</code> Sustain E. Guitar Mid 5349936 0x0051A230 <code>ATNUM 1</code> Sustain E. Guitar High 5358576 0x0051C3F0 <code>ATNUM 1</code> Muted E. Guitar 4663536 0x004728F0 <code>ATNUM 1</code> Pizz. Double Bass 4481440 0x004461A0 <code>ATNUM 1</code> Fretless Bass 2844016 0x002B6570 <code>ATNUM 1</code> Solo Violin 4235680 0x0040A1A0 <code>ATNUM 1</code> Strings Low 4296960 0x00419100 <code>ATNUM 1</code> Strings Mid 4317472 0x0041E120 <code>ATNUM 1</code> Strings High 4335568 0x004227D0 <code>ATNUM 1</code> Pizz. Strings Mid 4455008 0x0043FA60 <code>ATNUM 1</code> Pizz. Strings High 4468000 0x00442D20 <code>ATNUM 1</code> Harp Mid 3999280 0x003D0630 <code>ATNUM 1</code> Harp High 2621536 0x00280060 <code>ATNUM 1</code> Synth Strings 4688928 0x00478C20 <code>ATNUM 1</code> Female Choir Mid 3936032 0x003C0F20 <code>ATNUM 1</code> Female Choir High 3965936 0x003C83F0 <code>ATNUM 1</code> Male Choir Low 4732448 0x00483620 <code>ATNUM 1</code> Male Choir Mid 4753840 0x004889B0 <code>ATNUM 1</code> Lulu's Voice 2639248 0x00284590 <code>ATNUM 1</code> Goron Elder Son's Voice 2851552 0x002B82E0 <code>ATNUM 1</code> Giants' Voice 2864912 0x002BB710 <code>ATNUM 1</code> Trumpet (C5-72) 4387024 0x0042F0D0 <code>ATNUM 1</code> Trumpet (G4-67) 4146112 0x003F43C0 <code>ATNUM 1</code> Trumpet (B3-59) 2730224 0x0029A8F0 <code>ATNUM 1</code> Tuba 4401328 0x004328B0 <code>ATNUM 1</code> French Horn 4355952 0x00427770 <code>ATNUM 1</code> Tenor Saxophone Low 4125376 0x003EF2C0 <code>ATNUM 1</code> Tenor Saxophone Mid 4130688 0x003F0780 <code>ATNUM 1</code> Oboe 4351168 0x004264C0 <code>ATNUM 1</code> Bassoon Low 4449632 0x0043E560 <code>ATNUM 1</code> Bassoon Mid 5136544 0x004E60A0 <code>ATNUM 1</code> Clarinet 5162576 0x004EC650 <code>ATNUM 1</code> Piccolo 2646016 0x00286000 <code>ATNUM 1</code> Ocarina 2590384 0x002786B0 <code>ATNUM 1</code> Digi Pad 04 5415520 0x0052A260 <code>ATNUM 1</code> Mystic Pad 4918480 0x004B0CD0 <code>ATNUM 1</code> Velocity (MC-202) 4933952 0x004B4940 <code>ATNUM 1</code> Chip SFX 4918176 0x004B0BA0 <code>ATNUM 1</code> Fantasia 4497712 0x0044A130 <code>ATNUM 1</code> ELVES 5137904 0x004E65F0 <code>ATNUM 1</code> ICELAND 1 5063216 0x004D4230 <code>ATNUM 1</code> OMINOUSITY 4606320 0x00464970 <code>ATNUM 1</code> DANGER 4668944 0x00473E10 <code>ATNUM 1</code> TUNNEL RAIN 4872064 0x004A5780 <code>ATNUM 1</code> EERIE WIND 4530384 0x004520D0 <code>ATNUM 1</code> PIT HIT 1 4645696 0x0046E340 <code>ATNUM 1</code> African Vocal Phrase 2 4833120 0x0049BF60 <code>ATNUM 1</code> Awk Bird Low 4819792 0x00498B50 <code>ATNUM 1</code> Awk Bird Mid 4826736 0x0049A670 <code>ATNUM 1</code> Sitar 5174848 0x004EF640 <code>ATNUM 1</code> Banjo Low 5190720 0x004F3440 <code>ATNUM 1</code> Banjo Mid 5202560 0x004F6280 <code>ATNUM 1</code> Bouzouki Low 4941328 0x004B6610 <code>ATNUM 1</code> Bouzouki Mid 4955360 0x004B9CE0 <code>ATNUM 1</code> Shehnai 5165632 0x004ED240 <code>ATNUM 1</code> Cowbell 5246928 0x00500FD0 <code>ATNUM 1</code> Metal Knock 4910880 0x004AEF20 <code>ATNUM 1</code> Steel Drum Mid 5386000 0x00522F10 <code>ATNUM 1</code> Steel Drum High 5404442 0x00527B70 <code>ATNUM 1</code> Surdo 2664080 0x0028A690 <code>ATNUM 1</code> Tabla Mid 4777056 0x0048E460 <code>ATNUM 1</code> Tabla High 4788368 0x00491090 <code>ATNUM 1</code> Rawhide Drum 2693024 0x002917A0 <code>ATNUM 1</code> Djembe Open 4973968 0x004BE590 <code>ATNUM 1</code> Djembe Slap 4978096 0x004BF5B0 <code>ATNUM 1</code> Djembe Muted 4984224 0x004C0DA0 <code>ATNUM 1</code> Hi-Hat Noise 4631440 0x0046AB90 <code>ATNUM 1</code> Chinese Gong Low 5250192 0x00501C90 <code>ATNUM 1</code> Chiense Gong Mid 2770752 0x002A4740 <code>ATNUM 1</code> Chinese Gong High 5286464 0x0050AA40 <code>ATNUM 1</code> Gong 4988096 0x004C1CC0 <code>ATNUM 1</code> Chimes 5030384 0x004CC1F0 <code>ATNUM 1</code> Kagura Suzu 4111008 0x003EBAA0 <code>ATNUM 1</code> Metal Bang 4897088 0x004AB940 <code>ATNUM 1</code> Bongo &amp; Slap Low 4800112 0x00493E70 <code>ATNUM 1</code> Bongo &amp; Slap Mid 4805184 0x00495240 <code>ATNUM 1</code> Bent Conga 5053680 0x004D1CF0 <code>ATNUM 1</code> Bent Conga 0 0x00000000 <code>ATNUM 2</code> Leaves Brush 4810256 0x00496610 <code>ATNUM 1</code> Tambourine Slap 2674592 0x0028CFA0 <code>ATNUM 1</code> Tambourine Tap 4143488 0x003F3980 <code>ATNUM 1</code> Tambourine Shake 2683504 0x0028F270 <code>ATNUM 1</code> Cuica Open 29392 0x000072D0 <code>ATNUM 2</code> Cuica Mute 31600 0x00007B70 <code>ATNUM 2</code>"},{"location":"vanilla-reference/samples/#drum-samples_1","title":"Drum Samples","text":"<p>Below is a list of drum samples located within audiobanks <code>0x00</code> to <code>0x27</code>. Audiobank <code>0x28</code> does not contain any useful sample data so it has been omitted.</p> Drum Sample Table Sample Name Sample Address (DEC) Sample Address (HEX) Audiotable Tambourine Slap 2674592 0x0028CFA0 <code>ATNUM 0</code> Sand Footstep SFX 2683504 0x0028F270 <code>ATNUM 0</code> Garbage Data 95072 0x000017360 <code>ATNUM 0</code> Link Voice (Fall Start 1) 1594480 0x00185470 <code>ATNUM 0</code> Link Voice (Fall Start 2) 1600144 0x00186A90 <code>ATNUM 0</code> Link Voice (Fall Scream 1) 1558000 0x0017C5F0 <code>ATNUM 0</code> Unknown SFX (Rock Related?) 1246016 0x00130340 <code>ATNUM 0</code> Garbage Data 985504 0x000F09A0 <code>ATNUM 0</code> Kaching SFX (Postbox) 988336 0x000F14B0 <code>ATNUM 0</code> Clap 1 1001488 0x000F4810 <code>ATNUM 0</code> Clap 2 1002032 0x000F4A30 <code>ATNUM 0</code> Concert Bass Drum 4036208 0x003D9670 <code>ATNUM 1</code> Orchestra Snare Low 4056080 0x003DE410 <code>ATNUM 1</code> Orchestra Snare High 4066208 0x003E0BA0 <code>ATNUM 1</code> Crash Cymbal 4076336 0x003E3330 <code>ATNUM 1</code> Timpani 2736992 0x0029C360 <code>ATNUM 1</code> Tambourine Slap 2674592 0x0028CFA0 <code>ATNUM 1</code> Tambourine Tap 4143488 0x003F3980 <code>ATNUM 1</code> Tambourine Shake 2683504 0x0028F270 <code>ATNUM 1</code> Conga Muted 5212960 0x004F8B20 <code>ATNUM 1</code> Conga Open 5221856 0x004FADE0 <code>ATNUM 1</code> Conga Slap 5232048 0x004FD5B0 <code>ATNUM 1</code> Shaker 5243008 0x00500080 <code>ATNUM 1</code> Gong 4988096 0x004C1CC0 <code>ATNUM 1</code> Chimes 5030384 0x004CC1F0 <code>ATNUM 1</code> Kick Drum 4252192 0x0040E220 <code>ATNUM 1</code> Drum Kit Shaker 4254688 0x0040EBE0 <code>ATNUM 1</code> Drum Kit Snare 4264768 0x00411340 <code>ATNUM 1</code> Semi-Open Hi-Hat 4269600 0x00412620 <code>ATNUM 1</code> Ride Cymbal 4279392 0x00414C60 <code>ATNUM 1</code>"},{"location":"vanilla-reference/samples/#sound-effect-samples_1","title":"Sound Effect Samples","text":"<p>Below is a list of sound effect samples located within audiobanks <code>0x00</code> to <code>0x02</code>. Audiobank <code>0x03</code> to <code>0x28</code> do not contain any sound effects.</p> Sound Effect Sample Table Sample Name Sample Address (DEC) Sample Address (HEX) Audiotable a 0 0x00 <code>ATNUM 1</code>"},{"location":"vanilla-reference/seqplayer/seq-channel/","title":"Sequence Channel Commands","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xf1-reserve-notes","title":"0xF1: Reserve Notes","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xf0-unreserve-notes","title":"0xF0: Unreserve Notes","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xee-pitch-bend-2-semitones","title":"0xEE: Pitch Bend (\u00b12 Semitones)","text":"<p>placeholoder</p> <p>sets the pitch bend amount using a scaling of 2. equal to pitch bend with rpn pitch bend data entry of 2 coarse 0 fine.</p>  \u00a0C <pre><code>f32 gBendPitchTwoSemitonesFrequencies[] = {\n    0.890899f, 0.890899f, 0.89171f,  0.892521f, 0.893333f, 0.894146f,\n    0.89496f,  0.895774f, 0.89659f,  0.897406f, 0.898222f, 0.89904f,\n    0.899858f, 0.900677f, 0.901496f, 0.902317f, 0.903138f, 0.90396f,\n    0.904783f, 0.905606f, 0.90643f,  0.907255f, 0.908081f, 0.908907f,\n    0.909734f, 0.910562f, 0.911391f, 0.91222f,  0.91305f,  0.913881f,\n    0.914713f, 0.915545f, 0.916379f, 0.917213f, 0.918047f, 0.918883f,\n    0.919719f, 0.920556f, 0.921394f, 0.922232f, 0.923072f, 0.923912f,\n    0.924752f, 0.925594f, 0.926436f, 0.927279f, 0.928123f, 0.928968f,\n    0.929813f, 0.93066f,  0.931507f, 0.932354f, 0.933203f, 0.934052f,\n    0.934902f, 0.935753f, 0.936604f, 0.937457f, 0.93831f,  0.939164f,\n    0.940019f, 0.940874f, 0.94173f,  0.942587f, 0.943445f, 0.944304f,\n    0.945163f, 0.946023f, 0.946884f, 0.947746f, 0.948608f, 0.949472f,\n    0.950336f, 0.951201f, 0.952066f, 0.952933f, 0.9538f,   0.954668f,\n    0.955537f, 0.956406f, 0.957277f, 0.958148f, 0.95902f,  0.959893f,\n    0.960766f, 0.961641f, 0.962516f, 0.963392f, 0.964268f, 0.965146f,\n    0.966024f, 0.966903f, 0.967783f, 0.968664f, 0.969546f, 0.970428f,\n    0.971311f, 0.972195f, 0.97308f,  0.973965f, 0.974852f, 0.975739f,\n    0.976627f, 0.977516f, 0.978405f, 0.979296f, 0.980187f, 0.981079f,\n    0.981972f, 0.982865f, 0.98376f,  0.984655f, 0.985551f, 0.986448f,\n    0.987346f, 0.988244f, 0.989144f, 0.990044f, 0.990945f, 0.991847f,\n    0.992749f, 0.993653f, 0.994557f, 0.995462f, 0.996368f, 0.997275f,\n    0.998182f, 0.999091f, 1.0f,      1.00091f,  1.001821f, 1.002733f,\n    1.003645f, 1.004559f, 1.005473f, 1.006388f, 1.007304f, 1.00822f,\n    1.009138f, 1.010056f, 1.010975f, 1.011896f, 1.012816f, 1.013738f,\n    1.014661f, 1.015584f, 1.016508f, 1.017433f, 1.018359f, 1.019286f,\n    1.020214f, 1.021142f, 1.022071f, 1.023002f, 1.023933f, 1.024864f,\n    1.025797f, 1.026731f, 1.027665f, 1.0286f,   1.029536f, 1.030473f,\n    1.031411f, 1.03235f,  1.033289f, 1.03423f,  1.035171f, 1.036113f,\n    1.037056f, 1.038f,    1.038944f, 1.03989f,  1.040836f, 1.041783f,\n    1.042731f, 1.04368f,  1.04463f,  1.045581f, 1.046532f, 1.047485f,\n    1.048438f, 1.049392f, 1.050347f, 1.051303f, 1.05226f,  1.053217f,\n    1.054176f, 1.055135f, 1.056095f, 1.057056f, 1.058018f, 1.058981f,\n    1.059945f, 1.06091f,  1.061875f, 1.062842f, 1.063809f, 1.064777f,\n    1.065746f, 1.066716f, 1.067687f, 1.068658f, 1.069631f, 1.070604f,\n    1.071578f, 1.072554f, 1.07353f,  1.074507f, 1.075485f, 1.076463f,\n    1.077443f, 1.078424f, 1.079405f, 1.080387f, 1.08137f,  1.082355f,\n    1.08334f,  1.084325f, 1.085312f, 1.0863f,   1.087289f, 1.088278f,\n    1.089268f, 1.09026f,  1.091252f, 1.092245f, 1.093239f, 1.094234f,\n    1.09523f,  1.096226f, 1.097224f, 1.098223f, 1.099222f, 1.100222f,\n    1.101224f, 1.102226f, 1.103229f, 1.104233f, 1.105238f, 1.106244f,\n    1.10725f,  1.108258f, 1.109267f, 1.110276f, 1.111287f, 1.112298f,\n    1.11331f,  1.114323f, 1.115337f, 1.116352f, 1.117368f, 1.118385f,\n    1.119403f, 1.120422f, 1.121441f, 1.122462f,\n};\n</code></pre>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xed-set-hilo-gain","title":"0xED: Set HiLo Gain","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xec-reset-channel","title":"0xEC: Reset Channel","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xeb-set-soundfont-instrument","title":"0xEB: Set Soundfont &amp; Instrument","text":"<p>placeholder</p> <p>sets the soundfont and instrument from said soundfont the channel will use, soundfont must be loaded into ram (0x00 is always loaded into ram. most audiobanks have a soundfont value of 255 however).</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xea-stop-script","title":"0xEA: Stop Script","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe9-set-note-priority","title":"0xE9: Set Note Priority","text":"<p>placeholder</p> <p>dewtermines the note priority to be assigned to the channel. default note priority is 0x03, default \"other\" prio is 0x01. channel priority is shifted to determine actual priority used for priority calculation. sfx priority is calculated using distance from the camera as well as the default sfx priority (at some point sfx priority goes up by 300).</p> <p>priority 0x0A is equal to 625 (if <code>priority &amp; 0x0F != 0</code> then <code>priority = priority</code> and <code>priority = priority &gt;&gt; 4</code> (priority/2^4). if <code>priority != 0</code> then <code>otherprio = priority</code>)</p> <p>no matter what sfx will cut voices out because only so many voices can be playing at once, and due to the way sfx are assigned to channels.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe8-set-channel-parameters","title":"0xE8: Set Channel Parameters","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe7-load-channel-parameters","title":"0xE7: Load Channel Parameters","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe6-set-codebook-offset","title":"0xE6: Set Codebook Offset","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe5-set-reverb-index","title":"0xE5: Set Reverb Index","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe4-dyncall","title":"0xE4: Dyncall","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe3-set-vibrato-delay","title":"0xE3: Set Vibrato Delay","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe2-set-vibrato-depth-linear","title":"0xE2: Set Vibrato Depth (Linear)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe1-set-vibrato-rate-linear","title":"0xE1: Set Vibrato Rate (Linear)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xe0-set-volume-scale-expression","title":"0xE0: Set Volume Scale (Expression)","text":"<p>placeholder</p> <p>equal to midi cc11 channel expression.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xdf-set-volume","title":"0xDF: Set Volume","text":"<p>placeholder</p> <p>sets the total volume for the channel.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xde-set-freqscale","title":"0xDE: Set Freqscale","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xdd-set-pan","title":"0xDD: Set Pan","text":"<p>placeholder</p> <p>amount of panning to be used in the channel. 0x00 is full left, 0x40 is center, 0x7F is full right. </p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xdc-set-pan-mix","title":"0xDC: Set Pan Mix","text":"<p>Sets the proportion of panning that comes from the channel for key-based instruments.</p> <ul> <li>A value of 0x00 (0) will use only the key-based instrument pan values.</li> <li>A Value of 0x80 (128) will use only the channel pan value.</li> </ul>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xdb-set-transposition-channel","title":"0xDB: Set Transposition (Channel)","text":"<p>placeholder</p> <p>number of semitones to increase or decrease all notes in the channel by</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xda-set-envelope","title":"0xDA: Set Envelope","text":"<p>placeholder</p> <p>address start value must be aligned to even numbers</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd9-set-release","title":"0xD9: Set Release","text":"<p>placeholder</p> <p>sets the release rate to be used by the channel. 0x00 is longest decay, 0xFF is shortest decay.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd8-set-vibrato-depth","title":"0xD8: Set Vibrato Depth","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd7-set-vibrato-rate","title":"0xD7: Set Vibrato Rate","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd4-set-reverb","title":"0xD4: Set Reverb","text":"<p>placeholder</p> <p>sets the amount of echo instruments in the channel will have. the effect is not 1:1 with midi reverb.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd3-pitch-bend-12-semitones","title":"0xD3: Pitch Bend (\u00b112 Semitones)","text":"<p>placeholder</p> <p>sets the pitch bend amount using a scaling of 12. equal to pitch bend with rpn pitch bend data entry of 12 coarse 0 fine.</p>  \u00a0C <pre><code>f32 gBendPitchOneOctaveFrequencies[] = {\n    0.5f,      0.5f,      0.502736f, 0.505488f, 0.508254f, 0.511036f,\n    0.513833f, 0.516645f, 0.519472f, 0.522315f, 0.525174f, 0.528048f,\n    0.530938f, 0.533843f, 0.536765f, 0.539702f, 0.542656f, 0.545626f,\n    0.548612f, 0.551614f, 0.554633f, 0.557669f, 0.560721f, 0.563789f,\n    0.566875f, 0.569977f, 0.573097f, 0.576233f, 0.579387f, 0.582558f,\n    0.585746f, 0.588951f, 0.592175f, 0.595415f, 0.598674f, 0.60195f,\n    0.605245f, 0.608557f, 0.611888f, 0.615236f, 0.618603f, 0.621989f,\n    0.625393f, 0.628815f, 0.632257f, 0.635717f, 0.639196f, 0.642694f,\n    0.646212f, 0.649748f, 0.653304f, 0.65688f,  0.660475f, 0.664089f,\n    0.667724f, 0.671378f, 0.675052f, 0.678747f, 0.682461f, 0.686196f,\n    0.689952f, 0.693727f, 0.697524f, 0.701341f, 0.70518f,  0.709039f,\n    0.712919f, 0.716821f, 0.720744f, 0.724689f, 0.728655f, 0.732642f,\n    0.736652f, 0.740684f, 0.744737f, 0.748813f, 0.752911f, 0.757031f,\n    0.761175f, 0.76534f,  0.769529f, 0.77374f,  0.777975f, 0.782232f,\n    0.786513f, 0.790818f, 0.795146f, 0.799497f, 0.803873f, 0.808272f,\n    0.812696f, 0.817144f, 0.821616f, 0.826112f, 0.830633f, 0.835179f,\n    0.83975f,  0.844346f, 0.848966f, 0.853613f, 0.858284f, 0.862982f,\n    0.867704f, 0.872453f, 0.877228f, 0.882029f, 0.886856f, 0.891709f,\n    0.89659f,  0.901496f, 0.90643f,  0.911391f, 0.916379f, 0.921394f,\n    0.926436f, 0.931507f, 0.936604f, 0.94173f,  0.946884f, 0.952066f,\n    0.957277f, 0.962516f, 0.967783f, 0.97308f,  0.978405f, 0.98376f,\n    0.989144f, 0.994557f, 1.0f,      1.005473f, 1.010975f, 1.016508f,\n    1.022071f, 1.027665f, 1.033289f, 1.038944f, 1.04463f,  1.050347f,\n    1.056095f, 1.061875f, 1.067687f, 1.07353f,  1.079405f, 1.085312f,\n    1.091252f, 1.097224f, 1.103229f, 1.109267f, 1.115337f, 1.121441f,\n    1.127579f, 1.13375f,  1.139955f, 1.146193f, 1.152466f, 1.158773f,\n    1.165115f, 1.171491f, 1.177903f, 1.184349f, 1.190831f, 1.197348f,\n    1.203901f, 1.210489f, 1.217114f, 1.223775f, 1.230473f, 1.237207f,\n    1.243978f, 1.250786f, 1.257631f, 1.264514f, 1.271434f, 1.278392f,\n    1.285389f, 1.292423f, 1.299497f, 1.306608f, 1.313759f, 1.320949f,\n    1.328178f, 1.335447f, 1.342756f, 1.350104f, 1.357493f, 1.364922f,\n    1.372392f, 1.379903f, 1.387455f, 1.395048f, 1.402683f, 1.41036f,\n    1.418078f, 1.425839f, 1.433642f, 1.441488f, 1.449377f, 1.457309f,\n    1.465285f, 1.473304f, 1.481367f, 1.489474f, 1.497626f, 1.505822f,\n    1.514063f, 1.522349f, 1.530681f, 1.539058f, 1.547481f, 1.55595f,\n    1.564465f, 1.573027f, 1.581636f, 1.590292f, 1.598995f, 1.607746f,\n    1.616545f, 1.625392f, 1.634287f, 1.643231f, 1.652224f, 1.661266f,\n    1.670358f, 1.6795f,   1.688691f, 1.697933f, 1.707225f, 1.716569f,\n    1.725963f, 1.735409f, 1.744906f, 1.754456f, 1.764058f, 1.773712f,\n    1.783419f, 1.793179f, 1.802993f, 1.81286f,  1.822782f, 1.832757f,\n    1.842788f, 1.852873f, 1.863013f, 1.873209f, 1.883461f, 1.893768f,\n    1.904132f, 1.914553f, 1.925031f, 1.935567f, 1.946159f, 1.95681f,\n    1.96752f,  1.978287f, 1.989114f, 2.0f,\n};\n</code></pre>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd2-set-sustain","title":"0xD2: Set Sustain","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd1-set-note-allocation-policy","title":"0xD1: Set Note Allocation Policy","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xd0-set-stereo-headset-effect","title":"0xD0: Set Stereo Headset Effect","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xcf-store-pointer","title":"0xCF: Store Pointer","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xce-unk_22","title":"0xCE: Unk_22","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xcd-disable-channel","title":"0xCD: Disable Channel","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xcc-v-set-value","title":"0xCC: [v] = Set Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xcb","title":"0xCB:","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xca-set-mute-behavior","title":"0xCA: Set Mute Behavior","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc9-v-set-value","title":"0xC9: [v] &amp;= Set Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc8-v-set-value","title":"0xC8: [v] -= Set Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc7","title":"0xC7:","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc6-set-soundfont","title":"0xC6: Set Soundfont","text":"<p>placeholde</p> <p>sets the audiobank for the channel to pull instruments from. see 0xEB.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc5-dyn-set-dyntable","title":"0xC5: Dyn Set Dyntable","text":"<p>placholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc4-large-notes-on-short-notes-off","title":"0xC4: Large Notes On (Short Notes Off)","text":"<p>placeholder</p> <p>sets legato on. stacatto off.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc3-large-notes-off-short-notes-on","title":"0xC3: Large Notes Off (Short Notes On)","text":"<p>placeholder</p> <p>sets legato off. stacatto on.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xc1-set-instrument","title":"0xC1: Set Instrument","text":"<p>placeholder</p> <p>sets the instrument from the currently loaded audiobank for the channel to use.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xbe","title":"0xBE:","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xbd-set-sample-start","title":"0xBD: Set Sample Start","text":"<p>placeholder loop start</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xbc-p-cmdarg0","title":"0xBC: [p] += cmdArg[0]","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xbb-set-chorus","title":"0xBB: Set Chorus","text":"<p>placeholder</p> <p>also called comb filter, the devs called it chorus; they are essentially the same thing with different names. equivalent to MIDI chorus to create a second delayed sample play in the channel. arg 1 defines the delay as a codebook offset(?), and arg 2 determines the chorus amount/volume. the effect is not 1:1 with midi chorus.</p> <p>arg1 value should always have a second nibble value of <code>0</code>, the game will crash or produce static or robotic noise otherwise. only put data in the first nibble of the u8 byte.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xba-set-gatetime-humanization","title":"0xBA: Set Gatetime Humanization","text":"<p>bugged</p> <p>this command uses a parameter from velocity humanization to affect the amount of gatetime humanization.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb9-set-velocity-humanization","title":"0xB9: Set Velocity Humanization","text":"<p>placeholder</p> <p>this command sets a random amount of variation in the velocity of notes, or humanization.</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb8-v-random-value","title":"0xB8: [v] = Random Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb7","title":"0xB7:","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb6-read-dyntable","title":"0xB6: Read Dyntable","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb5-read-dyntable-large","title":"0xB5: Read Dyntable Large","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb4-set-dyntable-large","title":"0xB4: Set Dyntable Large","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb3-load-filter","title":"0xB3: Load Filter","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb2-dynread-sequence-large","title":"0xB2: Dynread Sequence Large","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb1-clear-filter","title":"0xB1: Clear Filter","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xb0-set-filter","title":"0xB0: Set Filter","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa8-random-range-large","title":"0xA8: Random Range Large","text":"<p>placeholder</p> <p>!! COMMAND IS 0xBD IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa7","title":"0xA7:","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa6","title":"0xA6:","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa5-v-channel-index","title":"0xA5: [v] += Channel Index","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa4-set-surround-effect-index","title":"0xA4: Set Surround Effect Index","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa3-sfxstatep-v","title":"0xA3: sfxState[p] = [v]","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa2-sfxstatecmdarg0-v","title":"0xA2: sfxState[cmdArg[0]] = [v]","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa1-v-sfxstatep","title":"0xA1: [v] = sfxState[p]","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0xa0-v-sfxstatecmdarg0","title":"0xA0: [v] = sfxState[cmdArg[0]]","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x98-dynset-layer","title":"0x98: Dynset Layer","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x90-stop-layer","title":"0x90: Stop Layer","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x88-set-layer-absolute","title":"0x88: Set Layer (Absolute)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x80-test-layer-finished","title":"0x80: Test Layer Finished","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x78-set-layer-relative","title":"0x78: Set Layer (Relative)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x70-ioc-v","title":"0x70: IO[c] = [v]","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x60-v-ioc","title":"0x60: [v] = IO[c]","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x50-v-ioc","title":"0x50: [v] -= IO[c]","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x40-io-read-value-2","title":"0x40: IO Read Value 2","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x30-io-write-value-2","title":"0x30: IO Write Value 2","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x20-start-channel","title":"0x20: Start Channel","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x10-load-sample","title":"0x10: Load Sample","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-channel/#0x00-channel-delay","title":"0x00: Channel Delay","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/","title":"Sequence Flow Commands","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xff-end-of-script","title":"0xFF: End of Script","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xfe-delay-1-frame","title":"0xFE: Delay [1] Frame","text":"<p>Delays the processing of the script for one frame.</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xfd-delay-n-frames","title":"0xFD: Delay [n] Frame(s)","text":"<p>Delays the processing of the script for n frame(s), where n is set using command arguments.</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xfc-call-absolute","title":"0xFC: Call Absolute","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xfb-jump-absolute","title":"0xFB: Jump Absolute","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xfa-jump-absolute-if-v-0","title":"0xFA: Jump Absolute if [v] = 0","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf9-jump-absolute-if-v-0","title":"0xF9: Jump Absolute if [v] &lt; 0","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf8-loop-start","title":"0xF8: Loop Start","text":"<p>placeholder cc102 with cc104 being loop count</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf7-loop-end","title":"0xF7: Loop End","text":"<p>placeholder cc103</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf6-loop-break","title":"0xF6: Loop Break","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf5-jump-absolute-if-v-0","title":"0xF5: Jump Absolute if [v] &gt;= 0","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf4-jump-relative","title":"0xF4: Jump Relative","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf3-jump-relative-if-v-0","title":"0xF3: Jump Relative if [v] = 0","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-flow/#0xf2-jump-relative-if-v-0","title":"0xF2: Jump Relative if [v] &lt; 0","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/","title":"Sequence Layer Commands","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xf1-set-surroud-effect-index","title":"0xF1: Set Surroud Effect Index","text":"<p>placeholder</p> <p>!!NOT AVAILABLE IN OOT!!</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xf0","title":"0xF0:","text":"<p>placeholder</p> <p>!!NOT AVAILABLE IN OOT!!</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xe0-set-short-note-gatetime-from-table","title":"0xE0: Set Short Note Gatetime From Table","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xd0-set-short-note-velocity-from-table","title":"0xD0: Set Short Note Velocity From Table","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xcf-set-release","title":"0xCF: Set Release","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xce-set-pitch-bend-2-semitones","title":"0xCE: Set Pitch Bend (\u00b12 Semitones)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xcd-set-stereo-effects","title":"0xCD: Set Stereo Effects","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xcc-ignore-key-based-pan","title":"0xCC: Ignore Key-Based Pan","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xcb-set-envelope","title":"0xCB: Set Envelope","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xca-set-pan","title":"0xCA: Set Pan","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc9-set-short-note-gatetime","title":"0xC9: Set Short Note Gatetime","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc8-disable-portamento","title":"0xC8: Disable Portamento","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc7-enable-portamento","title":"0xC7: Enable Portamento","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc6-set-instrument","title":"0xC6: Set Instrument","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc5-continuous-notes-off","title":"0xC5: Continuous Notes Off","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc4-continuous-notes-on","title":"0xC4: Continuous Notes On","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc3-set-default-shote-note-delay","title":"0xC3: Set Default Shote Note Delay","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc2-set-transposition","title":"0xC2: Set Transposition","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc1-set-short-note-velocity","title":"0xC1: Set Short Note Velocity","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0xc0-layer-delay","title":"0xC0: Layer Delay","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0x80-note-v-g","title":"0x80: Note (V, G)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0x40-note-d-v","title":"0x40: Note (D, V)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-layer/#0x00-note-d-v-g","title":"0x00: Note (D, V, G)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/","title":"Sequence Player Commands","text":"<ul> <li> <p> \u00a0\u00a0THIS PAGE IS A WIP</p> <p>This page is a work in progress and requires further editing.</p> </li> </ul> <p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xf1-reserve-notes","title":"0xF1: Reserve Notes","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xf0-unreserve-notes","title":"0xF0: Unreserve Notes","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xef-print-3-bytes","title":"0xEF: Print [3] Bytes","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xdf-set-transposition","title":"0xDF: Set Transposition","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xde-set-transposition-relative","title":"0xDE: Set Transposition (Relative)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xdd-set-tempo","title":"0xDD: Set Tempo","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xdc-add-tempo","title":"0xDC: Add Tempo","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xdb-set-master-volume","title":"0xDB: Set Master Volume","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xda-change-volume","title":"0xDA: Change Volume","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd9-set-volume-scale","title":"0xD9: Set Volume Scale","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd7-initialize-channels","title":"0xD7: Initialize Channels","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd6-disable-channels","title":"0xD6: Disable Channels","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd5-set-mute-scale","title":"0xD5: Set Mute Scale","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd4-mute-sequence","title":"0xD4: Mute Sequence","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd3-set-mute-behavior","title":"0xD3: Set Mute Behavior","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd2-set-short-note-velocity-table","title":"0xD2: Set Short Note Velocity Table","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd1-set-short-note-gatetime-table","title":"0xD1: Set Short Note Gatetime Table","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xd0-set-note-allocation-policy","title":"0xD0: Set Note Allocation Policy","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xce-v-random-value","title":"0xCE: [v] = Random Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xcd-dyncall","title":"0xCD: Dyncall","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xcc-v-set-value","title":"0xCC: [v] = Set Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc9-v-set-value","title":"0xC9: [v] &amp;= Set Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc8-v-set-value","title":"0xC8: [v] -= Set Value","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc7","title":"0xC7:","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc6-stop-script","title":"0xC6: Stop Script","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc5-unk_16-address","title":"0xC5: Unk_16 = address","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc4-call-sequence","title":"0xC4: Call Sequence","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc3","title":"0xC3:","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xc2","title":"0xC2:","text":"<p>placeholder</p> <p>!! NOT AVAILABLE IN OOT !!</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xb0-load-sequence","title":"0xB0: Load Sequence","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0xa0-set-channel-relative","title":"0xA0: Set Channel (Relative)","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x90-set-channel","title":"0x90: Set Channel","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x80","title":"0x80:","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x70-ioc-v","title":"0x70: IO[c] = [v]","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x60-async-load","title":"0x60: Async Load","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x50-v-ioc","title":"0x50: [v] -= IO[c]","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x40-stop-channel","title":"0x40: Stop Channel","text":"<p>placeholder</p>"},{"location":"vanilla-reference/seqplayer/seq-player/#0x00-v-chanc","title":"0x00: [v] = chan[c]","text":"<p>placeholder</p>"}]}